{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-redefine/source/assets/fonts.css","path":"assets/fonts.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","path":"assets/odometer-theme-minimal.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/OPTIMA.woff","path":"fonts/OPTIMA.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/OPTIMA_B.woff","path":"fonts/OPTIMA_B.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Optima Medium.woff","path":"fonts/Optima Medium.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Optima_Italic.woff","path":"fonts/Optima_Italic.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","path":"fontawesome/all.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","path":"fontawesome/duotone.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","path":"fontawesome/brands.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","path":"fontawesome/fontawesome.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","path":"fontawesome/light.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","path":"fontawesome/regular.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","path":"fontawesome/solid.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","path":"fontawesome/svg-with-js.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","path":"fontawesome/thin.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","path":"fontawesome/v4-shims.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","path":"fontawesome/v4-font-face.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","path":"fontawesome/v5-font-face.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","path":"images/redefine-avatar.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","path":"images/redefine-logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","path":"images/redefine-logo.webp","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","path":"webfonts/fa-duotone-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","path":"webfonts/fa-duotone-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","path":"webfonts/fa-light-300.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","path":"webfonts/fa-light-300.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","path":"webfonts/fa-thin-100.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","path":"webfonts/fa-thin-100.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","path":"webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","path":"webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","path":"css/common/redefine-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","path":"js/layouts/lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/menu-shrink.js","path":"js/layouts/menu-shrink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/odometer.min.js","path":"js/layouts/odometer.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","path":"js/layouts/toc.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","path":"js/libs/mermaid.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","path":"js/libs/mermaid.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","path":"js/plugins/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","path":"js/plugins/tabs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/code-block.js","path":"js/tools/code-block.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/dark-light-toggle.js","path":"js/tools/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/go-top-bottom.js","path":"js/tools/go-top-bottom.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/local-search.js","path":"js/tools/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/toc-toggle.js","path":"js/tools/toc-toggle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","path":"js/tools/runtime.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","path":"css/common/codeblock/code-block.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676625683197},{"_id":"source/_posts/MethodologyFront-endEngineering.md","hash":"6f9fdeca0bb2b015edde8f8fb93c2598d67fe472","modified":1676982493535},{"_id":"source/_posts/MethodologyFront-endHistory.md","hash":"deeaf750e947fdb3be89b9e51cffcf012b9fa124","modified":1676982491146},{"_id":"source/_posts/MethodologyJSExcutionProcess.md","hash":"9dfd42eaedb97bb3095831d8ed109f85b0e5f086","modified":1676883915982},{"_id":"source/_posts/MethodologyRefactoring.md","hash":"0e4aca0271a1e9e7012348be3140bfe1a0d8ded5","modified":1676982499797},{"_id":"source/_posts/ReprintJSEventLoop.html","hash":"9ebdcd6efb701691e80f40d264e3d60cd8a9474c","modified":1676982143389},{"_id":"source/_posts/ReprintVueCompositionAPI.html","hash":"dda841b533da5a8e7075b9185cab99578f858c7b","modified":1676543665309},{"_id":"source/_posts/MethodologyStateManagement.md","hash":"dd8b409b3ec50042f5188d77f5343f0c832f272d","modified":1676982502106},{"_id":"source/categories/index.md","hash":"5078291948cf897258007470951ef34cd129af80","modified":1675192987768},{"_id":"source/_posts/vueSourceCodeStudy01.md","hash":"f67b665dc8033a3a05b0797f2a30c8bdcda3deb5","modified":1676982527916},{"_id":"source/_posts/vueSourceCodeStudy02.md","hash":"6645898326da553aff8acd703e4df92a5458d07a","modified":1676982530400},{"_id":"source/_posts/.obsidian/app.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1676540098228},{"_id":"source/tags/index.md","hash":"5446c7484fbe4610611ac36065df0d6d6f6d12fe","modified":1675189707535},{"_id":"source/_posts/.obsidian/appearance.json","hash":"9439122150a0431e432676115220bc925af96094","modified":1676540098233},{"_id":"source/_posts/.obsidian/core-plugins.json","hash":"7a7e9dd69d4a2756327ee34721177b712177bb3f","modified":1676540097798},{"_id":"source/_posts/.obsidian/core-plugins-migration.json","hash":"46d9be486f2fb0a1a6262ab8fe3c07ce989234a3","modified":1676540097807},{"_id":"source/_posts/.obsidian/hotkeys.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1676480892826},{"_id":"source/_posts/.obsidian/workspace.json","hash":"b2b1d3851448e6168a5dec97737a083ca1a42bce","modified":1676623739105},{"_id":"source/_posts/someInterestingQuestions02.md","hash":"f3e862db0c57302bb0af94276aa4d152b434ae89","modified":1676982514588},{"_id":"source/_posts/someInterestingQuestions01.md","hash":"da66473de890bdaffa5a5d7717d3ccad26b2a039","modified":1676982511923},{"_id":"source/_posts/someInterestingQuestions01/q1.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675195725315},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop03.png","hash":"7f95e0b62fd9ae0040fab231895410abf9d526b7","modified":1638968257131},{"_id":"source/_posts/someInterestingQuestions01/q2.png","hash":"ab246fa62b3c3fdf023fb533f7427705e8d2d505","modified":1675197650865},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop02.png","hash":"93ff24fbfd93e5b99d529cc00f2149c790644c39","modified":1638968257131},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop04.png","hash":"d59c83718dc41c1629890c7d914414f2302e195a","modified":1638968257131},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop01.png","hash":"7a281cd1d656277c58255d68c46db2d8dbe9e070","modified":1638968257131},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop06.png","hash":"347ee80e4dc7f343e58b15fedea956e360c1f68d","modified":1638968257142},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop09.png","hash":"ae8162122e5fb292873fcc69c3c16fbb52f95b1e","modified":1638968257142},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop05.png","hash":"7e3a6a6e47d245a5583a48d2936c372aa0d6b71e","modified":1638968257131},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop08.png","hash":"cd253aa9ea50a49f7fc8da77253b2cb026c01d37","modified":1638968257142},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop10.png","hash":"84bdb04de43b3bbc1b4d1bdb3c5ecb22581375cf","modified":1638968257142},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop07.png","hash":"250431ab613bced9bc1eacfec8c9a704d5f1ea72","modified":1638968257142},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop11.png","hash":"bdfa84341a752062610fb3781a6f0a3d108ef7c6","modified":1638968257142},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop12.png","hash":"540147c664a2eb5dfbaf33da40cfd17426b95f65","modified":1638968257142},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop13.png","hash":"ef2d72c568f8af879afbc3f3ee56e911bc1ca6a4","modified":1638968257142},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop14.png","hash":"f2b0ee81d2a1a8ae5fc3f64fa68cc7986e425583","modified":1638968257142},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop15.png","hash":"0d9d787008e6b5310d4b99c0ecfb784796d1cc2e","modified":1638968257142},{"_id":"source/_posts/someInterestingQuestions01/q3.png","hash":"84b813171691c1aee44f99587f2f2ab396b1b072","modified":1675197776330},{"_id":"source/_posts/vueSourceCodeStudy01/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1675959892671},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop17.jpg","hash":"f5d3a3fe0a890abc041f2a9f567935b77f344a68","modified":1638968257142},{"_id":"source/_posts/vueSourceCodeStudy01/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1675959357872},{"_id":"source/_posts/vueSourceCodeStudy01/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1675963115124},{"_id":"source/_posts/vueSourceCodeStudy02/s2-1.png","hash":"bb5f44da3cf6b932e2ac62fab6d46d106d6ed640","modified":1676051552971},{"_id":"source/_posts/vueSourceCodeStudy01/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1675963407640},{"_id":"source/_posts/vueSourceCodeStudy02/s2-11.png","hash":"ea21eca2b7ad3cdba997cf6c1794476b4499ba78","modified":1676058874967},{"_id":"source/_posts/vueSourceCodeStudy01/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1675963966858},{"_id":"source/_posts/vueSourceCodeStudy02/s2-14.png","hash":"56f15fbb8bd9d33872a72040afb3c06594e72bf4","modified":1676312806589},{"_id":"source/_posts/vueSourceCodeStudy02/s2-5.png","hash":"077b04a0d1bd5f4f9bb384db7ad4924685182348","modified":1676054742802},{"_id":"source/_posts/vueSourceCodeStudy02/s2-3.png","hash":"b15ed7c05f54345ed7f60e9c601445a8cf84f64d","modified":1676052657657},{"_id":"source/_posts/vueSourceCodeStudy02/s2-4.png","hash":"8a88ec1634043270e224c53bcd105514a0ed14df","modified":1676052820095},{"_id":"source/_posts/vueSourceCodeStudy02/s2-6.png","hash":"1146414d813743c20228f0c2517be2a412f896eb","modified":1676055686255},{"_id":"source/_posts/vueSourceCodeStudy02/s2-7.png","hash":"d5276f1c2a20f569dcd3f63e1b6360ab0fd8236c","modified":1676056061638},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop16.png","hash":"a82d6eae47b8187e8bad6e42d33c1e43fb399cac","modified":1638968257142},{"_id":"source/_posts/vueSourceCodeStudy01/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1675964442401},{"_id":"source/_posts/vueSourceCodeStudy01/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1675964111203},{"_id":"source/_posts/vueSourceCodeStudy02/s2-10.png","hash":"ba6e970962ef439ade2d69a57c23f460702738ac","modified":1676058550964},{"_id":"source/_posts/vueSourceCodeStudy02/s2-12.png","hash":"572a236f947710c79575e3e3cdd5617d32df3bfa","modified":1676060956209},{"_id":"source/_posts/vueSourceCodeStudy02/s2-2.png","hash":"7edb359a25e8e41d6fa1cad82cd775037139d9c3","modified":1676051990660},{"_id":"source/_posts/vueSourceCodeStudy02/s2-13.png","hash":"c909a1adf9e4363473e8b311635c48436b866e8b","modified":1676312015844},{"_id":"source/_posts/vueSourceCodeStudy02/s2-8.png","hash":"4df0982ea7d09c073e403850eb074166eafa127c","modified":1676057645394},{"_id":"source/_posts/vueSourceCodeStudy02/s2-9.png","hash":"406ba4a71c8c0762c2d53ce34df7019d90427845","modified":1676057585599},{"_id":"source/_posts/vueSourceCodeStudy02/s0.png","hash":"e362937b7163f1d04576aeb0e11d8012b4a26e4b","modified":1676050676756},{"_id":"source/_posts/vueSourceCodeStudy02/s2-15.png","hash":"c03cc2fa65bb8bed84a677e1ddfb24a53d927b46","modified":1676313302204},{"_id":"node_modules/hexo-theme-redefine/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":1676313644246},{"_id":"node_modules/hexo-theme-redefine/CONTRIBUTING.md","hash":"4683df57687241164bc55f1c75fce06041f7ebf4","modified":1676313650020},{"_id":"node_modules/hexo-theme-redefine/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1676313644709},{"_id":"node_modules/hexo-theme-redefine/CODE_OF_CONDUCT.md","hash":"61a6276ef54989b7a1325f3ecb3183a4dfdf50cb","modified":1676313650019},{"_id":"node_modules/hexo-theme-redefine/_config.yml","hash":"14776d3fde14538dfeaf0820ad8301671467989d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/package.json","hash":"7b9d4f6511d17adafa8f6456c8ea55b47fed5a7f","modified":1677577036755},{"_id":"node_modules/hexo-theme-redefine/layout/404.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1676313645748},{"_id":"node_modules/hexo-theme-redefine/languages/en.yml","hash":"19d9fa6331e5b31ee810dc9a8c75e6c6c42ad6d0","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/README.md","hash":"43b4c8bffe9c0c9249191d380299691d4c3d8224","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/languages/zh-CN.yml","hash":"01a9b2bf05c013f626494d0ce5fa08f617818ac7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/languages/zh-TW.yml","hash":"ef1a0190b2069d463504ec48dad19f34875d8627","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/archive-content.ejs","hash":"64254fbe361831419333348fa7ad151629634eba","modified":1676313645750},{"_id":"node_modules/hexo-theme-redefine/README_zh-CN.md","hash":"8cb3870f88a9b7b5d1976c14ba8c82c05007943d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/article-content.ejs","hash":"006c21dcc0cb66a58a94bd7a56f739969e2360c1","modified":1676313645753},{"_id":"node_modules/hexo-theme-redefine/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1676313645752},{"_id":"node_modules/hexo-theme-redefine/layout/category-content.ejs","hash":"7c7680ee5d02e4dd5917ed5a621ecf51b61d8181","modified":1676313645758},{"_id":"node_modules/hexo-theme-redefine/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1676313645759},{"_id":"node_modules/hexo-theme-redefine/layout/home-content.ejs","hash":"e9aa5fd0cce47d5d5a9962f34a5dca0800f893e3","modified":1676313645769},{"_id":"node_modules/hexo-theme-redefine/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1676313645771},{"_id":"node_modules/hexo-theme-redefine/layout/layout.ejs","hash":"0b4c05d3a957de435e8f495a9598ec3bf9fb5412","modified":1676313645772},{"_id":"node_modules/hexo-theme-redefine/README_zh-TW.md","hash":"295dcfd96478f19d9b05f10d9ac4fefb54879252","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/category-list.ejs","hash":"92cbeee5c99b29616ff3ccbee47fe75b756bfa96","modified":1676313645759},{"_id":"node_modules/hexo-theme-redefine/layout/page.ejs","hash":"aa7ec5657fef63b038a39e4cb444027bdc65dccb","modified":1676313645776},{"_id":"node_modules/hexo-theme-redefine/layout/tag-content.ejs","hash":"0ceed12ff57c981555158e47c8b398baf70ce5f8","modified":1676313645783},{"_id":"node_modules/hexo-theme-redefine/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1676313645785},{"_id":"node_modules/hexo-theme-redefine/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1676313645783},{"_id":"node_modules/hexo-theme-redefine/scripts/use-source-data.js","hash":"3ab07198fbca7015dcc4c061247681480058b0dc","modified":1676313646915},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/aliyun_cdn.yml","hash":"09693748d95f126abe95582152d1c364bc82b4bb","modified":1676313667936},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/npm-publish.yml","hash":"2b1771ae2a71e3c148b09d507f9be47d04e6e623","modified":1676313667938},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/head.ejs","hash":"0f6c643d43bec3e58f7359db10d69c73f695971a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/footer.ejs","hash":"b295ad6cae67c14b5e9774ce958a6fd40754a2fc","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/menu.ejs","hash":"cf433e065c6d12b83f7209ccc349fb744028d83a","modified":1676313645774},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/page-template.ejs","hash":"61a4318e70fd1aea3c1a1a7554ee415e86a61320","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/pjax.ejs","hash":"6416c0e4c7583db85d7f738b82e5aaa8f254876e","modified":1676313645777},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/scripts.ejs","hash":"ba76c129a19df66125aa3c6c7aab788740bb1399","modified":1676313645781},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-report--english-version-.md","hash":"6b7cd67ce8911fdc0863da1b54e404514c7e85e5","modified":1676313650017},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-提交--中文版本-.md","hash":"ce8a586c2edfb66efe03d6c49e642ba566d302c5","modified":1676313650018},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/feature-request--english-version-.md","hash":"243dbc4cf0678ca4f89fc2559eab3ace9fa881a7","modified":1676313650021},{"_id":"node_modules/hexo-theme-redefine/scripts/events/welcome.js","hash":"10e2d223140bc547de14f344e046ab8b0aa48bf0","modified":1676313646918},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/lazyload-handle.js","hash":"7a8fd4996b9720c8d4cdb3042bfe5a1008f7c5fd","modified":1676313645809},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/功能建议--中文版本-.md","hash":"ef69a31bcdbe2f749fd4990a4a85d51c300cd2dd","modified":1676313650027},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/link-handle.js","hash":"a92ed888dad340809ee558020e0bb9f41e6413ee","modified":1676313645814},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/autoCanonical.js","hash":"f3ea74759129c71041371a1d77c687eb6aa88d3a","modified":1676313645796},{"_id":"node_modules/hexo-theme-redefine/scripts/events/404.js","hash":"169245d7b2af1ff401cf76e718c28b4e38f637c7","modified":1676313645790},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/articleRecommend.js","hash":"946472e11b68be97a82d56509a2ac90f5beb1352","modified":1676313645795},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btn.js","hash":"3e4c1b01a1f922f712895e9ac06c030231b35cf2","modified":1676313645798},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/export-config.js","hash":"fafb01a50c52d20725ffcae06bad827e01cdee77","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/generate_seo.js","hash":"e0059a60cc5978be6792dcf795a2ece3a509f41a","modified":1676313645806},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/helper.js","hash":"8b02ae0ce5ae0f179602a9e19c9b7a0d9e17e3a4","modified":1676313645808},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/folding.js","hash":"68ed9c2184cc26c2c8f404e1cddf45bea042e1b2","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note-large.js","hash":"88a53682ebb71ff2ce1d08205f5eb22b837acd44","modified":1676313646906},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note.js","hash":"7c529ffe108a04a03ae6667074f69c5e62be8c54","modified":1676313646906},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btns.js","hash":"a91492e772287114527a3fbc85f0c7c1c1b15eb3","modified":1676313645799},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/tabs.js","hash":"7ad85a4de6918a9b646cc083704d4fd8a387b98d","modified":1676313646911},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":1676313645737},{"_id":"node_modules/hexo-theme-redefine/source/assets/fonts.css","hash":"39f2b7042486b4a1df2f4304a6569b21559804e6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/OPTIMA.woff","hash":"ddefd7389a3aaf00d50e2ecc99f71eefe853c4b3","modified":1676313659823},{"_id":"node_modules/hexo-theme-redefine/source/fonts/OPTIMA_B.woff","hash":"129a1b30e7b829b9894245b3c99e1c6c016e4147","modified":1676313659820},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","hash":"c7e7aa06dcb3062941932ff248e93fa6a86b463d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Optima Medium.woff","hash":"f18b71ba83f68f1478b0af64cf76a99971c4fd9a","modified":1676313659818},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Optima_Italic.woff","hash":"7200bef189fb05f741555e734908df59d0f20e2f","modified":1676313659822},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","hash":"956a0381099e0204c870fc447b8522b2f4b063b8","modified":1676313644873},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","hash":"1e252b2b3e8486d3d6e4a6fa36157aaad73d9bee","modified":1676313645736},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","hash":"8b6a0f2a240efd3175e6aef9928b92c62ffd43d8","modified":1676313645738},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","hash":"9dfe544d3afe0a3dfbe61bbb3bbb6ac94995d90c","modified":1676313645738},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","hash":"28ba38557852bff7d4f81a589958ceead70b3b2d","modified":1676313645740},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","hash":"65038cffbfb1e0f087d44abf9758ad16a08caf82","modified":1676313645741},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","hash":"3f1f1977ce39f47e963194ae11a1f3dbbe4d951e","modified":1676313645743},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","hash":"57df6abf04b71d0946fa20e66e946d3a2fa66667","modified":1676313645742},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","hash":"2f9054f6889cb6fe648f65a04370b1bf5a08ab98","modified":1676313650083},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","hash":"364550d66fb15b740c038da4780ff4c78c500c70","modified":1676313650083},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","hash":"758a98c7bacc6d72bc3f53ecad34424096729699","modified":1676313645744},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","hash":"1d37c4ea27006b51d5e48c028329de57475f53bd","modified":1676313659602},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","hash":"015e3b4e7d1cefd31db0f4a07651aa09626ff522","modified":1676313650084},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","hash":"1bccc453283eb1a817b1ad7efe46864750c71865","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","hash":"1feb45991ffce095b0b31a7ab0156cd9cdb8cfd7","modified":1676313645817},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","hash":"24f298867c8f7d42240dba3a17da1a0224bd6a94","modified":1676313659600},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/gitalk.ejs","hash":"28a0c8b1da66a9b6863e5444aa0b50c8f6b862f0","modified":1676313645766},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","hash":"1d51fca676afe5d0cbaa854d650a99d23e2f8219","modified":1676313667931},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/comment.ejs","hash":"f84b70c232cc348647f79fa0da63c77dedc36d62","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/twikoo.ejs","hash":"f454a7ef2b42865cdfafb9a9d66e3635a8e4175f","modified":1676313645787},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/components/first-screen.ejs","hash":"d613cd05dfc34760f60101bac45c592bf8bf7d3c","modified":1676313645762},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/waline.ejs","hash":"bb323d740d9fe60b3f64839cef43e7947cbf6383","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/components/404-template.ejs","hash":"7729caa836a1c2208860cada53d674e9e9ff61f3","modified":1676313645746},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/components/archive-list.ejs","hash":"7c33e49286d54824cd8f3483e30de5579951edc6","modified":1676313645751},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/components/friends-link.ejs","hash":"3787e5c947e04e2cac3ed31d19380f4aeeba8641","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/posts/article-copyright-info.ejs","hash":"77e13720374efb902ee3d4d04d13b62de033a3ae","modified":1676313645755},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/components/home-article-meta-info.ejs","hash":"7175050b978518041355d517d9e8623f03fbd079","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/image-viewer.ejs","hash":"beb3dec5e08856a29d585fe0eb94a8a6ddade4dd","modified":1676313645770},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/posts/article-meta-info.ejs","hash":"8cc3b2615207aaff38c3facfcf618207b21f5eb5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/posts/toc.ejs","hash":"b3ab8e1f6c08090f6b59fa6ffc802f6427ea3c37","modified":1676313645786},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/local-search.ejs","hash":"72c9acca0280f0e63e6a5d31618dd2707bdbec3f","modified":1676313645773},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/paginator.ejs","hash":"cfd4d9a30bd20ee0750b79226cb94562439013bf","modified":1676313645777},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/post-tools.ejs","hash":"6418d8d9b1d9f9dc5361fabe280507c8a50d9513","modified":1676313645778},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/side-tools.ejs","hash":"9f8fdf30f308bd20488aa76f134c516972b190cc","modified":1676313645782},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/progress-bar.ejs","hash":"d893fb2761220282efa6461c0d4107de3e2bcfdb","modified":1676313645779},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","hash":"b04a61462f8b95be242c0c73cbbe7ec73f7c8078","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/tagcloud.ejs","hash":"cd29a21b9747f39ff1761c3dbbf22523953e19d2","modified":1676313645784},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","hash":"b45d84487321afa6a294e6fb1c179eb65901b0d3","modified":1676313650033},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","hash":"b6eff1310546bff7bcf76f2a088708c7f84c306b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","hash":"6f3a891fd4c24e8f975af44ad30dfb62ed67ba5a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","hash":"5d85a41f55be3274610813912264dce3d6a237cc","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","hash":"f8df2e4c4829bf081fa49acc0832fec0d07bdeb9","modified":1676313650036},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","hash":"d3a4c4241e6ce799edef63b6697da269ca50e30c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","hash":"d1c5374fbb093d7e800f6f2a71f2cd00955e4802","modified":1676313650045},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","hash":"5937e34c4be98f55a92257a5b4ec6d62ac76e124","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","hash":"298c51d15c0286acbebe420369daf87edf8aada7","modified":1676313645813},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","hash":"d170c655994a1d8615f50201c69b801861456e8d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","hash":"b5d25373018a8dbe109edcd2e28768f65948fae1","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1676313646907},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/menu-shrink.js","hash":"de907057c0d162664e92880aaf457002c51dd5b6","modified":1676313645818},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","hash":"c8701261369f701de71bd906407ffb99c3ef6a3d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","hash":"42b5e298902186d08fe7b4aa5b7a9e341d308688","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1676313645793},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1676313646909},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","hash":"01d151fc85f6c5744132112eb81f072cbb688d44","modified":1676313646912},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/code-block.js","hash":"0c80da6fcf17d0785ae6f68be50a9131e46e1121","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/dark-light-toggle.js","hash":"1c12e83fd94d51b4476c8f480165312424d62f4a","modified":1676313645803},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/go-top-bottom.js","hash":"f5f6f6ba96e288a5fd1427b7f3761139623e8fcd","modified":1676313645807},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/local-search.js","hash":"bc9e888ee05c4fb0e8fd1962423a04f63c1e393e","modified":1676313645816},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/toc-toggle.js","hash":"eeab6a799bf23a2d4c58921dcf8b15203e1d3bfd","modified":1676313646913},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","hash":"84b8147c7ff1f949f0b7215060376751590111d6","modified":1676313645820},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","hash":"60662f11426f7c600a1bc1cdead4d6748ee5ff54","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","hash":"cfc1a9b582b281e9dd1688a55cfbc5e89d3bd968","modified":1676313646910},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/404.styl","hash":"2195e6e3fb7cfb3d63f053bc4d3d40e64a442053","modified":1676313650031},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","hash":"65e9a6ba5f8f9371bcd6db62d8ba7355595905d2","modified":1676313650049},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","hash":"6b86869535e451fd1a90b9ca2585f3e5e340064e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/archive-list.styl","hash":"3d14d928c7366c121cb833beea4dd41c8b362769","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-copyright-info.styl","hash":"305e4f05f672354f26b3f22013d0c44d84bd3e2b","modified":1676313650038},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-meta-info.styl","hash":"70a6640ef1dbe75dfe91fde0462e9044363060f7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/footer.styl","hash":"247c044f60d84c32b36b83c3f9b6a018c7a96b17","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/image-viewer.styl","hash":"fe4e168a1968b3f9b33d0292944590e76809e437","modified":1676313650059},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/first-screen.styl","hash":"59d0a197c0866a05ebe788c823d22d1c4248ec5a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/local-search.styl","hash":"575dba66a4b2914cd6e4627ab9f6369bc08c4d99","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/menu.styl","hash":"6edf2b90f666e6ed1b931ea96c8de2c0715e8825","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/page-template.styl","hash":"04f2b9c574e4d9a9a6796ebe2957af84da352f94","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/paginator.styl","hash":"70e2af5941d443cbd465a628c96d4d3e7a1e2de1","modified":1676313650068},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/post-tools.styl","hash":"b7a2ff5fe4ec790e79bdb24554e5cd8151d5015f","modified":1676313650069},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/progress-bar.styl","hash":"efa81a0f934b6afc8fb0da62d5fc3a10804851a6","modified":1676313650070},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/tagcloud.styl","hash":"5a9eaa55b849336b374ea380a1ddb125ddf0258f","modified":1676313650076},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/side-tools.styl","hash":"73b9f44df9b8fa93f41464de21946c1ba71f0a1b","modified":1676313650072},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/toc.styl","hash":"56210b61fb45e10ac643c726f7b45014d34f1ffd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/buttons.styl","hash":"015fde18c45e23a26dcad597ffc871f09e93c7a5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/comment.styl","hash":"e7aa735086370611f5bbd49b7095544570111527","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/tabs.styl","hash":"d0a47b2a1c03cbd69762bcce3afa738562e8ee09","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/notes.styl","hash":"2a05e7254943073af6556e1a44bef392e3a368fd","modified":1676313650065},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/folding.styl","hash":"fd4ae4a7de831d5bcbf017024f61731122c279c3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/gitalk.styl","hash":"d247824a18463b48af23f3b476d7d90ad7047858","modified":1676313650055},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/waline.styl","hash":"d0f011b5bf95807e3561d269129f097af4e5414e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/twikoo.styl","hash":"e926c0121d94775c3cd9e9667c670d50b0fcb938","modified":1676313650078},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","hash":"132096157a1bd06ee90d0e099b30858e55f44a2f","modified":1676313660411},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","hash":"4caeaf71d849d565eb73d6cfa2a885b8fd5a1585","modified":1676313645732},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","hash":"3539eea45ea45122110ca826e4cf461a9fc24bfd","modified":1676313650416},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","hash":"2a4c024238017920b3fd07ec8ace147fa813131d","modified":1676313645074},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","hash":"63bee62a49b1e129dd410a7804c36f600e45e9ef","modified":1676313664816},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","hash":"e62b834496e8808e09d69b157dd8d30767ab281d","modified":1676313666777},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","hash":"582f653eaef29d0cd2e05e104f2cb5776cb8ff43","modified":1676313662143},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","hash":"43e3f3b70a4a803054641c8d946b46978dfcbc23","modified":1676313663365},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","hash":"1aca70954817e603412964fdbfb231f03137af7c","modified":1676313644870},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","hash":"90725403a3ee84c1703acbdc0e913147345e46fb","modified":1676313667930},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","hash":"26722d8063ee4161197b007488dbfb0bd45d543d","modified":1676313657090},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":1676313646900},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","hash":"44a016037ea5a3573ab827be35355262850678b4","modified":1676313655202},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","hash":"fe73f4c9149947d93fde22f82e13c4186b341b43","modified":1676313653830},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","hash":"6403f57a485e73326e731359cc246a7ecacf96db","modified":1676313652600},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","hash":"e237771f52ad4d3a041c6b9f51ca66b0811655c9","modified":1676313659599},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":1676313650009},{"_id":"public/search.xml","hash":"3add45a39050752294f1988b9d643257c2d4865c","modified":1677601654648},{"_id":"public/categories/index.html","hash":"8788074d06a44bdcfeb4644bfa934c166b8f9e3f","modified":1677601654648},{"_id":"public/tags/index.html","hash":"a4e40d8b65d21ea4f1aabea2be394140c096fde0","modified":1677601654648},{"_id":"public/404.html","hash":"025cc57c127790af8d25f7eac6e0d3e6dc379321","modified":1677601654648},{"_id":"public/2023/02/01/MethodologyRefactoring/index.html","hash":"891136f5d96e3c40df45ae1856a54a94e810fd83","modified":1676625950298},{"_id":"public/2023/02/01/MethodologyJSExcutionProcess/index.html","hash":"37920886ba8ea0ac2b6c042965921b50390bed49","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/index.html","hash":"68c92fd22bb11023aa8ea0f24696c6d095820c05","modified":1677601654648},{"_id":"public/2022/06/22/ReprintVueCompositionAPI/index.html","hash":"0921fa6573a2fc1eef538e0c38937fe899a854bc","modified":1677601654648},{"_id":"public/2022/06/15/MethodologyStateManagement/index.html","hash":"0724eba7c6218ab2fbb664eab250acee822edd14","modified":1677601654648},{"_id":"public/2022/06/03/vueSourceCodeStudy01/index.html","hash":"6514f656cff78b44523b9a6e7a7dbc55834935ef","modified":1677601654648},{"_id":"public/2022/06/03/vueSourceCodeStudy02/index.html","hash":"8274e6853c87bd8b2c3152c87987f22aa222305f","modified":1677601654648},{"_id":"public/2022/05/13/MethodologyFront-endEngineering/index.html","hash":"aa5c3225a960c3e75ee47edde9359845db6eba90","modified":1677374927990},{"_id":"public/2022/03/09/MethodologyFront-endHistory/index.html","hash":"4a32d118641f918ee034f4e2c928e7745b8c4192","modified":1676625950298},{"_id":"public/2021/02/25/someInterestingQuestions01/index.html","hash":"ea7af79e2caba94148be527d745eb0ab47a77002","modified":1676625950298},{"_id":"public/2021/02/23/someInterestingQuestions02/index.html","hash":"6b668ad8adb3658d432d6efa64121923ffb84ba6","modified":1676625950298},{"_id":"public/archives/index.html","hash":"52a9daa0b0f3446dcb0d3650f5b48069f77594e6","modified":1677601654648},{"_id":"public/archives/page/2/index.html","hash":"8f5e417dc323623d79a724997fef18afdae319e7","modified":1677601654648},{"_id":"public/archives/2021/index.html","hash":"b3db1830c6a21ed068f482481a9e73bf0b3e0b65","modified":1677601654648},{"_id":"public/archives/2022/index.html","hash":"3ffb01e490d44b26e82978452d3aefce1c35146e","modified":1677601654648},{"_id":"public/archives/2022/03/index.html","hash":"330160d9c4bd4e6ab98c5e99fabffc7ba6dfde47","modified":1677601654648},{"_id":"public/archives/2021/02/index.html","hash":"80977810442b2d644ab11d7f31293e0ee6bbb117","modified":1677601654648},{"_id":"public/archives/2022/05/index.html","hash":"ed4a7d04a580fb0a058a52d67331755d52c3aaa6","modified":1677374927990},{"_id":"public/archives/2022/06/index.html","hash":"6bbe7977a425d5dcd2589495186c23b827a27341","modified":1677601654648},{"_id":"public/archives/2023/index.html","hash":"348c9067aa97c27342712210d0668df8b3b9b6ec","modified":1677601654648},{"_id":"public/page/2/index.html","hash":"335e77335629ea7c3997776c58e80c75f3fad381","modified":1677601654648},{"_id":"public/categories/方法论/index.html","hash":"f2f13cfd0519d0d4b86a0e680e2c8aeb8b0861dd","modified":1677601654648},{"_id":"public/index.html","hash":"58eca1c95624906fddce761b64fdb3aee896dcb2","modified":1677601654648},{"_id":"public/archives/2023/02/index.html","hash":"490387538cfa870a7b477b543dac10077d725735","modified":1677601654648},{"_id":"public/categories/转载-JS/index.html","hash":"e65dca9a46b3db081c2dbce3616e434a664f4228","modified":1676625950298},{"_id":"public/categories/一些有趣的问题/index.html","hash":"8b3c2e37182b31f452856cfa46c902697dea139c","modified":1677601654648},{"_id":"public/categories/转载/index.html","hash":"88ce55f2a776d1fd64d7b1e5fdd36c9ce06dd941","modified":1677601654648},{"_id":"public/categories/源码/index.html","hash":"d898ec1f1bbedc4f1af50eea277b562dbc88fdd5","modified":1677601654648},{"_id":"public/tags/JS/index.html","hash":"8377cce134fc65753c27f75f0ce268c91d702a83","modified":1677601654648},{"_id":"public/tags/前端工程化/index.html","hash":"3c5a81915b7c89c71258907aaaba8322ed440723","modified":1677601654648},{"_id":"public/tags/vue/index.html","hash":"2788b9a6a6a2e9f148113650ebce0fbc0f049d5f","modified":1677601654648},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676625950298},{"_id":"public/fonts/Optima Medium.woff","hash":"f18b71ba83f68f1478b0af64cf76a99971c4fd9a","modified":1676625950298},{"_id":"public/fonts/OPTIMA_B.woff","hash":"129a1b30e7b829b9894245b3c99e1c6c016e4147","modified":1676625950298},{"_id":"public/fonts/OPTIMA.woff","hash":"ddefd7389a3aaf00d50e2ecc99f71eefe853c4b3","modified":1676625950298},{"_id":"public/images/redefine-avatar.svg","hash":"2f9054f6889cb6fe648f65a04370b1bf5a08ab98","modified":1676625950298},{"_id":"public/images/loading.svg","hash":"364550d66fb15b740c038da4780ff4c78c500c70","modified":1676625950298},{"_id":"public/fonts/Optima_Italic.woff","hash":"7200bef189fb05f741555e734908df59d0f20e2f","modified":1676625950298},{"_id":"public/images/redefine-logo.svg","hash":"015e3b4e7d1cefd31db0f4a07651aa09626ff522","modified":1676625950298},{"_id":"public/images/redefine-logo.webp","hash":"1d37c4ea27006b51d5e48c028329de57475f53bd","modified":1676625950298},{"_id":"public/webfonts/fa-v4compatibility.ttf","hash":"24f298867c8f7d42240dba3a17da1a0224bd6a94","modified":1676625950298},{"_id":"public/webfonts/fa-v4compatibility.woff2","hash":"1d51fca676afe5d0cbaa854d650a99d23e2f8219","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop03.png","hash":"7f95e0b62fd9ae0040fab231895410abf9d526b7","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop02.png","hash":"93ff24fbfd93e5b99d529cc00f2149c790644c39","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop01.png","hash":"7a281cd1d656277c58255d68c46db2d8dbe9e070","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop04.png","hash":"d59c83718dc41c1629890c7d914414f2302e195a","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop05.png","hash":"7e3a6a6e47d245a5583a48d2936c372aa0d6b71e","modified":1676625950298},{"_id":"public/assets/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":1676625950298},{"_id":"public/assets/fonts.css","hash":"39f2b7042486b4a1df2f4304a6569b21559804e6","modified":1677495422852},{"_id":"public/fontawesome/light.min.css","hash":"1e252b2b3e8486d3d6e4a6fa36157aaad73d9bee","modified":1676625950298},{"_id":"public/fontawesome/regular.min.css","hash":"8b6a0f2a240efd3175e6aef9928b92c62ffd43d8","modified":1676625950298},{"_id":"public/fontawesome/solid.min.css","hash":"9dfe544d3afe0a3dfbe61bbb3bbb6ac94995d90c","modified":1676625950298},{"_id":"public/fontawesome/thin.min.css","hash":"65038cffbfb1e0f087d44abf9758ad16a08caf82","modified":1676625950298},{"_id":"public/js/main.js","hash":"1feb45991ffce095b0b31a7ab0156cd9cdb8cfd7","modified":1676625950298},{"_id":"public/fontawesome/v4-font-face.min.css","hash":"57df6abf04b71d0946fa20e66e946d3a2fa66667","modified":1676625950298},{"_id":"public/fontawesome/v5-font-face.min.css","hash":"758a98c7bacc6d72bc3f53ecad34424096729699","modified":1676625950298},{"_id":"public/js/utils.js","hash":"1bccc453283eb1a817b1ad7efe46864750c71865","modified":1677495422852},{"_id":"public/css/style.css","hash":"11632073e1e412a95ad5e8978e0308fec2836d73","modified":1677495422852},{"_id":"public/fontawesome/brands.min.css","hash":"956a0381099e0204c870fc447b8522b2f4b063b8","modified":1676625950298},{"_id":"public/fontawesome/svg-with-js.min.css","hash":"28ba38557852bff7d4f81a589958ceead70b3b2d","modified":1676625950298},{"_id":"public/fontawesome/v4-shims.min.css","hash":"3f1f1977ce39f47e963194ae11a1f3dbbe4d951e","modified":1676625950298},{"_id":"public/fontawesome/fontawesome.min.css","hash":"4caeaf71d849d565eb73d6cfa2a885b8fd5a1585","modified":1676625950298},{"_id":"public/fontawesome/duotone.min.css","hash":"2a4c024238017920b3fd07ec8ace147fa813131d","modified":1676625950298},{"_id":"public/fontawesome/all.min.css","hash":"1aca70954817e603412964fdbfb231f03137af7c","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop08.png","hash":"cd253aa9ea50a49f7fc8da77253b2cb026c01d37","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop06.png","hash":"347ee80e4dc7f343e58b15fedea956e360c1f68d","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop07.png","hash":"250431ab613bced9bc1eacfec8c9a704d5f1ea72","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop09.png","hash":"ae8162122e5fb292873fcc69c3c16fbb52f95b1e","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop12.png","hash":"540147c664a2eb5dfbaf33da40cfd17426b95f65","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop11.png","hash":"bdfa84341a752062610fb3781a6f0a3d108ef7c6","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop10.png","hash":"84bdb04de43b3bbc1b4d1bdb3c5ecb22581375cf","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop13.png","hash":"ef2d72c568f8af879afbc3f3ee56e911bc1ca6a4","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop14.png","hash":"f2b0ee81d2a1a8ae5fc3f64fa68cc7986e425583","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop15.png","hash":"0d9d787008e6b5310d4b99c0ecfb784796d1cc2e","modified":1676625950298},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop17.jpg","hash":"f5d3a3fe0a890abc041f2a9f567935b77f344a68","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1676625950298},{"_id":"public/2021/02/25/someInterestingQuestions01/q1.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1676625950298},{"_id":"public/2021/02/25/someInterestingQuestions01/q2.png","hash":"ab246fa62b3c3fdf023fb533f7427705e8d2d505","modified":1676625950298},{"_id":"public/2021/02/25/someInterestingQuestions01/q3.png","hash":"84b813171691c1aee44f99587f2f2ab396b1b072","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-1.png","hash":"bb5f44da3cf6b932e2ac62fab6d46d106d6ed640","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-11.png","hash":"ea21eca2b7ad3cdba997cf6c1794476b4499ba78","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-14.png","hash":"56f15fbb8bd9d33872a72040afb3c06594e72bf4","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-3.png","hash":"b15ed7c05f54345ed7f60e9c601445a8cf84f64d","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-4.png","hash":"8a88ec1634043270e224c53bcd105514a0ed14df","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-6.png","hash":"1146414d813743c20228f0c2517be2a412f896eb","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-5.png","hash":"077b04a0d1bd5f4f9bb384db7ad4924685182348","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-7.png","hash":"d5276f1c2a20f569dcd3f63e1b6360ab0fd8236c","modified":1676625950298},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"132096157a1bd06ee90d0e099b30858e55f44a2f","modified":1676625950298},{"_id":"public/css/common/basic.css","hash":"c0a711be8982985ebb9708c1d983a108139d8a65","modified":1676625950298},{"_id":"public/css/common/redefine-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676625950298},{"_id":"public/css/common/markdown.css","hash":"aceff6f3efb7d9b0d303cd7b6476296bcbf2ea0b","modified":1677495422852},{"_id":"public/css/common/animated.css","hash":"5eb3f4369948955ea0a4543957af6086b2eed7b8","modified":1676625950298},{"_id":"public/css/layout/article-content.css","hash":"53eecad0ad9a254fe98fcae0c5059594e59bb291","modified":1677495422852},{"_id":"public/css/common/variables.css","hash":"c9d161293fc460bf0a9d28315862ecff94ab6ddb","modified":1676625950298},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676625950298},{"_id":"public/css/layout/category-content.css","hash":"121e1d78c3b457e1917b8835c029c1b493bf3ab7","modified":1677495422852},{"_id":"public/css/layout/category-list.css","hash":"672859a61a4e93c0514772112fb557395306e940","modified":1676625950298},{"_id":"public/css/layout/home-content.css","hash":"9127f9c05ac3fcf2e591c88314f65e90e87022da","modified":1677495422852},{"_id":"public/css/layout/tag-content.css","hash":"df6791721a519138bcf17822c56e8ac0dbc416de","modified":1677495422852},{"_id":"public/css/layout/page.css","hash":"6e856a53545570328b935c6729b4fd2256121ed0","modified":1677495422852},{"_id":"public/js/layouts/lazyload.js","hash":"298c51d15c0286acbebe420369daf87edf8aada7","modified":1676625950298},{"_id":"public/js/layouts/toc.js","hash":"c8701261369f701de71bd906407ffb99c3ef6a3d","modified":1677495422852},{"_id":"public/js/layouts/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1676625950298},{"_id":"public/js/layouts/menu-shrink.js","hash":"de907057c0d162664e92880aaf457002c51dd5b6","modified":1676625950298},{"_id":"public/js/plugins/tabs.js","hash":"01d151fc85f6c5744132112eb81f072cbb688d44","modified":1676625950298},{"_id":"public/js/plugins/mermaid.js","hash":"84b8147c7ff1f949f0b7215060376751590111d6","modified":1676625950298},{"_id":"public/js/tools/code-block.js","hash":"0c80da6fcf17d0785ae6f68be50a9131e46e1121","modified":1677495422852},{"_id":"public/js/tools/dark-light-toggle.js","hash":"1c12e83fd94d51b4476c8f480165312424d62f4a","modified":1676625950298},{"_id":"public/js/tools/local-search.js","hash":"bc9e888ee05c4fb0e8fd1962423a04f63c1e393e","modified":1676625950298},{"_id":"public/js/tools/runtime.js","hash":"cfc1a9b582b281e9dd1688a55cfbc5e89d3bd968","modified":1676625950298},{"_id":"public/js/tools/toc-toggle.js","hash":"eeab6a799bf23a2d4c58921dcf8b15203e1d3bfd","modified":1676625950298},{"_id":"public/js/tools/go-top-bottom.js","hash":"f5f6f6ba96e288a5fd1427b7f3761139623e8fcd","modified":1676625950298},{"_id":"public/css/common/codeblock/code-theme.css","hash":"5dc5a06445bcd234f68e3489e3f0bfcb6d5f4ee8","modified":1676625950298},{"_id":"public/css/common/codeblock/code-block.css","hash":"c578ad25d9876c875407d6a46170e0c0d5c3884d","modified":1677495422852},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1676625950298},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1676625950298},{"_id":"public/css/common/codeblock/highlight.css","hash":"989be09e71e4bbe15c5c36e74ad11c1ba1c9de3a","modified":1677495422852},{"_id":"public/2022/06/28/ReprintJSEventLoop/js-eventloop16.png","hash":"a82d6eae47b8187e8bad6e42d33c1e43fb399cac","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-10.png","hash":"ba6e970962ef439ade2d69a57c23f460702738ac","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-12.png","hash":"572a236f947710c79575e3e3cdd5617d32df3bfa","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-13.png","hash":"c909a1adf9e4363473e8b311635c48436b866e8b","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-2.png","hash":"7edb359a25e8e41d6fa1cad82cd775037139d9c3","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-9.png","hash":"406ba4a71c8c0762c2d53ce34df7019d90427845","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-8.png","hash":"4df0982ea7d09c073e403850eb074166eafa127c","modified":1676625950298},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"3539eea45ea45122110ca826e4cf461a9fc24bfd","modified":1676625950298},{"_id":"public/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s0.png","hash":"e362937b7163f1d04576aeb0e11d8012b4a26e4b","modified":1676625950298},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-15.png","hash":"c03cc2fa65bb8bed84a677e1ddfb24a53d927b46","modified":1676625950298},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"63bee62a49b1e129dd410a7804c36f600e45e9ef","modified":1676625950298},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"e62b834496e8808e09d69b157dd8d30767ab281d","modified":1676625950298},{"_id":"public/webfonts/fa-duotone-900.woff2","hash":"582f653eaef29d0cd2e05e104f2cb5776cb8ff43","modified":1676625950298},{"_id":"public/webfonts/fa-light-300.woff2","hash":"43e3f3b70a4a803054641c8d946b46978dfcbc23","modified":1676625950298},{"_id":"public/webfonts/fa-thin-100.woff2","hash":"90725403a3ee84c1703acbdc0e913147345e46fb","modified":1676625950298},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"26722d8063ee4161197b007488dbfb0bd45d543d","modified":1676625950298},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"44a016037ea5a3573ab827be35355262850678b4","modified":1676625950298},{"_id":"public/webfonts/fa-light-300.ttf","hash":"fe73f4c9149947d93fde22f82e13c4186b341b43","modified":1676625950298},{"_id":"public/webfonts/fa-duotone-900.ttf","hash":"6403f57a485e73326e731359cc246a7ecacf96db","modified":1676625950298},{"_id":"public/webfonts/fa-thin-100.ttf","hash":"e237771f52ad4d3a041c6b9f51ca66b0811655c9","modified":1676625950298},{"_id":"public/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":1676625950298},{"_id":"source/_posts/MethodologyFront-endJSModularity .md","hash":"c66a7b3697a5c8a8712980a273d1040e18d3e039","modified":1676982486848},{"_id":"source/_posts/someInterestingQuestions04.md","hash":"c94bb0d1fb74b2b81bd64c7ee6fad8a04bc60693","modified":1677304848964},{"_id":"source/_posts/someInterestingQuestions03.md","hash":"f8654ef6b8e8f02637452bd065589abde4475387","modified":1676982517346},{"_id":"source/_posts/someInterestingQuestions06.md","hash":"f149f5213248225800bc0dcebb9347ed39f8eaff","modified":1676983319935},{"_id":"source/_posts/vueSourceCodeStudy03.md","hash":"b664d021783fda8406a6fcae6e047bc78a48a1b9","modified":1677577670134},{"_id":"source/_posts/someInterestingQuestions05.md","hash":"a0b7008c392fcc405f695df4ad6305147ccb8ff8","modified":1676982522566},{"_id":"public/2023/02/21/MethodologyJSExcutionProcess/index.html","hash":"950337b1c5e5be77a9c368faeec9964a4598a74c","modified":1677601654648},{"_id":"public/2023/02/11/MethodologyRefactoring/index.html","hash":"c49535271fb8f2e127ca88b0d47376e210528a88","modified":1677601654648},{"_id":"public/2022/06/03/vueSourceCodeStudy03/index.html","hash":"e221861cc552a6fe1db779362033d47a1831f5ad","modified":1677601654648},{"_id":"public/2022/03/09/MethodologyFront-endJSModularity /index.html","hash":"b940ceef9a488cce9e6bb1fdbd3b6b8c8b471cd5","modified":1677374927990},{"_id":"public/2021/03/27/someInterestingQuestions06/index.html","hash":"c16a737e096d6871b4dd2ecd102e4fafac6c87d1","modified":1677601654648},{"_id":"public/2022/03/20/MethodologyFront-endHistory/index.html","hash":"a02b6042be54e3d5a2ad9969724be7a758c0d784","modified":1677374927990},{"_id":"public/2021/03/20/someInterestingQuestions05/index.html","hash":"b5e3c04e9e99e2b72266eee65ce01c0c76060e8f","modified":1677601654648},{"_id":"public/2021/03/14/someInterestingQuestions04/index.html","hash":"71d68ff0b1d3bd588442909a7a50361365c6a4d6","modified":1677601654648},{"_id":"public/2021/02/23/someInterestingQuestions01/index.html","hash":"e6f54672367a8fbb6b291a5cac607e73496abaaa","modified":1677601654648},{"_id":"public/2021/03/06/someInterestingQuestions03/index.html","hash":"3a8e440bfcf33ee449ea0c2abc7812414bebe37e","modified":1677601654648},{"_id":"public/2021/02/25/someInterestingQuestions02/index.html","hash":"bcab29de1a3307b26a1d0030767871941b2767d2","modified":1677601654648},{"_id":"public/archives/2021/03/index.html","hash":"178d44eec4a476ec8185467dcb9f4decfcb4aeef","modified":1677601654648},{"_id":"public/tags/JS/page/2/index.html","hash":"398688317b627d77296b76be26e92651a6d7db9e","modified":1677601654648},{"_id":"public/2021/02/23/someInterestingQuestions01/q1.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1676981190959},{"_id":"public/2021/02/23/someInterestingQuestions01/q2.png","hash":"ab246fa62b3c3fdf023fb533f7427705e8d2d505","modified":1676981190959},{"_id":"public/2021/02/23/someInterestingQuestions01/q3.png","hash":"84b813171691c1aee44f99587f2f2ab396b1b072","modified":1676981190959},{"_id":"source/_posts/MethodologyFrontendEngineering.md","hash":"72a9a921b66cfae21292cb51f5070bbbd9637762","modified":1677495410071},{"_id":"source/_posts/MethodologyFrontendHistory.md","hash":"deeaf750e947fdb3be89b9e51cffcf012b9fa124","modified":1676982491146},{"_id":"source/_posts/MethodologyFrontendEngineering/s2.png","hash":"41284a302db60fe0f2865e003d731b34e5c3f7c9","modified":1677493276117},{"_id":"source/_posts/MethodologyFrontendEngineering/s1.png","hash":"f614910da7c56417905e7aa5abb54c6f2255500e","modified":1677490775841},{"_id":"source/_posts/MethodologyFrontendEngineering/s3.png","hash":"b9d84d6ae13d3071402cad6a0e383ff57d5795b6","modified":1677493335969},{"_id":"source/_posts/MethodologyFrontendEngineering/s4.png","hash":"97a7c99e4af7153f2d8a2e03a3244575c4d21e35","modified":1677493345055},{"_id":"source/_posts/MethodologyFrontendEngineering/s5.png","hash":"a9624bdf7f9dc3a3e82ac870c32b6a671f8bacad","modified":1677493353350},{"_id":"source/_posts/MethodologyFrontendJSModularity .md","hash":"c66a7b3697a5c8a8712980a273d1040e18d3e039","modified":1676982486848},{"_id":"source/_posts/MethodologyFrontendEngineering/s4-1.png","hash":"d12c26eac9bc105c2997689396daff080453d28f","modified":1677475174793},{"_id":"source/_posts/MethodologyFrontendEngineering/s0.png","hash":"111c8e192ddc0d88aa08e287a69390262ea56301","modified":1677490637274},{"_id":"public/2022/07/28/MethodologyFrontendEngineering/index.html","hash":"1ccfc2aa8d8389a00f4707966693a25ee981297f","modified":1677601654648},{"_id":"public/2022/03/20/MethodologyFrontendHistory/index.html","hash":"dd904f207c7b62018924b42b75b2f4c5dcff6ad2","modified":1677601654648},{"_id":"public/2022/03/09/MethodologyFrontendJSModularity /index.html","hash":"928e974ec17419d34295518e31df53e2460ab707","modified":1677601654648},{"_id":"public/archives/2022/07/index.html","hash":"0bd5b3cabe7a0c0fe4d80c9a84481dee48cb2053","modified":1677601654648},{"_id":"public/2022/07/28/MethodologyFrontendEngineering/s1.png","hash":"f614910da7c56417905e7aa5abb54c6f2255500e","modified":1677495422852},{"_id":"public/2022/07/28/MethodologyFrontendEngineering/s2.png","hash":"41284a302db60fe0f2865e003d731b34e5c3f7c9","modified":1677495422852},{"_id":"public/2022/07/28/MethodologyFrontendEngineering/s3.png","hash":"b9d84d6ae13d3071402cad6a0e383ff57d5795b6","modified":1677495422852},{"_id":"public/2022/07/28/MethodologyFrontendEngineering/s4.png","hash":"97a7c99e4af7153f2d8a2e03a3244575c4d21e35","modified":1677495422852},{"_id":"public/2022/07/28/MethodologyFrontendEngineering/s5.png","hash":"a9624bdf7f9dc3a3e82ac870c32b6a671f8bacad","modified":1677495422852},{"_id":"public/2022/07/28/MethodologyFrontendEngineering/s4-1.png","hash":"d12c26eac9bc105c2997689396daff080453d28f","modified":1677495422852},{"_id":"public/2022/07/28/MethodologyFrontendEngineering/s0.png","hash":"111c8e192ddc0d88aa08e287a69390262ea56301","modified":1677495422852},{"_id":"source/_posts/Algorithm.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677577257805},{"_id":"source/about/cv.html","hash":"6abe7839b40e9cf1ca7e0e632b68408dd2dbec3e","modified":1677601408178},{"_id":"source/_posts/APIMutationObserver.md","hash":"60d6e992057401dcf73f845849131fac92ffac80","modified":1677582055675},{"_id":"source/_posts/PracticeCallApply.md","hash":"821e31882e79956e355f0706d588a2d795d56ea8","modified":1677581036313},{"_id":"source/_posts/PracticePromise.md","hash":"f66c5cc88ca7c33bb9bbcb07f6c71c8d1eec9ab8","modified":1677581039125},{"_id":"source/_posts/PracticePromise/s1.png","hash":"c9aa0692e25558749268b2c0a5aa1e5400a48377","modified":1677578027944},{"_id":"source/about/index.md","hash":"e5a89f525323bd44df610b977deb43e93ff5873f","modified":1677601076233},{"_id":"public/about/cv.html","hash":"db3825eaf0ad3fab561295b4ecd6ad48bd6ea81d","modified":1677601654648},{"_id":"public/about/index.html","hash":"8a0dcb7b36cab1e4be292311d7adb669152535a2","modified":1677601654648},{"_id":"public/2023/02/28/Algorithm/index.html","hash":"ecef78392a26710a228d473d831e52c0ec935a23","modified":1677601654648},{"_id":"public/2023/01/11/APIMutationObserver/index.html","hash":"0c6d67c29906de6e86901815bf007bcfb517b554","modified":1677601654648},{"_id":"public/2022/09/08/PracticePromise/index.html","hash":"8ed34f4a62509784cdfab148fefe8f79d64d646e","modified":1677601654648},{"_id":"public/2022/08/15/PracticeCallApply/index.html","hash":"78cf1cfb7c4ea696c491fa91d180527acb4472a2","modified":1677601654648},{"_id":"public/archives/page/3/index.html","hash":"dd1d44eb61548508b5065b590c07dcb9da952347","modified":1677601654648},{"_id":"public/archives/2022/page/2/index.html","hash":"e229dc6f2b1587dcfebe47e4d87e29620a229c85","modified":1677601654648},{"_id":"public/archives/2022/08/index.html","hash":"dffe932330134ec59d8749ac567422a300fe40c3","modified":1677601654648},{"_id":"public/archives/2022/09/index.html","hash":"de101e528b940509a92ac8ad9f843ac70fbedaca","modified":1677601654648},{"_id":"public/archives/2023/01/index.html","hash":"8ac8cb86441d48c929ef7ab186ea282e188a8b11","modified":1677601654648},{"_id":"public/categories/API/index.html","hash":"fc616d8e6d0cbbd56444a81093d41d2fdc3cf630","modified":1677601654648},{"_id":"public/categories/实践/index.html","hash":"5dc80b44443c97e4252f5532e7b8362b1d038b89","modified":1677601654648},{"_id":"public/page/3/index.html","hash":"1df84d86eed79f40a033f70cfb95d36f0842f346","modified":1677601654648},{"_id":"public/2022/09/08/PracticePromise/s1.png","hash":"c9aa0692e25558749268b2c0a5aa1e5400a48377","modified":1677601654648}],"Category":[{"name":"方法论","_id":"cle8bsvfq0004j0h8e6ubc7w4"},{"name":"转载 JS","_id":"cle8bsvfz000oj0h8g3l87jaz"},{"name":"一些有趣的问题","_id":"cle8bsvg1000wj0h82gs6haec"},{"name":"转载","_id":"cle8bsvg20011j0h84p9yhhzv"},{"name":"源码","_id":"cle8bsvg30019j0h81s9v03tz"},{"name":"JS","parent":"cle8bsvg20011j0h84p9yhhzv","_id":"clee7twsy0001b8h8el8c3jxj"},{"name":"API","_id":"cleogj0qq00036ch81f53ch4h"},{"name":"实践","_id":"cleogj0qv00086ch8hs9417ho"}],"Data":[],"Page":[{"title":"categories","date":"2023-01-31T19:23:07.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-02-01 03:23:07\n---\n","updated":"2023-01-31T19:23:07.768Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cle8bsvfj0000j0h87ld9dd69","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-01-31T18:28:27.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-02-01 02:28:27\n---\n","updated":"2023-01-31T18:28:27.535Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cle8bsvfo0002j0h8gp6w32q1","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>简历</title>\n</head>\n<body>\n  <button>aaa</button>\n</body>\n</html>","source":"about/cv.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>简历</title>\n</head>\n<body>\n  <button>aaa</button>\n</body>\n</html>","date":"2023-02-28T16:23:28.178Z","updated":"2023-02-28T16:23:28.178Z","path":"about/cv.html","_id":"cleogj0qj00006ch8gudg89al","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>简历</title>\n</head>\n<body>\n  <button>aaa</button>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>简历</title>\n</head>\n<body>\n  <button>aaa</button>\n</body>\n</html>"},{"_content":"# ABOUT ME","source":"about/index.md","raw":"# ABOUT ME","date":"2023-02-28T16:20:20.727Z","updated":"2023-02-28T16:17:56.233Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cleogj0qn00016ch80d1m8yk5","content":"<h1 id=\"ABOUT-ME\"><a href=\"#ABOUT-ME\" class=\"headerlink\" title=\"ABOUT ME\"></a>ABOUT ME</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ABOUT-ME\"><a href=\"#ABOUT-ME\" class=\"headerlink\" title=\"ABOUT ME\"></a>ABOUT ME</h1>"}],"Post":[{"title":"【方法论】代码重构的一点心得","date":"2023-02-10T18:30:57.000Z","_content":"# 重构（Refactoring）\n\n## 前言\n\n最近一直在做前端重构的工作，多少有些感想，特此记录。\n\n首先，项目的历史太悠久了，AngularJS 的项目，\n\n## 一、什么是重构？为什么要重构？重构要达成什么目标？\n\n**什么是重构**\n\n在`不改变代码外在行为`的前提下，对代码进行修改，以`改进程序的内部结构`。\n\n**为什么要重构**\n\n在软件工程中，开发迭代的过程实际上是一个熵增的过程，软件系统会随着生命周期的进行变得越来越臃肿、混乱、冗余，从而增加维护与进一步迭代的成本。而重构可以`偿还技术债务、改进软件结构、减小维护和迭代的成本、增加产品可信`。\n\n**重构要达成什么目标？**\n\n1. 系统结构重新梳理：旧系统在设计上可能有许多疏漏，由于经验的欠缺或者考虑不周到，这是难以避免的。新系统应该见贤思齐、查漏补缺，例如重新设计基类、文件结构和继承关系，争取让系统更加完善。\n2. 公共资源重新梳理：\n3. 业务需求重新梳理：\n\n## 二、重构有哪些分类？什么时候重构？重构有哪些原则？\n**重构有哪些分类？**\n\n- 小粒度重构（函数级、小模块）\n- 大粒度重构（架构级、大模块）\n\n**什么时候重构？**\n\n- 新增需求时（小粒度）\n- 修改 BUG 时（小粒度）\n- 复审代码时（大粒度）\n- 代码逻辑混乱、依赖混杂（大粒度）\n\n**重构有哪些原则？**\n\n- 先评审，再重构，不要反复推翻重来\n- 确保模块的功能完整，否则不重构该模块\n- 新增需求时，不要改动既有代码（小粒度）\n- 重构既有代码时，不要新增功能（小粒度）\n\n## 三、重构工作流程\n1. 前期准备，搭架子\n   - 构建对应技术栈的文件结构、代码关系\n   - 整理公共资源、公共能力\n   - 整理业务需求，确保没有遗漏的需求\n2. 前期准备，分需求、培训（主要涉及文件结构和公共资源）\n3. 开始重构 \n \n","source":"_posts/MethodologyRefactoring.md","raw":"---\ntitle: 【方法论】代码重构的一点心得\ndate: 2023-02-11 02:30:57\ntags: [JS]\ncategories: [方法论]\n---\n# 重构（Refactoring）\n\n## 前言\n\n最近一直在做前端重构的工作，多少有些感想，特此记录。\n\n首先，项目的历史太悠久了，AngularJS 的项目，\n\n## 一、什么是重构？为什么要重构？重构要达成什么目标？\n\n**什么是重构**\n\n在`不改变代码外在行为`的前提下，对代码进行修改，以`改进程序的内部结构`。\n\n**为什么要重构**\n\n在软件工程中，开发迭代的过程实际上是一个熵增的过程，软件系统会随着生命周期的进行变得越来越臃肿、混乱、冗余，从而增加维护与进一步迭代的成本。而重构可以`偿还技术债务、改进软件结构、减小维护和迭代的成本、增加产品可信`。\n\n**重构要达成什么目标？**\n\n1. 系统结构重新梳理：旧系统在设计上可能有许多疏漏，由于经验的欠缺或者考虑不周到，这是难以避免的。新系统应该见贤思齐、查漏补缺，例如重新设计基类、文件结构和继承关系，争取让系统更加完善。\n2. 公共资源重新梳理：\n3. 业务需求重新梳理：\n\n## 二、重构有哪些分类？什么时候重构？重构有哪些原则？\n**重构有哪些分类？**\n\n- 小粒度重构（函数级、小模块）\n- 大粒度重构（架构级、大模块）\n\n**什么时候重构？**\n\n- 新增需求时（小粒度）\n- 修改 BUG 时（小粒度）\n- 复审代码时（大粒度）\n- 代码逻辑混乱、依赖混杂（大粒度）\n\n**重构有哪些原则？**\n\n- 先评审，再重构，不要反复推翻重来\n- 确保模块的功能完整，否则不重构该模块\n- 新增需求时，不要改动既有代码（小粒度）\n- 重构既有代码时，不要新增功能（小粒度）\n\n## 三、重构工作流程\n1. 前期准备，搭架子\n   - 构建对应技术栈的文件结构、代码关系\n   - 整理公共资源、公共能力\n   - 整理业务需求，确保没有遗漏的需求\n2. 前期准备，分需求、培训（主要涉及文件结构和公共资源）\n3. 开始重构 \n \n","slug":"MethodologyRefactoring","published":1,"updated":"2023-02-21T12:28:19.797Z","_id":"cle8bsvfs0006j0h8dddp4309","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"重构（Refactoring）\"><a href=\"#重构（Refactoring）\" class=\"headerlink\" title=\"重构（Refactoring）\"></a>重构（Refactoring）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近一直在做前端重构的工作，多少有些感想，特此记录。</p>\n<p>首先，项目的历史太悠久了，AngularJS 的项目，</p>\n<h2 id=\"一、什么是重构？为什么要重构？重构要达成什么目标？\"><a href=\"#一、什么是重构？为什么要重构？重构要达成什么目标？\" class=\"headerlink\" title=\"一、什么是重构？为什么要重构？重构要达成什么目标？\"></a>一、什么是重构？为什么要重构？重构要达成什么目标？</h2><p><strong>什么是重构</strong></p>\n<p>在<code>不改变代码外在行为</code>的前提下，对代码进行修改，以<code>改进程序的内部结构</code>。</p>\n<p><strong>为什么要重构</strong></p>\n<p>在软件工程中，开发迭代的过程实际上是一个熵增的过程，软件系统会随着生命周期的进行变得越来越臃肿、混乱、冗余，从而增加维护与进一步迭代的成本。而重构可以<code>偿还技术债务、改进软件结构、减小维护和迭代的成本、增加产品可信</code>。</p>\n<p><strong>重构要达成什么目标？</strong></p>\n<ol>\n<li>系统结构重新梳理：旧系统在设计上可能有许多疏漏，由于经验的欠缺或者考虑不周到，这是难以避免的。新系统应该见贤思齐、查漏补缺，例如重新设计基类、文件结构和继承关系，争取让系统更加完善。</li>\n<li>公共资源重新梳理：</li>\n<li>业务需求重新梳理：</li>\n</ol>\n<h2 id=\"二、重构有哪些分类？什么时候重构？重构有哪些原则？\"><a href=\"#二、重构有哪些分类？什么时候重构？重构有哪些原则？\" class=\"headerlink\" title=\"二、重构有哪些分类？什么时候重构？重构有哪些原则？\"></a>二、重构有哪些分类？什么时候重构？重构有哪些原则？</h2><p><strong>重构有哪些分类？</strong></p>\n<ul>\n<li>小粒度重构（函数级、小模块）</li>\n<li>大粒度重构（架构级、大模块）</li>\n</ul>\n<p><strong>什么时候重构？</strong></p>\n<ul>\n<li>新增需求时（小粒度）</li>\n<li>修改 BUG 时（小粒度）</li>\n<li>复审代码时（大粒度）</li>\n<li>代码逻辑混乱、依赖混杂（大粒度）</li>\n</ul>\n<p><strong>重构有哪些原则？</strong></p>\n<ul>\n<li>先评审，再重构，不要反复推翻重来</li>\n<li>确保模块的功能完整，否则不重构该模块</li>\n<li>新增需求时，不要改动既有代码（小粒度）</li>\n<li>重构既有代码时，不要新增功能（小粒度）</li>\n</ul>\n<h2 id=\"三、重构工作流程\"><a href=\"#三、重构工作流程\" class=\"headerlink\" title=\"三、重构工作流程\"></a>三、重构工作流程</h2><ol>\n<li>前期准备，搭架子<ul>\n<li>构建对应技术栈的文件结构、代码关系</li>\n<li>整理公共资源、公共能力</li>\n<li>整理业务需求，确保没有遗漏的需求</li>\n</ul>\n</li>\n<li>前期准备，分需求、培训（主要涉及文件结构和公共资源）</li>\n<li>开始重构</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"重构（Refactoring）\"><a href=\"#重构（Refactoring）\" class=\"headerlink\" title=\"重构（Refactoring）\"></a>重构（Refactoring）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近一直在做前端重构的工作，多少有些感想，特此记录。</p>\n<p>首先，项目的历史太悠久了，AngularJS 的项目，</p>\n<h2 id=\"一、什么是重构？为什么要重构？重构要达成什么目标？\"><a href=\"#一、什么是重构？为什么要重构？重构要达成什么目标？\" class=\"headerlink\" title=\"一、什么是重构？为什么要重构？重构要达成什么目标？\"></a>一、什么是重构？为什么要重构？重构要达成什么目标？</h2><p><strong>什么是重构</strong></p>\n<p>在<code>不改变代码外在行为</code>的前提下，对代码进行修改，以<code>改进程序的内部结构</code>。</p>\n<p><strong>为什么要重构</strong></p>\n<p>在软件工程中，开发迭代的过程实际上是一个熵增的过程，软件系统会随着生命周期的进行变得越来越臃肿、混乱、冗余，从而增加维护与进一步迭代的成本。而重构可以<code>偿还技术债务、改进软件结构、减小维护和迭代的成本、增加产品可信</code>。</p>\n<p><strong>重构要达成什么目标？</strong></p>\n<ol>\n<li>系统结构重新梳理：旧系统在设计上可能有许多疏漏，由于经验的欠缺或者考虑不周到，这是难以避免的。新系统应该见贤思齐、查漏补缺，例如重新设计基类、文件结构和继承关系，争取让系统更加完善。</li>\n<li>公共资源重新梳理：</li>\n<li>业务需求重新梳理：</li>\n</ol>\n<h2 id=\"二、重构有哪些分类？什么时候重构？重构有哪些原则？\"><a href=\"#二、重构有哪些分类？什么时候重构？重构有哪些原则？\" class=\"headerlink\" title=\"二、重构有哪些分类？什么时候重构？重构有哪些原则？\"></a>二、重构有哪些分类？什么时候重构？重构有哪些原则？</h2><p><strong>重构有哪些分类？</strong></p>\n<ul>\n<li>小粒度重构（函数级、小模块）</li>\n<li>大粒度重构（架构级、大模块）</li>\n</ul>\n<p><strong>什么时候重构？</strong></p>\n<ul>\n<li>新增需求时（小粒度）</li>\n<li>修改 BUG 时（小粒度）</li>\n<li>复审代码时（大粒度）</li>\n<li>代码逻辑混乱、依赖混杂（大粒度）</li>\n</ul>\n<p><strong>重构有哪些原则？</strong></p>\n<ul>\n<li>先评审，再重构，不要反复推翻重来</li>\n<li>确保模块的功能完整，否则不重构该模块</li>\n<li>新增需求时，不要改动既有代码（小粒度）</li>\n<li>重构既有代码时，不要新增功能（小粒度）</li>\n</ul>\n<h2 id=\"三、重构工作流程\"><a href=\"#三、重构工作流程\" class=\"headerlink\" title=\"三、重构工作流程\"></a>三、重构工作流程</h2><ol>\n<li>前期准备，搭架子<ul>\n<li>构建对应技术栈的文件结构、代码关系</li>\n<li>整理公共资源、公共能力</li>\n<li>整理业务需求，确保没有遗漏的需求</li>\n</ul>\n</li>\n<li>前期准备，分需求、培训（主要涉及文件结构和公共资源）</li>\n<li>开始重构</li>\n</ol>\n"},{"title":"【方法论】前端状态管理的一些理解","date":"2022-06-15T07:30:57.000Z","_content":"\n# 前端状态管理的一些理解\n\n## 前言\n\n在工作中，我们常常会使用状态管理工具，例如：vue2 的 vuex，vue3 的 pinia，angular 的 NgRx，react 的 redux。有时难免会有一些疑问，为什么要使用状态管理工具，\n\n一个有趣的比方：假设有一个图书馆，当这个图书馆很小时，读者要找到一本书是非常简单的，就像一个小的前端项目，直接使用组件对数据进行存储更改是更加快捷方便的方式。但如果这个图书馆很大，人流量也很多，读者找一本书或者归还一本书就会很吃力。而状态管理器就像这个图书馆的电脑，当你要找一本书时，如果这是一本教科书，就会去教科书的栏目内检索，就像写的`action = 'schoolbook';`\n\n## 总结\n\n## 参考资料","source":"_posts/MethodologyStateManagement.md","raw":"---\ntitle: 【方法论】前端状态管理的一些理解\ndate: 2022-06-15 15:30:57\ntags: [JS]\ncategories: [方法论]\n---\n\n# 前端状态管理的一些理解\n\n## 前言\n\n在工作中，我们常常会使用状态管理工具，例如：vue2 的 vuex，vue3 的 pinia，angular 的 NgRx，react 的 redux。有时难免会有一些疑问，为什么要使用状态管理工具，\n\n一个有趣的比方：假设有一个图书馆，当这个图书馆很小时，读者要找到一本书是非常简单的，就像一个小的前端项目，直接使用组件对数据进行存储更改是更加快捷方便的方式。但如果这个图书馆很大，人流量也很多，读者找一本书或者归还一本书就会很吃力。而状态管理器就像这个图书馆的电脑，当你要找一本书时，如果这是一本教科书，就会去教科书的栏目内检索，就像写的`action = 'schoolbook';`\n\n## 总结\n\n## 参考资料","slug":"MethodologyStateManagement","published":1,"updated":"2023-02-21T12:28:22.106Z","_id":"cle8bsvft0007j0h839dpg5eq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前端状态管理的一些理解\"><a href=\"#前端状态管理的一些理解\" class=\"headerlink\" title=\"前端状态管理的一些理解\"></a>前端状态管理的一些理解</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在工作中，我们常常会使用状态管理工具，例如：vue2 的 vuex，vue3 的 pinia，angular 的 NgRx，react 的 redux。有时难免会有一些疑问，为什么要使用状态管理工具，</p>\n<p>一个有趣的比方：假设有一个图书馆，当这个图书馆很小时，读者要找到一本书是非常简单的，就像一个小的前端项目，直接使用组件对数据进行存储更改是更加快捷方便的方式。但如果这个图书馆很大，人流量也很多，读者找一本书或者归还一本书就会很吃力。而状态管理器就像这个图书馆的电脑，当你要找一本书时，如果这是一本教科书，就会去教科书的栏目内检索，就像写的<code>action = &#39;schoolbook&#39;;</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端状态管理的一些理解\"><a href=\"#前端状态管理的一些理解\" class=\"headerlink\" title=\"前端状态管理的一些理解\"></a>前端状态管理的一些理解</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在工作中，我们常常会使用状态管理工具，例如：vue2 的 vuex，vue3 的 pinia，angular 的 NgRx，react 的 redux。有时难免会有一些疑问，为什么要使用状态管理工具，</p>\n<p>一个有趣的比方：假设有一个图书馆，当这个图书馆很小时，读者要找到一本书是非常简单的，就像一个小的前端项目，直接使用组件对数据进行存储更改是更加快捷方便的方式。但如果这个图书馆很大，人流量也很多，读者找一本书或者归还一本书就会很吃力。而状态管理器就像这个图书馆的电脑，当你要找一本书时，如果这是一本教科书，就会去教科书的栏目内检索，就像写的<code>action = &#39;schoolbook&#39;;</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2>"},{"title":"【方法论】JS 执行流程","date":"2023-02-20T16:56:48.000Z","_content":"\n## `前言`\n\n本文主要解释 JS 引擎在遇见 script 代码块时，从编译到执行具体经历了些什么？\n\n一些关于作用域与闭包还有`this`关键字的问题可能被解答：\n\n- 为什么会产生变量提升？\n- 闭包的产生原理是什么？\n- 多个 script 代码块间是以什么顺序来执行的？\n- 为什么定义在不同代码块间的方法可以共通？通过本文都可以得到解答。\n\n## `基础概念`\n\n- JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。\n  `解释型`：JS 引擎在运行 JS 代码时，是利用解释器一边编译一边执行的。\n  \n  如此便避免不了一种情况：某些代码多次重复的运行，例如 for 循环，在编译型语言中，for 循环块中的代码将以机器码执行多次；而在解释型语言中，for 循环块中的代码将被解释多次并执行，如此便有了很大的耗损。\n  \n  `即时编译型`：于是 JS 引擎就加入了`JIT`（Just-in-time）进行编译优化，例如对重复语句和类型判断进行优化。\n\n- 引擎、编译器与作用域\n    引擎：从头到尾负责整个 javascript 程序的编译及执行过程。浏览器不同，其引擎也不同，比如 Chrome 采用的是 v8，Safari 采用的是 SquirrelFish Extreme。\n    \n    编译器：编译过程主要分为”词法分析”、“语法分析”及“代码生成“。\n    >\n    作用域（Scope）：根据名称查找变量的一套规则，用于管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。\n\n- 执行上下文（Excution Context EC）&& 执行上下文栈（Excution Context Stack ECS）\n    存在三种 EC：全局执行上下文  GlobalEC ，函数执行上下文  Function EC，Eval。\n    \n    ECS：引擎记录 EC 的容器，栈底是 GlobalEC ，只有在关闭页面时出栈；栈顶是当前正在执行的 EC ，函数执行完毕后出栈，并将执行权交给下一个 EC 。\n\n- 变量对象（Variable Object）&& 活动对象（Activation Object）\n    VO：EC 中用来存储变量声明（必须是 var 关键字声明而不是 let 与 const）与函数声明（必须是显式声明而不是表达式）的容器。由引擎实现，不能访问到。\n    \n    AO：可以理解为 VO 的实例化，函数调用时在 EC 中被激活，成员属性能被访问。\n\n- LHS（Left Hand Side） && RHS（Right Hand Side）\n    LHS：赋值操作的目标。例如：a=2; 是对 a 进行 LHS 查询。\n    \n    RHS：赋值操作的源头。例如：console.log(a); 是对 a 进行 RHS 查询。\n    >\n    非严格模式下，LHS 查询不到变量会在顶层作用域创建具有该名称的变量，RHS 查询不到变量会报 ReferenceError 的异常；严格模式下禁止自动创建全局变量，两种查询方式失败均报 ReferenceError 的异常。\n\n## `JS 代码执行流程`\n\n1. -->进入 script 标签\n2. -->【预编译】JS 引擎创建全局 EC，全局 EC 入栈\n3. -->【编译】JS 解释器开始对代码`逐行`进行分词、语法分析、代码生成\n4. -->有错则抛出，终止执行；无错继续向下逐行执行\n5. -->【预编译】调用函数前，创建函数 EC，EC 入栈\n6. -->【编译】\n7. -->有错则抛出，终止执行；无错继续向下执行\n8. -->函数执行完毕，EC 出栈\n9. -->继续以上步骤\n10. -->页面销毁，全局 EC 出栈\n11. -->结束\n\n`创建当前环境 EC 流程如下：`\n\n1、初始化作用域 [[Scope]]，（拷贝传入的父执行上下文的 Scope），数据结构应该是数组或者链表。\n \n例如：[[Scope]] : AO1（当前）-->VO（全局）\n\n2、创建活动对象，创建完成之后，将活动对象推入作用域链的最前端：\n\n例如：[[Scope]] : AO2（当前）-->AO1（父级）-->VO（全局）\n\n2.1、创建 arguments 对象，检查上下文，初始化参数名称和值并创建引用的复制。（函数中存在）\n\n2.2、创建形参，通过实参赋值。（函数中存在）\n\n2.3、扫描上下文的函数声明（而非函数表达式）：\n\n为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。函数声明比变量优先级要高，并且定义过程不会被变量覆盖，除非是赋值\n\n2.4、扫描上下文的变量声明：\n\n为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为 undefined，如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。\n\n3、求出上下文内部 this 的值。\n\n> 从以上流程中可以观察到`作用域、变量提升和 this`，接下来结合代码具体分析。\n\n## `代码分析`\n\n1、EC 创建流程与变量提升\n```javascript\nvar a = \"outer\";\n\nfunction foo(i) {\n    console.log(a+'--a--start');\n    console.log(b+'--b--start');\n    console.log(c+'--c--start');\n    var a = 'hello';\n    var b = function () {};\n\n    function c() {};\n    console.log(`------------`);\n    console.log(a+'--a--end');\n    console.log(b+'--b--end');\n    console.log(c+'--c--end');\n\n    console.log(this);\n}\n\nfoo(22);// 对形参 i 的 LHS 查询\n\n//结果：\nundefined--a--start// 变量 a 声明时提升赋值为 undefined\nundefined--b--start// 变量 b 声明时提升赋值为 undefined\nƒ c() {}--c--start// 函数 c 声明时提升指向 c 的引用\n------------\nhello--a--end// 此时赋值语句执行完毕，a 的值为 hello\nƒ() {}--b--end// 此时赋值语句执行完毕，b 指向 b 的引用\nƒ c() {}--c--end// 无变化\n\n// 分析\n// 代码载入前，创建全局 EC 的伪代码\nGlobalEC : {\n    [[Scope]] : [{VO}],\n    VO : {\n        foo : fnFoo,// 函数声明优先，指向函数 Foo 的引用\n        a :  undefined// 变量声明\n    },\n    this// 指向全局\n}\n// 调用函数 foo(22) 时，创建当前 EC 的伪代码\nCurrentEC : {\n    [[Scope]] : [{AO}, {VO}],\n    AO : {\n        // 顺序：arguments 对象 形参 函数声明 变量声明\n        arguments : {\n            0 : 22,\n            length : 1\n        },\n        i : 22,// 形参，接受实参赋值\n        c : fnC,//指向函数 c 的引用\n        a : undefined,\n        b : undefined\n    },\n    this// 指向函数的调用者，这里指向全局\n}\n```\n\n2、多个 script 块间的执行过程\n```html\n\n <script>\n     console.log('script1 start');\n\n     console.log('a',a);\n     var b=2;\n\n     console.log('script1 end');\n </script>\n\n <script>\n     console.log('script2 start');\n\n     var a=1;\n     console.log('b',b);\n\n     console.log('script2 end');\n </script>\n\n <!-- \n     script1 start\n     Uncaught ReferenceError: a is not defined\n     script2 start\n     b undefined\n     script2 end\n  -->\n\n<!--\n 1、从代码运行结果可以看出，JS 执行流在进入第一个 script 块时，首先会创建全局 EC ，将 b 的声明加入 AO 并推入作用域中（所以第二个 script 块中的代码才能访问到 b），全局 EC 压入 ECS。\n 2、逐行的进行分词、语法检查、代码生成，然后执行。\n     2.1、在 console.log('script1 start'); 这行代码中，不存在语法错误，执行，输出 start。\n     2.2、在 console.log('a',a); 这行代码中，对变量 a 进行 RHS 查询，在作用域链中找不到 a ，报 ReferenceError，script 块中断执行。\n 3、JS 执行流进入第二个 script 块，仍然在全局 EC（JS 引擎只会存在一个全局 EC），将 a 的声明加入 AO（与第一个代码块相同，每个 EC 绑定唯一的 VO|AO） 并推入作用域。\n 4、逐行的进行分词、语法检查、代码生成，然后执行。\n     4.1、在 console.log('b',b); 这行代码中，对变量 b 进行 RHS 查询，在作用域的 AO 中找到对应的值 undefined，输出 b undefined。\n \n 结束\n-->\n ```\n\n3、闭包的产生\n```javascript\n\n// 首先明确什么是闭包？可以使用如下定义：\n// 函数在定义的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域。\n\n// 例子\nfunction fn(){\n    var a = 'JavaScript';\n    function func(){\n        console.log(a);\n    }\n    return func;\n}\n\nvar func = fn();\nfunc(); // JavaScript\n\n// func 函数执行的位置和定义的位置是不相同的，func 是在函数 fn 中定义的，但执行却是在全局环境中，虽然是在全局函数中执行的，但函数仍然可以访问当定义时的词法作用域。\n\n// 当函数执行结束后其活动变量就会被销毁，但是在上面的例子中却不是这个样子。但函数 fn 执行结束之后，fn 对象的活动变量并没有被销毁，这是因为 fn 返回的函数 func 的作用域链还保持着 fn 的活动变量，因此 JavaScript 的垃圾回收机制不会回收 fn 活动变量。虽然返回的函数 func 是在全局环境下执行的，但是其作用域链的存储的活动（变量）对象的顺序分别是：func 的活动对象、fn 的活动对象、全局变量对象。因此在 func 函数执行时，会顺着作用域链查找标识符，也就能访问到 fn 所定义的词法作用域（即 fn 函数的活动变量）也就不足为奇了。\n```\n\n## `总结`\n\n问：多个 script 块间的执行顺序\n\n> 答：多个 script 代码块从上到下按序载入，语法分析阶段报错的话，结束本代码块的执行，执行流进入下一个代码块。多个代码块共享全局执行上下文，可以访问到其他代码块定义的变量和方法。\n\n问：为什么会产生变量提升与函数提升？\n> 答：在代码执行之前的预编译阶段，创建当前 EC 时，会在活动对象上创建一个与函数声明与变量声明对应的属性，然后将活动对象推入作用域链。在查询变量时，是通过作用域链进行 RHS 查询。所以会查询到作用域链上已经定义的函数与变量。\n\n问：闭包的产生\n> 答：简单来说，闭包中的函数所对应的作用域链上仍然保留了父级活动对象，所以可以对父级活动对象的属性进行查询。\n\n## `参考资料`\n\n- 《你不知道的 Javascript》（上卷），第一部分，作用域和闭包\n- [JS 引擎的执行过程](https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/)\n- [彻底明白作用域、执行上下文](https://segmentfault.com/a/1190000013915935)\n- [深入理解 JavaScript 的执行流程，执行上下文 EC、变量对象 VO、活动对象 AO、作用域 Scope](https://blog.csdn.net/yangxinxiang84/article/details/113051811?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.10297.16155372256670345&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control)\n- [浅谈 JS 的 VO|AO](https://blog.csdn.net/Ancecis/article/details/104382441)\n- [JS 运行机制之执行顺序](https://blog.csdn.net/chen_zw/article/details/18502937?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control)\n- [我所认识的作用域链与原型链](https://github.com/MrErHu/blog/issues/16)\n","source":"_posts/MethodologyJSExcutionProcess.md","raw":"---\ntitle: 【方法论】JS 执行流程\ndate: 2023-02-21 00:56:48\ntags: [JS, 前端工程化]\ncategories: [方法论]\n---\n\n## `前言`\n\n本文主要解释 JS 引擎在遇见 script 代码块时，从编译到执行具体经历了些什么？\n\n一些关于作用域与闭包还有`this`关键字的问题可能被解答：\n\n- 为什么会产生变量提升？\n- 闭包的产生原理是什么？\n- 多个 script 代码块间是以什么顺序来执行的？\n- 为什么定义在不同代码块间的方法可以共通？通过本文都可以得到解答。\n\n## `基础概念`\n\n- JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。\n  `解释型`：JS 引擎在运行 JS 代码时，是利用解释器一边编译一边执行的。\n  \n  如此便避免不了一种情况：某些代码多次重复的运行，例如 for 循环，在编译型语言中，for 循环块中的代码将以机器码执行多次；而在解释型语言中，for 循环块中的代码将被解释多次并执行，如此便有了很大的耗损。\n  \n  `即时编译型`：于是 JS 引擎就加入了`JIT`（Just-in-time）进行编译优化，例如对重复语句和类型判断进行优化。\n\n- 引擎、编译器与作用域\n    引擎：从头到尾负责整个 javascript 程序的编译及执行过程。浏览器不同，其引擎也不同，比如 Chrome 采用的是 v8，Safari 采用的是 SquirrelFish Extreme。\n    \n    编译器：编译过程主要分为”词法分析”、“语法分析”及“代码生成“。\n    >\n    作用域（Scope）：根据名称查找变量的一套规则，用于管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。\n\n- 执行上下文（Excution Context EC）&& 执行上下文栈（Excution Context Stack ECS）\n    存在三种 EC：全局执行上下文  GlobalEC ，函数执行上下文  Function EC，Eval。\n    \n    ECS：引擎记录 EC 的容器，栈底是 GlobalEC ，只有在关闭页面时出栈；栈顶是当前正在执行的 EC ，函数执行完毕后出栈，并将执行权交给下一个 EC 。\n\n- 变量对象（Variable Object）&& 活动对象（Activation Object）\n    VO：EC 中用来存储变量声明（必须是 var 关键字声明而不是 let 与 const）与函数声明（必须是显式声明而不是表达式）的容器。由引擎实现，不能访问到。\n    \n    AO：可以理解为 VO 的实例化，函数调用时在 EC 中被激活，成员属性能被访问。\n\n- LHS（Left Hand Side） && RHS（Right Hand Side）\n    LHS：赋值操作的目标。例如：a=2; 是对 a 进行 LHS 查询。\n    \n    RHS：赋值操作的源头。例如：console.log(a); 是对 a 进行 RHS 查询。\n    >\n    非严格模式下，LHS 查询不到变量会在顶层作用域创建具有该名称的变量，RHS 查询不到变量会报 ReferenceError 的异常；严格模式下禁止自动创建全局变量，两种查询方式失败均报 ReferenceError 的异常。\n\n## `JS 代码执行流程`\n\n1. -->进入 script 标签\n2. -->【预编译】JS 引擎创建全局 EC，全局 EC 入栈\n3. -->【编译】JS 解释器开始对代码`逐行`进行分词、语法分析、代码生成\n4. -->有错则抛出，终止执行；无错继续向下逐行执行\n5. -->【预编译】调用函数前，创建函数 EC，EC 入栈\n6. -->【编译】\n7. -->有错则抛出，终止执行；无错继续向下执行\n8. -->函数执行完毕，EC 出栈\n9. -->继续以上步骤\n10. -->页面销毁，全局 EC 出栈\n11. -->结束\n\n`创建当前环境 EC 流程如下：`\n\n1、初始化作用域 [[Scope]]，（拷贝传入的父执行上下文的 Scope），数据结构应该是数组或者链表。\n \n例如：[[Scope]] : AO1（当前）-->VO（全局）\n\n2、创建活动对象，创建完成之后，将活动对象推入作用域链的最前端：\n\n例如：[[Scope]] : AO2（当前）-->AO1（父级）-->VO（全局）\n\n2.1、创建 arguments 对象，检查上下文，初始化参数名称和值并创建引用的复制。（函数中存在）\n\n2.2、创建形参，通过实参赋值。（函数中存在）\n\n2.3、扫描上下文的函数声明（而非函数表达式）：\n\n为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。函数声明比变量优先级要高，并且定义过程不会被变量覆盖，除非是赋值\n\n2.4、扫描上下文的变量声明：\n\n为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为 undefined，如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。\n\n3、求出上下文内部 this 的值。\n\n> 从以上流程中可以观察到`作用域、变量提升和 this`，接下来结合代码具体分析。\n\n## `代码分析`\n\n1、EC 创建流程与变量提升\n```javascript\nvar a = \"outer\";\n\nfunction foo(i) {\n    console.log(a+'--a--start');\n    console.log(b+'--b--start');\n    console.log(c+'--c--start');\n    var a = 'hello';\n    var b = function () {};\n\n    function c() {};\n    console.log(`------------`);\n    console.log(a+'--a--end');\n    console.log(b+'--b--end');\n    console.log(c+'--c--end');\n\n    console.log(this);\n}\n\nfoo(22);// 对形参 i 的 LHS 查询\n\n//结果：\nundefined--a--start// 变量 a 声明时提升赋值为 undefined\nundefined--b--start// 变量 b 声明时提升赋值为 undefined\nƒ c() {}--c--start// 函数 c 声明时提升指向 c 的引用\n------------\nhello--a--end// 此时赋值语句执行完毕，a 的值为 hello\nƒ() {}--b--end// 此时赋值语句执行完毕，b 指向 b 的引用\nƒ c() {}--c--end// 无变化\n\n// 分析\n// 代码载入前，创建全局 EC 的伪代码\nGlobalEC : {\n    [[Scope]] : [{VO}],\n    VO : {\n        foo : fnFoo,// 函数声明优先，指向函数 Foo 的引用\n        a :  undefined// 变量声明\n    },\n    this// 指向全局\n}\n// 调用函数 foo(22) 时，创建当前 EC 的伪代码\nCurrentEC : {\n    [[Scope]] : [{AO}, {VO}],\n    AO : {\n        // 顺序：arguments 对象 形参 函数声明 变量声明\n        arguments : {\n            0 : 22,\n            length : 1\n        },\n        i : 22,// 形参，接受实参赋值\n        c : fnC,//指向函数 c 的引用\n        a : undefined,\n        b : undefined\n    },\n    this// 指向函数的调用者，这里指向全局\n}\n```\n\n2、多个 script 块间的执行过程\n```html\n\n <script>\n     console.log('script1 start');\n\n     console.log('a',a);\n     var b=2;\n\n     console.log('script1 end');\n </script>\n\n <script>\n     console.log('script2 start');\n\n     var a=1;\n     console.log('b',b);\n\n     console.log('script2 end');\n </script>\n\n <!-- \n     script1 start\n     Uncaught ReferenceError: a is not defined\n     script2 start\n     b undefined\n     script2 end\n  -->\n\n<!--\n 1、从代码运行结果可以看出，JS 执行流在进入第一个 script 块时，首先会创建全局 EC ，将 b 的声明加入 AO 并推入作用域中（所以第二个 script 块中的代码才能访问到 b），全局 EC 压入 ECS。\n 2、逐行的进行分词、语法检查、代码生成，然后执行。\n     2.1、在 console.log('script1 start'); 这行代码中，不存在语法错误，执行，输出 start。\n     2.2、在 console.log('a',a); 这行代码中，对变量 a 进行 RHS 查询，在作用域链中找不到 a ，报 ReferenceError，script 块中断执行。\n 3、JS 执行流进入第二个 script 块，仍然在全局 EC（JS 引擎只会存在一个全局 EC），将 a 的声明加入 AO（与第一个代码块相同，每个 EC 绑定唯一的 VO|AO） 并推入作用域。\n 4、逐行的进行分词、语法检查、代码生成，然后执行。\n     4.1、在 console.log('b',b); 这行代码中，对变量 b 进行 RHS 查询，在作用域的 AO 中找到对应的值 undefined，输出 b undefined。\n \n 结束\n-->\n ```\n\n3、闭包的产生\n```javascript\n\n// 首先明确什么是闭包？可以使用如下定义：\n// 函数在定义的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域。\n\n// 例子\nfunction fn(){\n    var a = 'JavaScript';\n    function func(){\n        console.log(a);\n    }\n    return func;\n}\n\nvar func = fn();\nfunc(); // JavaScript\n\n// func 函数执行的位置和定义的位置是不相同的，func 是在函数 fn 中定义的，但执行却是在全局环境中，虽然是在全局函数中执行的，但函数仍然可以访问当定义时的词法作用域。\n\n// 当函数执行结束后其活动变量就会被销毁，但是在上面的例子中却不是这个样子。但函数 fn 执行结束之后，fn 对象的活动变量并没有被销毁，这是因为 fn 返回的函数 func 的作用域链还保持着 fn 的活动变量，因此 JavaScript 的垃圾回收机制不会回收 fn 活动变量。虽然返回的函数 func 是在全局环境下执行的，但是其作用域链的存储的活动（变量）对象的顺序分别是：func 的活动对象、fn 的活动对象、全局变量对象。因此在 func 函数执行时，会顺着作用域链查找标识符，也就能访问到 fn 所定义的词法作用域（即 fn 函数的活动变量）也就不足为奇了。\n```\n\n## `总结`\n\n问：多个 script 块间的执行顺序\n\n> 答：多个 script 代码块从上到下按序载入，语法分析阶段报错的话，结束本代码块的执行，执行流进入下一个代码块。多个代码块共享全局执行上下文，可以访问到其他代码块定义的变量和方法。\n\n问：为什么会产生变量提升与函数提升？\n> 答：在代码执行之前的预编译阶段，创建当前 EC 时，会在活动对象上创建一个与函数声明与变量声明对应的属性，然后将活动对象推入作用域链。在查询变量时，是通过作用域链进行 RHS 查询。所以会查询到作用域链上已经定义的函数与变量。\n\n问：闭包的产生\n> 答：简单来说，闭包中的函数所对应的作用域链上仍然保留了父级活动对象，所以可以对父级活动对象的属性进行查询。\n\n## `参考资料`\n\n- 《你不知道的 Javascript》（上卷），第一部分，作用域和闭包\n- [JS 引擎的执行过程](https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/)\n- [彻底明白作用域、执行上下文](https://segmentfault.com/a/1190000013915935)\n- [深入理解 JavaScript 的执行流程，执行上下文 EC、变量对象 VO、活动对象 AO、作用域 Scope](https://blog.csdn.net/yangxinxiang84/article/details/113051811?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.10297.16155372256670345&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control)\n- [浅谈 JS 的 VO|AO](https://blog.csdn.net/Ancecis/article/details/104382441)\n- [JS 运行机制之执行顺序](https://blog.csdn.net/chen_zw/article/details/18502937?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control)\n- [我所认识的作用域链与原型链](https://github.com/MrErHu/blog/issues/16)\n","slug":"MethodologyJSExcutionProcess","published":1,"updated":"2023-02-20T09:05:15.982Z","_id":"cle8bsvft0008j0h811a6guh7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><code>前言</code></h2><p>本文主要解释 JS 引擎在遇见 script 代码块时，从编译到执行具体经历了些什么？</p>\n<p>一些关于作用域与闭包还有<code>this</code>关键字的问题可能被解答：</p>\n<ul>\n<li>为什么会产生变量提升？</li>\n<li>闭包的产生原理是什么？</li>\n<li>多个 script 代码块间是以什么顺序来执行的？</li>\n<li>为什么定义在不同代码块间的方法可以共通？通过本文都可以得到解答。</li>\n</ul>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a><code>基础概念</code></h2><ul>\n<li><p>JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。<br><code>解释型</code>：JS 引擎在运行 JS 代码时，是利用解释器一边编译一边执行的。</p>\n<p>如此便避免不了一种情况：某些代码多次重复的运行，例如 for 循环，在编译型语言中，for 循环块中的代码将以机器码执行多次；而在解释型语言中，for 循环块中的代码将被解释多次并执行，如此便有了很大的耗损。</p>\n<p><code>即时编译型</code>：于是 JS 引擎就加入了<code>JIT</code>（Just-in-time）进行编译优化，例如对重复语句和类型判断进行优化。</p>\n</li>\n<li><p>引擎、编译器与作用域<br>  引擎：从头到尾负责整个 javascript 程序的编译及执行过程。浏览器不同，其引擎也不同，比如 Chrome 采用的是 v8，Safari 采用的是 SquirrelFish Extreme。</p>\n<p>  编译器：编译过程主要分为”词法分析”、“语法分析”及“代码生成“。</p>\n<blockquote>\n</blockquote>\n<p>  作用域（Scope）：根据名称查找变量的一套规则，用于管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。</p>\n</li>\n<li><p>执行上下文（Excution Context EC）&amp;&amp; 执行上下文栈（Excution Context Stack ECS）<br>  存在三种 EC：全局执行上下文  GlobalEC ，函数执行上下文  Function EC，Eval。</p>\n<p>  ECS：引擎记录 EC 的容器，栈底是 GlobalEC ，只有在关闭页面时出栈；栈顶是当前正在执行的 EC ，函数执行完毕后出栈，并将执行权交给下一个 EC 。</p>\n</li>\n<li><p>变量对象（Variable Object）&amp;&amp; 活动对象（Activation Object）<br>  VO：EC 中用来存储变量声明（必须是 var 关键字声明而不是 let 与 const）与函数声明（必须是显式声明而不是表达式）的容器。由引擎实现，不能访问到。</p>\n<p>  AO：可以理解为 VO 的实例化，函数调用时在 EC 中被激活，成员属性能被访问。</p>\n</li>\n<li><p>LHS（Left Hand Side） &amp;&amp; RHS（Right Hand Side）<br>  LHS：赋值操作的目标。例如：a&#x3D;2; 是对 a 进行 LHS 查询。</p>\n<p>  RHS：赋值操作的源头。例如：console.log(a); 是对 a 进行 RHS 查询。</p>\n<blockquote>\n</blockquote>\n<p>  非严格模式下，LHS 查询不到变量会在顶层作用域创建具有该名称的变量，RHS 查询不到变量会报 ReferenceError 的异常；严格模式下禁止自动创建全局变量，两种查询方式失败均报 ReferenceError 的异常。</p>\n</li>\n</ul>\n<h2 id=\"JS-代码执行流程\"><a href=\"#JS-代码执行流程\" class=\"headerlink\" title=\"JS 代码执行流程\"></a><code>JS 代码执行流程</code></h2><ol>\n<li>–&gt;进入 script 标签</li>\n<li>–&gt;【预编译】JS 引擎创建全局 EC，全局 EC 入栈</li>\n<li>–&gt;【编译】JS 解释器开始对代码<code>逐行</code>进行分词、语法分析、代码生成</li>\n<li>–&gt;有错则抛出，终止执行；无错继续向下逐行执行</li>\n<li>–&gt;【预编译】调用函数前，创建函数 EC，EC 入栈</li>\n<li>–&gt;【编译】</li>\n<li>–&gt;有错则抛出，终止执行；无错继续向下执行</li>\n<li>–&gt;函数执行完毕，EC 出栈</li>\n<li>–&gt;继续以上步骤</li>\n<li>–&gt;页面销毁，全局 EC 出栈</li>\n<li>–&gt;结束</li>\n</ol>\n<p><code>创建当前环境 EC 流程如下：</code></p>\n<p>1、初始化作用域 [[Scope]]，（拷贝传入的父执行上下文的 Scope），数据结构应该是数组或者链表。</p>\n<p>例如：[[Scope]] : AO1（当前）–&gt;VO（全局）</p>\n<p>2、创建活动对象，创建完成之后，将活动对象推入作用域链的最前端：</p>\n<p>例如：[[Scope]] : AO2（当前）–&gt;AO1（父级）–&gt;VO（全局）</p>\n<p>2.1、创建 arguments 对象，检查上下文，初始化参数名称和值并创建引用的复制。（函数中存在）</p>\n<p>2.2、创建形参，通过实参赋值。（函数中存在）</p>\n<p>2.3、扫描上下文的函数声明（而非函数表达式）：</p>\n<p>为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。函数声明比变量优先级要高，并且定义过程不会被变量覆盖，除非是赋值</p>\n<p>2.4、扫描上下文的变量声明：</p>\n<p>为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为 undefined，如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。</p>\n<p>3、求出上下文内部 this 的值。</p>\n<blockquote>\n<p>从以上流程中可以观察到<code>作用域、变量提升和 this</code>，接下来结合代码具体分析。</p>\n</blockquote>\n<h2 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a><code>代码分析</code></h2><p>1、EC 创建流程与变量提升</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;outer&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a+<span class=\"string\">&#x27;--a--start&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b+<span class=\"string\">&#x27;--b--start&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c+<span class=\"string\">&#x27;--c--start&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`------------`</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a+<span class=\"string\">&#x27;--a--end&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b+<span class=\"string\">&#x27;--b--end&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c+<span class=\"string\">&#x27;--c--end&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">22</span>);<span class=\"comment\">// 对形参 i 的 LHS 查询</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span>--a--start<span class=\"comment\">// 变量 a 声明时提升赋值为 undefined</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span>--b--start<span class=\"comment\">// 变量 b 声明时提升赋值为 undefined</span></span><br><span class=\"line\">ƒ <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;--c--start<span class=\"comment\">// 函数 c 声明时提升指向 c 的引用</span></span><br><span class=\"line\">------------</span><br><span class=\"line\">hello--a--end<span class=\"comment\">// 此时赋值语句执行完毕，a 的值为 hello</span></span><br><span class=\"line\">ƒ() &#123;&#125;--b--end<span class=\"comment\">// 此时赋值语句执行完毕，b 指向 b 的引用</span></span><br><span class=\"line\">ƒ <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;--c--end<span class=\"comment\">// 无变化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分析</span></span><br><span class=\"line\"><span class=\"comment\">// 代码载入前，创建全局 EC 的伪代码</span></span><br><span class=\"line\"><span class=\"title class_\">GlobalEC</span> : &#123;</span><br><span class=\"line\">    [[<span class=\"title class_\">Scope</span>]] : [&#123;<span class=\"variable constant_\">VO</span>&#125;],</span><br><span class=\"line\">    <span class=\"variable constant_\">VO</span> : &#123;</span><br><span class=\"line\">        foo : fnFoo,<span class=\"comment\">// 函数声明优先，指向函数 Foo 的引用</span></span><br><span class=\"line\">        a :  <span class=\"literal\">undefined</span><span class=\"comment\">// 变量声明</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span><span class=\"comment\">// 指向全局</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用函数 foo(22) 时，创建当前 EC 的伪代码</span></span><br><span class=\"line\"><span class=\"title class_\">CurrentEC</span> : &#123;</span><br><span class=\"line\">    [[<span class=\"title class_\">Scope</span>]] : [&#123;<span class=\"variable constant_\">AO</span>&#125;, &#123;<span class=\"variable constant_\">VO</span>&#125;],</span><br><span class=\"line\">    <span class=\"variable constant_\">AO</span> : &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 顺序：arguments 对象 形参 函数声明 变量声明</span></span><br><span class=\"line\">        <span class=\"variable language_\">arguments</span> : &#123;</span><br><span class=\"line\">            <span class=\"number\">0</span> : <span class=\"number\">22</span>,</span><br><span class=\"line\">            length : <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        i : <span class=\"number\">22</span>,<span class=\"comment\">// 形参，接受实参赋值</span></span><br><span class=\"line\">        c : fnC,<span class=\"comment\">//指向函数 c 的引用</span></span><br><span class=\"line\">        a : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        b : <span class=\"literal\">undefined</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span><span class=\"comment\">// 指向函数的调用者，这里指向全局</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>2、多个 script 块间的执行过程</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script1 start&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a&#x27;</span>,a);</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">var</span> b=<span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script1 end&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script2 start&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b&#x27;</span>,b);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script2 end&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     script1 start</span></span><br><span class=\"line\"><span class=\"comment\">     Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\"><span class=\"comment\">     script2 start</span></span><br><span class=\"line\"><span class=\"comment\">     b undefined</span></span><br><span class=\"line\"><span class=\"comment\">     script2 end</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\"> 1、从代码运行结果可以看出，JS 执行流在进入第一个 script 块时，首先会创建全局 EC ，将 b 的声明加入 AO 并推入作用域中（所以第二个 script 块中的代码才能访问到 b），全局 EC 压入 ECS。</span></span><br><span class=\"line\"><span class=\"comment\"> 2、逐行的进行分词、语法检查、代码生成，然后执行。</span></span><br><span class=\"line\"><span class=\"comment\">     2.1、在 console.log(&#x27;script1 start&#x27;); 这行代码中，不存在语法错误，执行，输出 start。</span></span><br><span class=\"line\"><span class=\"comment\">     2.2、在 console.log(&#x27;a&#x27;,a); 这行代码中，对变量 a 进行 RHS 查询，在作用域链中找不到 a ，报 ReferenceError，script 块中断执行。</span></span><br><span class=\"line\"><span class=\"comment\"> 3、JS 执行流进入第二个 script 块，仍然在全局 EC（JS 引擎只会存在一个全局 EC），将 a 的声明加入 AO（与第一个代码块相同，每个 EC 绑定唯一的 VO|AO） 并推入作用域。</span></span><br><span class=\"line\"><span class=\"comment\"> 4、逐行的进行分词、语法检查、代码生成，然后执行。</span></span><br><span class=\"line\"><span class=\"comment\">     4.1、在 console.log(&#x27;b&#x27;,b); 这行代码中，对变量 b 进行 RHS 查询，在作用域的 AO 中找到对应的值 undefined，输出 b undefined。</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> 结束</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>3、闭包的产生</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首先明确什么是闭包？可以使用如下定义：</span></span><br><span class=\"line\"><span class=\"comment\">// 函数在定义的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例子</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;JavaScript&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"title function_\">func</span>(); <span class=\"comment\">// JavaScript</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// func 函数执行的位置和定义的位置是不相同的，func 是在函数 fn 中定义的，但执行却是在全局环境中，虽然是在全局函数中执行的，但函数仍然可以访问当定义时的词法作用域。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当函数执行结束后其活动变量就会被销毁，但是在上面的例子中却不是这个样子。但函数 fn 执行结束之后，fn 对象的活动变量并没有被销毁，这是因为 fn 返回的函数 func 的作用域链还保持着 fn 的活动变量，因此 JavaScript 的垃圾回收机制不会回收 fn 活动变量。虽然返回的函数 func 是在全局环境下执行的，但是其作用域链的存储的活动（变量）对象的顺序分别是：func 的活动对象、fn 的活动对象、全局变量对象。因此在 func 函数执行时，会顺着作用域链查找标识符，也就能访问到 fn 所定义的词法作用域（即 fn 函数的活动变量）也就不足为奇了。</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><code>总结</code></h2><p>问：多个 script 块间的执行顺序</p>\n<blockquote>\n<p>答：多个 script 代码块从上到下按序载入，语法分析阶段报错的话，结束本代码块的执行，执行流进入下一个代码块。多个代码块共享全局执行上下文，可以访问到其他代码块定义的变量和方法。</p>\n</blockquote>\n<p>问：为什么会产生变量提升与函数提升？</p>\n<blockquote>\n<p>答：在代码执行之前的预编译阶段，创建当前 EC 时，会在活动对象上创建一个与函数声明与变量声明对应的属性，然后将活动对象推入作用域链。在查询变量时，是通过作用域链进行 RHS 查询。所以会查询到作用域链上已经定义的函数与变量。</p>\n</blockquote>\n<p>问：闭包的产生</p>\n<blockquote>\n<p>答：简单来说，闭包中的函数所对应的作用域链上仍然保留了父级活动对象，所以可以对父级活动对象的属性进行查询。</p>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><ul>\n<li>《你不知道的 Javascript》（上卷），第一部分，作用域和闭包</li>\n<li><a class=\"link\"   href=\"https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/\" >JS 引擎的执行过程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://segmentfault.com/a/1190000013915935\" >彻底明白作用域、执行上下文 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/yangxinxiang84/article/details/113051811?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.10297.16155372256670345&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control\" >深入理解 JavaScript 的执行流程，执行上下文 EC、变量对象 VO、活动对象 AO、作用域 Scope <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/Ancecis/article/details/104382441\" >浅谈 JS 的 VO|AO <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/chen_zw/article/details/18502937?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control\" >JS 运行机制之执行顺序 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/MrErHu/blog/issues/16\" >我所认识的作用域链与原型链 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><code>前言</code></h2><p>本文主要解释 JS 引擎在遇见 script 代码块时，从编译到执行具体经历了些什么？</p>\n<p>一些关于作用域与闭包还有<code>this</code>关键字的问题可能被解答：</p>\n<ul>\n<li>为什么会产生变量提升？</li>\n<li>闭包的产生原理是什么？</li>\n<li>多个 script 代码块间是以什么顺序来执行的？</li>\n<li>为什么定义在不同代码块间的方法可以共通？通过本文都可以得到解答。</li>\n</ul>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a><code>基础概念</code></h2><ul>\n<li><p>JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。<br><code>解释型</code>：JS 引擎在运行 JS 代码时，是利用解释器一边编译一边执行的。</p>\n<p>如此便避免不了一种情况：某些代码多次重复的运行，例如 for 循环，在编译型语言中，for 循环块中的代码将以机器码执行多次；而在解释型语言中，for 循环块中的代码将被解释多次并执行，如此便有了很大的耗损。</p>\n<p><code>即时编译型</code>：于是 JS 引擎就加入了<code>JIT</code>（Just-in-time）进行编译优化，例如对重复语句和类型判断进行优化。</p>\n</li>\n<li><p>引擎、编译器与作用域<br>  引擎：从头到尾负责整个 javascript 程序的编译及执行过程。浏览器不同，其引擎也不同，比如 Chrome 采用的是 v8，Safari 采用的是 SquirrelFish Extreme。</p>\n<p>  编译器：编译过程主要分为”词法分析”、“语法分析”及“代码生成“。</p>\n<blockquote>\n</blockquote>\n<p>  作用域（Scope）：根据名称查找变量的一套规则，用于管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。</p>\n</li>\n<li><p>执行上下文（Excution Context EC）&amp;&amp; 执行上下文栈（Excution Context Stack ECS）<br>  存在三种 EC：全局执行上下文  GlobalEC ，函数执行上下文  Function EC，Eval。</p>\n<p>  ECS：引擎记录 EC 的容器，栈底是 GlobalEC ，只有在关闭页面时出栈；栈顶是当前正在执行的 EC ，函数执行完毕后出栈，并将执行权交给下一个 EC 。</p>\n</li>\n<li><p>变量对象（Variable Object）&amp;&amp; 活动对象（Activation Object）<br>  VO：EC 中用来存储变量声明（必须是 var 关键字声明而不是 let 与 const）与函数声明（必须是显式声明而不是表达式）的容器。由引擎实现，不能访问到。</p>\n<p>  AO：可以理解为 VO 的实例化，函数调用时在 EC 中被激活，成员属性能被访问。</p>\n</li>\n<li><p>LHS（Left Hand Side） &amp;&amp; RHS（Right Hand Side）<br>  LHS：赋值操作的目标。例如：a&#x3D;2; 是对 a 进行 LHS 查询。</p>\n<p>  RHS：赋值操作的源头。例如：console.log(a); 是对 a 进行 RHS 查询。</p>\n<blockquote>\n</blockquote>\n<p>  非严格模式下，LHS 查询不到变量会在顶层作用域创建具有该名称的变量，RHS 查询不到变量会报 ReferenceError 的异常；严格模式下禁止自动创建全局变量，两种查询方式失败均报 ReferenceError 的异常。</p>\n</li>\n</ul>\n<h2 id=\"JS-代码执行流程\"><a href=\"#JS-代码执行流程\" class=\"headerlink\" title=\"JS 代码执行流程\"></a><code>JS 代码执行流程</code></h2><ol>\n<li>–&gt;进入 script 标签</li>\n<li>–&gt;【预编译】JS 引擎创建全局 EC，全局 EC 入栈</li>\n<li>–&gt;【编译】JS 解释器开始对代码<code>逐行</code>进行分词、语法分析、代码生成</li>\n<li>–&gt;有错则抛出，终止执行；无错继续向下逐行执行</li>\n<li>–&gt;【预编译】调用函数前，创建函数 EC，EC 入栈</li>\n<li>–&gt;【编译】</li>\n<li>–&gt;有错则抛出，终止执行；无错继续向下执行</li>\n<li>–&gt;函数执行完毕，EC 出栈</li>\n<li>–&gt;继续以上步骤</li>\n<li>–&gt;页面销毁，全局 EC 出栈</li>\n<li>–&gt;结束</li>\n</ol>\n<p><code>创建当前环境 EC 流程如下：</code></p>\n<p>1、初始化作用域 [[Scope]]，（拷贝传入的父执行上下文的 Scope），数据结构应该是数组或者链表。</p>\n<p>例如：[[Scope]] : AO1（当前）–&gt;VO（全局）</p>\n<p>2、创建活动对象，创建完成之后，将活动对象推入作用域链的最前端：</p>\n<p>例如：[[Scope]] : AO2（当前）–&gt;AO1（父级）–&gt;VO（全局）</p>\n<p>2.1、创建 arguments 对象，检查上下文，初始化参数名称和值并创建引用的复制。（函数中存在）</p>\n<p>2.2、创建形参，通过实参赋值。（函数中存在）</p>\n<p>2.3、扫描上下文的函数声明（而非函数表达式）：</p>\n<p>为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。函数声明比变量优先级要高，并且定义过程不会被变量覆盖，除非是赋值</p>\n<p>2.4、扫描上下文的变量声明：</p>\n<p>为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为 undefined，如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。</p>\n<p>3、求出上下文内部 this 的值。</p>\n<blockquote>\n<p>从以上流程中可以观察到<code>作用域、变量提升和 this</code>，接下来结合代码具体分析。</p>\n</blockquote>\n<h2 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a><code>代码分析</code></h2><p>1、EC 创建流程与变量提升</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;outer&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a+<span class=\"string\">&#x27;--a--start&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b+<span class=\"string\">&#x27;--b--start&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c+<span class=\"string\">&#x27;--c--start&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`------------`</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a+<span class=\"string\">&#x27;--a--end&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b+<span class=\"string\">&#x27;--b--end&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c+<span class=\"string\">&#x27;--c--end&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">22</span>);<span class=\"comment\">// 对形参 i 的 LHS 查询</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span>--a--start<span class=\"comment\">// 变量 a 声明时提升赋值为 undefined</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span>--b--start<span class=\"comment\">// 变量 b 声明时提升赋值为 undefined</span></span><br><span class=\"line\">ƒ <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;--c--start<span class=\"comment\">// 函数 c 声明时提升指向 c 的引用</span></span><br><span class=\"line\">------------</span><br><span class=\"line\">hello--a--end<span class=\"comment\">// 此时赋值语句执行完毕，a 的值为 hello</span></span><br><span class=\"line\">ƒ() &#123;&#125;--b--end<span class=\"comment\">// 此时赋值语句执行完毕，b 指向 b 的引用</span></span><br><span class=\"line\">ƒ <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;--c--end<span class=\"comment\">// 无变化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分析</span></span><br><span class=\"line\"><span class=\"comment\">// 代码载入前，创建全局 EC 的伪代码</span></span><br><span class=\"line\"><span class=\"title class_\">GlobalEC</span> : &#123;</span><br><span class=\"line\">    [[<span class=\"title class_\">Scope</span>]] : [&#123;<span class=\"variable constant_\">VO</span>&#125;],</span><br><span class=\"line\">    <span class=\"variable constant_\">VO</span> : &#123;</span><br><span class=\"line\">        foo : fnFoo,<span class=\"comment\">// 函数声明优先，指向函数 Foo 的引用</span></span><br><span class=\"line\">        a :  <span class=\"literal\">undefined</span><span class=\"comment\">// 变量声明</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span><span class=\"comment\">// 指向全局</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用函数 foo(22) 时，创建当前 EC 的伪代码</span></span><br><span class=\"line\"><span class=\"title class_\">CurrentEC</span> : &#123;</span><br><span class=\"line\">    [[<span class=\"title class_\">Scope</span>]] : [&#123;<span class=\"variable constant_\">AO</span>&#125;, &#123;<span class=\"variable constant_\">VO</span>&#125;],</span><br><span class=\"line\">    <span class=\"variable constant_\">AO</span> : &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 顺序：arguments 对象 形参 函数声明 变量声明</span></span><br><span class=\"line\">        <span class=\"variable language_\">arguments</span> : &#123;</span><br><span class=\"line\">            <span class=\"number\">0</span> : <span class=\"number\">22</span>,</span><br><span class=\"line\">            length : <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        i : <span class=\"number\">22</span>,<span class=\"comment\">// 形参，接受实参赋值</span></span><br><span class=\"line\">        c : fnC,<span class=\"comment\">//指向函数 c 的引用</span></span><br><span class=\"line\">        a : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        b : <span class=\"literal\">undefined</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span><span class=\"comment\">// 指向函数的调用者，这里指向全局</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、多个 script 块间的执行过程</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script1 start&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a&#x27;</span>,a);</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">var</span> b=<span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script1 end&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script2 start&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b&#x27;</span>,b);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script2 end&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     script1 start</span></span><br><span class=\"line\"><span class=\"comment\">     Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\"><span class=\"comment\">     script2 start</span></span><br><span class=\"line\"><span class=\"comment\">     b undefined</span></span><br><span class=\"line\"><span class=\"comment\">     script2 end</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\"> 1、从代码运行结果可以看出，JS 执行流在进入第一个 script 块时，首先会创建全局 EC ，将 b 的声明加入 AO 并推入作用域中（所以第二个 script 块中的代码才能访问到 b），全局 EC 压入 ECS。</span></span><br><span class=\"line\"><span class=\"comment\"> 2、逐行的进行分词、语法检查、代码生成，然后执行。</span></span><br><span class=\"line\"><span class=\"comment\">     2.1、在 console.log(&#x27;script1 start&#x27;); 这行代码中，不存在语法错误，执行，输出 start。</span></span><br><span class=\"line\"><span class=\"comment\">     2.2、在 console.log(&#x27;a&#x27;,a); 这行代码中，对变量 a 进行 RHS 查询，在作用域链中找不到 a ，报 ReferenceError，script 块中断执行。</span></span><br><span class=\"line\"><span class=\"comment\"> 3、JS 执行流进入第二个 script 块，仍然在全局 EC（JS 引擎只会存在一个全局 EC），将 a 的声明加入 AO（与第一个代码块相同，每个 EC 绑定唯一的 VO|AO） 并推入作用域。</span></span><br><span class=\"line\"><span class=\"comment\"> 4、逐行的进行分词、语法检查、代码生成，然后执行。</span></span><br><span class=\"line\"><span class=\"comment\">     4.1、在 console.log(&#x27;b&#x27;,b); 这行代码中，对变量 b 进行 RHS 查询，在作用域的 AO 中找到对应的值 undefined，输出 b undefined。</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> 结束</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、闭包的产生</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首先明确什么是闭包？可以使用如下定义：</span></span><br><span class=\"line\"><span class=\"comment\">// 函数在定义的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例子</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;JavaScript&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"title function_\">func</span>(); <span class=\"comment\">// JavaScript</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// func 函数执行的位置和定义的位置是不相同的，func 是在函数 fn 中定义的，但执行却是在全局环境中，虽然是在全局函数中执行的，但函数仍然可以访问当定义时的词法作用域。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当函数执行结束后其活动变量就会被销毁，但是在上面的例子中却不是这个样子。但函数 fn 执行结束之后，fn 对象的活动变量并没有被销毁，这是因为 fn 返回的函数 func 的作用域链还保持着 fn 的活动变量，因此 JavaScript 的垃圾回收机制不会回收 fn 活动变量。虽然返回的函数 func 是在全局环境下执行的，但是其作用域链的存储的活动（变量）对象的顺序分别是：func 的活动对象、fn 的活动对象、全局变量对象。因此在 func 函数执行时，会顺着作用域链查找标识符，也就能访问到 fn 所定义的词法作用域（即 fn 函数的活动变量）也就不足为奇了。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><code>总结</code></h2><p>问：多个 script 块间的执行顺序</p>\n<blockquote>\n<p>答：多个 script 代码块从上到下按序载入，语法分析阶段报错的话，结束本代码块的执行，执行流进入下一个代码块。多个代码块共享全局执行上下文，可以访问到其他代码块定义的变量和方法。</p>\n</blockquote>\n<p>问：为什么会产生变量提升与函数提升？</p>\n<blockquote>\n<p>答：在代码执行之前的预编译阶段，创建当前 EC 时，会在活动对象上创建一个与函数声明与变量声明对应的属性，然后将活动对象推入作用域链。在查询变量时，是通过作用域链进行 RHS 查询。所以会查询到作用域链上已经定义的函数与变量。</p>\n</blockquote>\n<p>问：闭包的产生</p>\n<blockquote>\n<p>答：简单来说，闭包中的函数所对应的作用域链上仍然保留了父级活动对象，所以可以对父级活动对象的属性进行查询。</p>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><ul>\n<li>《你不知道的 Javascript》（上卷），第一部分，作用域和闭包</li>\n<li><a class=\"link\"   href=\"https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/\" >JS 引擎的执行过程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://segmentfault.com/a/1190000013915935\" >彻底明白作用域、执行上下文 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/yangxinxiang84/article/details/113051811?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.10297.16155372256670345&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control\" >深入理解 JavaScript 的执行流程，执行上下文 EC、变量对象 VO、活动对象 AO、作用域 Scope <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/Ancecis/article/details/104382441\" >浅谈 JS 的 VO|AO <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/chen_zw/article/details/18502937?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control\" >JS 运行机制之执行顺序 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/MrErHu/blog/issues/16\" >我所认识的作用域链与原型链 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n"},{"title":"【转载】JS：详解Event Loop运行机制","date":"2022-06-28T09:30:57.000Z","_content":"<a href=\"https://limeii.github.io/2019/05/js-eventloop\">转载：JS：详解Event Loop运行机制</a>\n\n<article class=\"post-container post-container--single\" itemscope=\"\" itemtype=\"http://schema.org/BlogPosting\">\n  <header class=\"post-header\">\n    <h1 class=\"post-title\">JS：详解Event Loop运行机制</h1>\n  </header>\n\n  <section class=\"post\">\n    <p>在这篇文章中会介绍以下内容：</p>\n    <ul>\n      <li>\n        <p>engine runtime 和 call stack 简介（以 V8 引擎为例）</p>\n      </li>\n      <li>\n        <p>Event Loop 运行机制的详解</p>\n      </li>\n      <li>\n        <p>microtasks 和 macrotask 的执行顺序</p>\n      </li>\n    </ul>\n\n    <h2 id=\"engine-runtime-和-call-stack-简介\">engine runtime 和 call stack 简介</h2>\n\n    <p>在 chrome 浏览器和 nodejs 里都是用 V8 引擎解析和运行 JS 代码，我们先来看下 V8 引擎的简化图：</p>\n\n    <p><img src=\"./js-eventloop01.png\" alt=\"js-eventloop\" height=\"80%\" width=\"80%\"></p>\n\n    <p>上图中 Heap 是用来做内存分配，<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>是用来执行 JS 代码，由于 JS\n      是单线程所以只有一个<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>。实际我们写网页开发的时候，除了一些 JS\n      代码，我们还会大量用到：DOM 事件、AJAX(XMLHttpRequest)、setTimeout 等等一些异步事件。从上图可以看出，这些异步事件都没有在 V8 引擎里，事实上这些异步事件不属于 V8\n      引擎，而是属于浏览器，并且 DOM 事件、AJAX(XMLHttpRequest)、setTimeout 都分别有单独的线程来处理。由于<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>执行（JS 运行线程）和页面渲染线程是互斥的，如果所有的事情都由 V8\n      引擎处理，这样肯定会导致页面卡顿。</p>\n\n    <p>浏览器多线程和 callback 机制完美避免了页面卡顿的问题。DOM 事件、AJAX(XMLHttpRequest)、setTimeout 这些异步事件在各自单独的线程处理完以后，每个异步事件都有 callback\n      回调函数，V8 引擎再把这些回调函数放在<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>执行。上述整个运行机制可以称为是\n      runtime，可以简化如下图：</p>\n\n    <p><img src=\"./js-eventloop02.png\" alt=\"js-eventloop\" height=\"80%\" width=\"80%\"></p>\n\n    <p>如上图所示，web 异步事件结束以后，会有 callback，然后 runtime 把这些 callback 事件放到<code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>里，一旦<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>所有的方法都执行完以后，<code\n        class=\"language-plaintext highlighter-rouge\">Event Loop</code>会依次把 <code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>里的回调函数放到<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>里执行。</p>\n\n    <h2 id=\"event-loop-运行机制的详解\">Event Loop 运行机制的详解</h2>\n\n    <p>Event Loop 实际上就是一个 job，用来检测 Call Stack 和 Callback Queue，一旦 Call Stack 里代码执行完以后，就会把 Callback Queue 里第一个 callback\n      函数放到 Call Stack 里执行。我们来看个例子：</p>\n\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n      </div>\n    </div>\n    <p>运行运行结果如下:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code>script start\nscript end\nsetTimeout\n</code></pre>\n      </div>\n    </div>\n    <p>我们具体一步一步看下整个流程：</p>\n\n    <p>1，代码没有运行之前，<code class=\"language-plaintext highlighter-rouge\">Call Stack</code> <code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>都是空的</p>\n\n    <p><img src=\"./js-eventloop03.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>2，把<code class=\"language-plaintext highlighter-rouge\">console.log('script start')</code>加到 Call Stack</p>\n\n    <p><img src=\"./js-eventloop04.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>3，执行<code class=\"language-plaintext highlighter-rouge\">console.log('script start')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">script start</code>，执行结束后把它移出 Call Stack</p>\n\n    <p><img src=\"./js-eventloop05.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>4，把 setTimeout 放到 Call Stack</p>\n\n    <p><img src=\"./js-eventloop06.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>5, 执行 setTimeout，用 setTimout 线程执行 timeout 时间，Call Stack 中 setTimeout 执行结束，把它移出 Call Stack</p>\n\n    <p><img src=\"./js-eventloop07.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>6, 把<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>加到 Call Stack</p>\n\n    <p><img src=\"./js-eventloop08.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>7，执行<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">script end</code></p>\n\n    <p><img src=\"./js-eventloop09.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>8，<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img src=\"./js-eventloop10.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>9，1000毫秒以后，计时结束，把 callback<code class=\"language-plaintext highlighter-rouge\">cb1</code>函数放到 Callback Queue 里</p>\n\n    <p><img src=\"./js-eventloop11.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>10，此时 Callback Stack 是空的，Event Loop 把 cb1 拿到 Callback Stack 里</p>\n\n    <p><img src=\"./js-eventloop12.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>11，执行 cb1，cb1 里有<code class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>，把<code\n        class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>放到 Call Stack 里</p>\n\n    <p><img src=\"./js-eventloop13.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>12，执行<code class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">setTimeout</code>，<code\n        class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img src=\"./js-eventloop14.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>13，<code class=\"language-plaintext highlighter-rouge\">cb1</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img src=\"./js-eventloop15.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>总结来说就是，JS 是单线程的，只有一个 Call Stack，浏览器是多线程的，并且 DOM 事件、AJAX(XMLHttpRequest)、setTimeout\n      都是有单独的线程处理。在这些异步事件结束，runtime会把它们的 callback 按顺序放到 Callback Queue 里，Event Loop 会检测 Call Stack，一旦它为空，就会把 Callback\n      Queue 里的回调函数依次放到 Call Stack 里执行，直到 Callback Queue 为空。</p>\n\n    <h2 id=\"microtasks-和-macrotask-的执行顺序\">microtasks 和 macrotask 的执行顺序</h2>\n\n    <p>刚才用 setTimeout 为例，解释了JS中 Event Loop 机制是怎么运行的，也提到过 runtime 会把回调函数依次按时间先后顺序放到 Callback Queue 里，然后 Event Loop\n      再依次把这些回调函数放到 Call Stack 里运行。我们在浏览器 Console 运行以下代码，看下结果：</p>\n\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n      </div>\n    </div>\n    <p>执行结果如下：</p>\n\n    <div class=\"language-plaintext highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code>script start\nscript end\npromise1\npromise2\nsetTimeout\n</code></pre>\n      </div>\n    </div>\n    <blockquote>\n      <p>\n        上述代码虽然 setTimeout 延时为0，其实还是异步的。因为H5标准规定 setTimeout 函数的第二个参数不能小于4毫秒，不足会自动增加。\n      </p>\n    </blockquote>\n\n    <p>setTimeout 和 promise 都是异步事件，而且setTimeout 写在 promise 之前，为什么 setTimeout 的回调要比 promise 后执行呢？那是因为 promise\n      属于微任务（microtasks）而 setTimeout 属于宏任务（macrotask），微任务（microtasks）的优先级要高于宏任务（macrotask）。</p>\n\n    <p>首先我们需要明白以下几件事情：</p>\n    <ul>\n      <li>JS 分为同步任务和异步任务</li>\n      <li>同步任务都在主线程上执行，形成一个执行栈</li>\n      <li>主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li>\n      <li>一旦执行栈中的所有同步任务执行完毕（此时JS引擎空闲），系统就会读取任务队列，将可运行的异步任务添加到可执行栈中，开始执行。</li>\n    </ul>\n\n    <p>根据规范，事件循环是通过任务队列的机制来进行协调的。一个 Event Loop 中，可以有一个或者多个任务队列(task queue)，一个任务队列便是一系列有序任务(task)的集合；每个任务都有一个任务源(task\n      source)，源自同一个任务源的 task 必须放到同一个任务队列，从不同源来的则被添加到不同队列。 setTimeout/Promise 等 API 便是任务源，而进入任务队列的是他们指定的具体执行任务。</p>\n\n    <p><img src=\"./js-eventloop16.png\" alt=\"js-eventloop\"></p>\n\n    <p>Callback Queue（Task Queue）里的回调事件称为宏任务（macrotask），每次异步事件结束后，它们的回调函数会依次按时间顺序放在 Callback Queue 里，等待 Event Loop\n      依次把它们放到 Call Stack 里执行。比如：<code class=\"language-plaintext highlighter-rouge\">setInterval</code> <code\n        class=\"language-plaintext highlighter-rouge\">setTimeout</code> <code\n        class=\"language-plaintext highlighter-rouge\">script</code> <code\n        class=\"language-plaintext highlighter-rouge\">setImmediate</code> <code\n        class=\"language-plaintext highlighter-rouge\">I/O</code> <code\n        class=\"language-plaintext highlighter-rouge\">UI rendering</code>就是宏任务（macrotask）。</p>\n\n    <p>微任务（microtasks）是指异步事件结束后，回调函数不会放到 Callback Queue，而是放到一个微任务队列里（Microtasks Queue），在 Call Stack 为空时，Event Loop\n      会先查看微任务队列里是否有任务，如果有就会先执行微任务队列里的回调事件；如果没有微任务，才会到 Callback Queue 执行回到事件。比如：<code\n        class=\"language-plaintext highlighter-rouge\">promise</code> <code\n        class=\"language-plaintext highlighter-rouge\">process.netTick</code> <code\n        class=\"language-plaintext highlighter-rouge\">Object.observe</code> <code\n        class=\"language-plaintext highlighter-rouge\">MutationObserver</code>就是微任务（microtasks）。</p>\n\n    <blockquote>\n      <p>\n        在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。\n      </p>\n    </blockquote>\n\n    <p>整个 Event Loop 的执行顺序如下：</p>\n    <ul>\n      <li>执行一个宏任务（栈中没有就从事件队列中获取）</li>\n      <li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>\n      <li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>\n      <li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li>\n      <li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取，也就是 callbacke queue）</li>\n    </ul>\n\n    <p>流程图如下：\n      <img src=\"./js-eventloop17.jpg\" alt=\"js-eventloop\" height=\"40%\" width=\"40%\">\n    </p>\n\n    <p>我们再把代码改一下，在创建 promise 的时候，加一行<code\n        class=\"language-plaintext highlighter-rouge\">console.log('Promise')</code>，而且在第一个 promise resolve 的时候再加一个\n      setTimeout，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Promise</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout in promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nPromise\nscript end\npromise1\npromise2\nsetTimeout\nsetTimeout in promise1\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p><code class=\"language-plaintext highlighter-rouge\">console.log('Promise')</code>在这里是同步代码，<code\n        class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>是同步代码且放在最后，所以<code\n        class=\"language-plaintext highlighter-rouge\">Promise</code>在<code\n        class=\"language-plaintext highlighter-rouge\">script end</code>前面，而且在微任务（microtasks）里有宏任务（macrotask），macrotask\n      还是会依次被放到 Callback Queue 等待执行。</p>\n\n    <p>如果有 async await 呢？再来看一段代码：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"c1\">//请写出输出内容</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们知道 Promise 中的异步体现在 then 和 catch 中，所以写在 Promise 中的代码是被当做同步任务立即执行的。而在 async/await 中，在出现 await\n      出现之前，其中的代码也是立即执行的。那么出现了 await 时候发生了什么呢？</p>\n\n    <p>由于因为 async await 本身就是 promise+generator 的语法糖。所以 await 后面的代码是 microtask。所以对于上面代码中的</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\t<span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n      </div>\n    </div>\n    <p>等价于：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\t<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">async2</span><span class=\"p\">()).</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们来看一个变式, 将 async2 中的函数也变成了 Promise 函数：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//async2做出如下更改：</span>\n    <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise3</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise4</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\npromise1\npromise3\nscript end\npromise2\nasync1 end\npromise4\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们再来看一个变式，将 async1 中 await 后面的代码和 async2 的代码都改为异步的，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"c1\">//更改如下：</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout1</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//更改如下：</span>\n\t<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\t<span class=\"p\">},</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout3</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\npromise1\nscript end\npromise2\nsetTimeout3\nsetTimeout2\nsetTimeout1\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们再来看一个变式，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">a1</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a1 start</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"nx\">a2</span><span class=\"p\">()</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a1 end</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">a2</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">a1</span><span class=\"p\">()</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2.then</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">promise2</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise3</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n\n<span class=\"cm\">/**\nscript start\na1 start\na2\npromise2\nscript end\npromise1\na1 end\npromise2.then\npromise3\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>参考资料：</p>\n    <ul>\n      <li><a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loops\">“Event loops”, section in HTML5\n          spec.</a></li>\n      <li><a href=\"https://vimeo.com/96425312\">“Help, I’m stuck in an event-loop” by Philip Roberts (video).</a></li>\n    </ul>\n\n  </section>\n</article>","source":"_posts/ReprintJSEventLoop.html","raw":"---\ntitle: 【转载】JS：详解Event Loop运行机制\ndate: 2022-06-28 17:30:57\ntags: [JS]\ncategories: [转载]\n---\n<a href=\"https://limeii.github.io/2019/05/js-eventloop\">转载：JS：详解Event Loop运行机制</a>\n\n<article class=\"post-container post-container--single\" itemscope=\"\" itemtype=\"http://schema.org/BlogPosting\">\n  <header class=\"post-header\">\n    <h1 class=\"post-title\">JS：详解Event Loop运行机制</h1>\n  </header>\n\n  <section class=\"post\">\n    <p>在这篇文章中会介绍以下内容：</p>\n    <ul>\n      <li>\n        <p>engine runtime 和 call stack 简介（以 V8 引擎为例）</p>\n      </li>\n      <li>\n        <p>Event Loop 运行机制的详解</p>\n      </li>\n      <li>\n        <p>microtasks 和 macrotask 的执行顺序</p>\n      </li>\n    </ul>\n\n    <h2 id=\"engine-runtime-和-call-stack-简介\">engine runtime 和 call stack 简介</h2>\n\n    <p>在 chrome 浏览器和 nodejs 里都是用 V8 引擎解析和运行 JS 代码，我们先来看下 V8 引擎的简化图：</p>\n\n    <p><img src=\"./js-eventloop01.png\" alt=\"js-eventloop\" height=\"80%\" width=\"80%\"></p>\n\n    <p>上图中 Heap 是用来做内存分配，<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>是用来执行 JS 代码，由于 JS\n      是单线程所以只有一个<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>。实际我们写网页开发的时候，除了一些 JS\n      代码，我们还会大量用到：DOM 事件、AJAX(XMLHttpRequest)、setTimeout 等等一些异步事件。从上图可以看出，这些异步事件都没有在 V8 引擎里，事实上这些异步事件不属于 V8\n      引擎，而是属于浏览器，并且 DOM 事件、AJAX(XMLHttpRequest)、setTimeout 都分别有单独的线程来处理。由于<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>执行（JS 运行线程）和页面渲染线程是互斥的，如果所有的事情都由 V8\n      引擎处理，这样肯定会导致页面卡顿。</p>\n\n    <p>浏览器多线程和 callback 机制完美避免了页面卡顿的问题。DOM 事件、AJAX(XMLHttpRequest)、setTimeout 这些异步事件在各自单独的线程处理完以后，每个异步事件都有 callback\n      回调函数，V8 引擎再把这些回调函数放在<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>执行。上述整个运行机制可以称为是\n      runtime，可以简化如下图：</p>\n\n    <p><img src=\"./js-eventloop02.png\" alt=\"js-eventloop\" height=\"80%\" width=\"80%\"></p>\n\n    <p>如上图所示，web 异步事件结束以后，会有 callback，然后 runtime 把这些 callback 事件放到<code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>里，一旦<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>所有的方法都执行完以后，<code\n        class=\"language-plaintext highlighter-rouge\">Event Loop</code>会依次把 <code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>里的回调函数放到<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>里执行。</p>\n\n    <h2 id=\"event-loop-运行机制的详解\">Event Loop 运行机制的详解</h2>\n\n    <p>Event Loop 实际上就是一个 job，用来检测 Call Stack 和 Callback Queue，一旦 Call Stack 里代码执行完以后，就会把 Callback Queue 里第一个 callback\n      函数放到 Call Stack 里执行。我们来看个例子：</p>\n\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n      </div>\n    </div>\n    <p>运行运行结果如下:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code>script start\nscript end\nsetTimeout\n</code></pre>\n      </div>\n    </div>\n    <p>我们具体一步一步看下整个流程：</p>\n\n    <p>1，代码没有运行之前，<code class=\"language-plaintext highlighter-rouge\">Call Stack</code> <code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>都是空的</p>\n\n    <p><img src=\"./js-eventloop03.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>2，把<code class=\"language-plaintext highlighter-rouge\">console.log('script start')</code>加到 Call Stack</p>\n\n    <p><img src=\"./js-eventloop04.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>3，执行<code class=\"language-plaintext highlighter-rouge\">console.log('script start')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">script start</code>，执行结束后把它移出 Call Stack</p>\n\n    <p><img src=\"./js-eventloop05.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>4，把 setTimeout 放到 Call Stack</p>\n\n    <p><img src=\"./js-eventloop06.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>5, 执行 setTimeout，用 setTimout 线程执行 timeout 时间，Call Stack 中 setTimeout 执行结束，把它移出 Call Stack</p>\n\n    <p><img src=\"./js-eventloop07.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>6, 把<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>加到 Call Stack</p>\n\n    <p><img src=\"./js-eventloop08.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>7，执行<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">script end</code></p>\n\n    <p><img src=\"./js-eventloop09.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>8，<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img src=\"./js-eventloop10.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>9，1000毫秒以后，计时结束，把 callback<code class=\"language-plaintext highlighter-rouge\">cb1</code>函数放到 Callback Queue 里</p>\n\n    <p><img src=\"./js-eventloop11.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>10，此时 Callback Stack 是空的，Event Loop 把 cb1 拿到 Callback Stack 里</p>\n\n    <p><img src=\"./js-eventloop12.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>11，执行 cb1，cb1 里有<code class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>，把<code\n        class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>放到 Call Stack 里</p>\n\n    <p><img src=\"./js-eventloop13.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>12，执行<code class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">setTimeout</code>，<code\n        class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img src=\"./js-eventloop14.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>13，<code class=\"language-plaintext highlighter-rouge\">cb1</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img src=\"./js-eventloop15.png\" alt=\"js-eventloop\" height=\"60%\" width=\"60%\"></p>\n\n    <p>总结来说就是，JS 是单线程的，只有一个 Call Stack，浏览器是多线程的，并且 DOM 事件、AJAX(XMLHttpRequest)、setTimeout\n      都是有单独的线程处理。在这些异步事件结束，runtime会把它们的 callback 按顺序放到 Callback Queue 里，Event Loop 会检测 Call Stack，一旦它为空，就会把 Callback\n      Queue 里的回调函数依次放到 Call Stack 里执行，直到 Callback Queue 为空。</p>\n\n    <h2 id=\"microtasks-和-macrotask-的执行顺序\">microtasks 和 macrotask 的执行顺序</h2>\n\n    <p>刚才用 setTimeout 为例，解释了JS中 Event Loop 机制是怎么运行的，也提到过 runtime 会把回调函数依次按时间先后顺序放到 Callback Queue 里，然后 Event Loop\n      再依次把这些回调函数放到 Call Stack 里运行。我们在浏览器 Console 运行以下代码，看下结果：</p>\n\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n      </div>\n    </div>\n    <p>执行结果如下：</p>\n\n    <div class=\"language-plaintext highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code>script start\nscript end\npromise1\npromise2\nsetTimeout\n</code></pre>\n      </div>\n    </div>\n    <blockquote>\n      <p>\n        上述代码虽然 setTimeout 延时为0，其实还是异步的。因为H5标准规定 setTimeout 函数的第二个参数不能小于4毫秒，不足会自动增加。\n      </p>\n    </blockquote>\n\n    <p>setTimeout 和 promise 都是异步事件，而且setTimeout 写在 promise 之前，为什么 setTimeout 的回调要比 promise 后执行呢？那是因为 promise\n      属于微任务（microtasks）而 setTimeout 属于宏任务（macrotask），微任务（microtasks）的优先级要高于宏任务（macrotask）。</p>\n\n    <p>首先我们需要明白以下几件事情：</p>\n    <ul>\n      <li>JS 分为同步任务和异步任务</li>\n      <li>同步任务都在主线程上执行，形成一个执行栈</li>\n      <li>主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li>\n      <li>一旦执行栈中的所有同步任务执行完毕（此时JS引擎空闲），系统就会读取任务队列，将可运行的异步任务添加到可执行栈中，开始执行。</li>\n    </ul>\n\n    <p>根据规范，事件循环是通过任务队列的机制来进行协调的。一个 Event Loop 中，可以有一个或者多个任务队列(task queue)，一个任务队列便是一系列有序任务(task)的集合；每个任务都有一个任务源(task\n      source)，源自同一个任务源的 task 必须放到同一个任务队列，从不同源来的则被添加到不同队列。 setTimeout/Promise 等 API 便是任务源，而进入任务队列的是他们指定的具体执行任务。</p>\n\n    <p><img src=\"./js-eventloop16.png\" alt=\"js-eventloop\"></p>\n\n    <p>Callback Queue（Task Queue）里的回调事件称为宏任务（macrotask），每次异步事件结束后，它们的回调函数会依次按时间顺序放在 Callback Queue 里，等待 Event Loop\n      依次把它们放到 Call Stack 里执行。比如：<code class=\"language-plaintext highlighter-rouge\">setInterval</code> <code\n        class=\"language-plaintext highlighter-rouge\">setTimeout</code> <code\n        class=\"language-plaintext highlighter-rouge\">script</code> <code\n        class=\"language-plaintext highlighter-rouge\">setImmediate</code> <code\n        class=\"language-plaintext highlighter-rouge\">I/O</code> <code\n        class=\"language-plaintext highlighter-rouge\">UI rendering</code>就是宏任务（macrotask）。</p>\n\n    <p>微任务（microtasks）是指异步事件结束后，回调函数不会放到 Callback Queue，而是放到一个微任务队列里（Microtasks Queue），在 Call Stack 为空时，Event Loop\n      会先查看微任务队列里是否有任务，如果有就会先执行微任务队列里的回调事件；如果没有微任务，才会到 Callback Queue 执行回到事件。比如：<code\n        class=\"language-plaintext highlighter-rouge\">promise</code> <code\n        class=\"language-plaintext highlighter-rouge\">process.netTick</code> <code\n        class=\"language-plaintext highlighter-rouge\">Object.observe</code> <code\n        class=\"language-plaintext highlighter-rouge\">MutationObserver</code>就是微任务（microtasks）。</p>\n\n    <blockquote>\n      <p>\n        在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。\n      </p>\n    </blockquote>\n\n    <p>整个 Event Loop 的执行顺序如下：</p>\n    <ul>\n      <li>执行一个宏任务（栈中没有就从事件队列中获取）</li>\n      <li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>\n      <li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>\n      <li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li>\n      <li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取，也就是 callbacke queue）</li>\n    </ul>\n\n    <p>流程图如下：\n      <img src=\"./js-eventloop17.jpg\" alt=\"js-eventloop\" height=\"40%\" width=\"40%\">\n    </p>\n\n    <p>我们再把代码改一下，在创建 promise 的时候，加一行<code\n        class=\"language-plaintext highlighter-rouge\">console.log('Promise')</code>，而且在第一个 promise resolve 的时候再加一个\n      setTimeout，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Promise</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout in promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nPromise\nscript end\npromise1\npromise2\nsetTimeout\nsetTimeout in promise1\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p><code class=\"language-plaintext highlighter-rouge\">console.log('Promise')</code>在这里是同步代码，<code\n        class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>是同步代码且放在最后，所以<code\n        class=\"language-plaintext highlighter-rouge\">Promise</code>在<code\n        class=\"language-plaintext highlighter-rouge\">script end</code>前面，而且在微任务（microtasks）里有宏任务（macrotask），macrotask\n      还是会依次被放到 Callback Queue 等待执行。</p>\n\n    <p>如果有 async await 呢？再来看一段代码：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"c1\">//请写出输出内容</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们知道 Promise 中的异步体现在 then 和 catch 中，所以写在 Promise 中的代码是被当做同步任务立即执行的。而在 async/await 中，在出现 await\n      出现之前，其中的代码也是立即执行的。那么出现了 await 时候发生了什么呢？</p>\n\n    <p>由于因为 async await 本身就是 promise+generator 的语法糖。所以 await 后面的代码是 microtask。所以对于上面代码中的</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\t<span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n      </div>\n    </div>\n    <p>等价于：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\t<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">async2</span><span class=\"p\">()).</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们来看一个变式, 将 async2 中的函数也变成了 Promise 函数：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//async2做出如下更改：</span>\n    <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise3</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise4</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\npromise1\npromise3\nscript end\npromise2\nasync1 end\npromise4\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们再来看一个变式，将 async1 中 await 后面的代码和 async2 的代码都改为异步的，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"c1\">//更改如下：</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout1</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//更改如下：</span>\n\t<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\t<span class=\"p\">},</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout3</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\npromise1\nscript end\npromise2\nsetTimeout3\nsetTimeout2\nsetTimeout1\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们再来看一个变式，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">a1</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a1 start</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"nx\">a2</span><span class=\"p\">()</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a1 end</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">a2</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">a1</span><span class=\"p\">()</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2.then</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">promise2</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise3</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n\n<span class=\"cm\">/**\nscript start\na1 start\na2\npromise2\nscript end\npromise1\na1 end\npromise2.then\npromise3\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>参考资料：</p>\n    <ul>\n      <li><a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loops\">“Event loops”, section in HTML5\n          spec.</a></li>\n      <li><a href=\"https://vimeo.com/96425312\">“Help, I’m stuck in an event-loop” by Philip Roberts (video).</a></li>\n    </ul>\n\n  </section>\n</article>","slug":"ReprintJSEventLoop","published":1,"updated":"2023-02-21T12:22:23.389Z","_id":"cle8bsvfv000cj0h85wld8lht","comments":1,"layout":"post","photos":[],"link":"","content":"<a class=\"link\"   href=\"https://limeii.github.io/2019/05/js-eventloop\" >转载：JS：详解Event Loop运行机制 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>\n\n<article class=\"post-container post-container--single\" itemscope=\"\" itemtype=\"http://schema.org/BlogPosting\">\n  <header class=\"post-header\">\n    <h1 class=\"post-title\">JS：详解Event Loop运行机制</h1>\n  </header>\n\n  <section class=\"post\">\n    <p>在这篇文章中会介绍以下内容：</p>\n    <ul>\n      <li>\n        <p>engine runtime 和 call stack 简介（以 V8 引擎为例）</p>\n      </li>\n      <li>\n        <p>Event Loop 运行机制的详解</p>\n      </li>\n      <li>\n        <p>microtasks 和 macrotask 的执行顺序</p>\n      </li>\n    </ul>\n\n    <h2 id=\"engine-runtime-和-call-stack-简介\">engine runtime 和 call stack 简介</h2>\n\n    <p>在 chrome 浏览器和 nodejs 里都是用 V8 引擎解析和运行 JS 代码，我们先来看下 V8 引擎的简化图：</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop01.png\"\n                      alt=\"js-eventloop\" height=\"80%\" width=\"80%\"\n                ></p>\n\n    <p>上图中 Heap 是用来做内存分配，<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>是用来执行 JS 代码，由于 JS\n      是单线程所以只有一个<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>。实际我们写网页开发的时候，除了一些 JS\n      代码，我们还会大量用到：DOM 事件、AJAX(XMLHttpRequest)、setTimeout 等等一些异步事件。从上图可以看出，这些异步事件都没有在 V8 引擎里，事实上这些异步事件不属于 V8\n      引擎，而是属于浏览器，并且 DOM 事件、AJAX(XMLHttpRequest)、setTimeout 都分别有单独的线程来处理。由于<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>执行（JS 运行线程）和页面渲染线程是互斥的，如果所有的事情都由 V8\n      引擎处理，这样肯定会导致页面卡顿。</p>\n\n    <p>浏览器多线程和 callback 机制完美避免了页面卡顿的问题。DOM 事件、AJAX(XMLHttpRequest)、setTimeout 这些异步事件在各自单独的线程处理完以后，每个异步事件都有 callback\n      回调函数，V8 引擎再把这些回调函数放在<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>执行。上述整个运行机制可以称为是\n      runtime，可以简化如下图：</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop02.png\"\n                      alt=\"js-eventloop\" height=\"80%\" width=\"80%\"\n                ></p>\n\n    <p>如上图所示，web 异步事件结束以后，会有 callback，然后 runtime 把这些 callback 事件放到<code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>里，一旦<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>所有的方法都执行完以后，<code\n        class=\"language-plaintext highlighter-rouge\">Event Loop</code>会依次把 <code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>里的回调函数放到<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>里执行。</p>\n\n    <h2 id=\"event-loop-运行机制的详解\">Event Loop 运行机制的详解</h2>\n\n    <p>Event Loop 实际上就是一个 job，用来检测 Call Stack 和 Callback Queue，一旦 Call Stack 里代码执行完以后，就会把 Callback Queue 里第一个 callback\n      函数放到 Call Stack 里执行。我们来看个例子：</p>\n\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n      </div>\n    </div>\n    <p>运行运行结果如下:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code>script start\nscript end\nsetTimeout\n</code></pre>\n      </div>\n    </div>\n    <p>我们具体一步一步看下整个流程：</p>\n\n    <p>1，代码没有运行之前，<code class=\"language-plaintext highlighter-rouge\">Call Stack</code> <code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>都是空的</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop03.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>2，把<code class=\"language-plaintext highlighter-rouge\">console.log('script start')</code>加到 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop04.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>3，执行<code class=\"language-plaintext highlighter-rouge\">console.log('script start')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">script start</code>，执行结束后把它移出 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop05.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>4，把 setTimeout 放到 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop06.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>5, 执行 setTimeout，用 setTimout 线程执行 timeout 时间，Call Stack 中 setTimeout 执行结束，把它移出 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop07.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>6, 把<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>加到 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop08.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>7，执行<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">script end</code></p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop09.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>8，<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop10.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>9，1000毫秒以后，计时结束，把 callback<code class=\"language-plaintext highlighter-rouge\">cb1</code>函数放到 Callback Queue 里</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop11.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>10，此时 Callback Stack 是空的，Event Loop 把 cb1 拿到 Callback Stack 里</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop12.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>11，执行 cb1，cb1 里有<code class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>，把<code\n        class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>放到 Call Stack 里</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop13.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>12，执行<code class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">setTimeout</code>，<code\n        class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop14.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>13，<code class=\"language-plaintext highlighter-rouge\">cb1</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop15.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>总结来说就是，JS 是单线程的，只有一个 Call Stack，浏览器是多线程的，并且 DOM 事件、AJAX(XMLHttpRequest)、setTimeout\n      都是有单独的线程处理。在这些异步事件结束，runtime会把它们的 callback 按顺序放到 Callback Queue 里，Event Loop 会检测 Call Stack，一旦它为空，就会把 Callback\n      Queue 里的回调函数依次放到 Call Stack 里执行，直到 Callback Queue 为空。</p>\n\n    <h2 id=\"microtasks-和-macrotask-的执行顺序\">microtasks 和 macrotask 的执行顺序</h2>\n\n    <p>刚才用 setTimeout 为例，解释了JS中 Event Loop 机制是怎么运行的，也提到过 runtime 会把回调函数依次按时间先后顺序放到 Callback Queue 里，然后 Event Loop\n      再依次把这些回调函数放到 Call Stack 里运行。我们在浏览器 Console 运行以下代码，看下结果：</p>\n\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n      </div>\n    </div>\n    <p>执行结果如下：</p>\n\n    <div class=\"language-plaintext highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code>script start\nscript end\npromise1\npromise2\nsetTimeout\n</code></pre>\n      </div>\n    </div>\n    <blockquote>\n      <p>\n        上述代码虽然 setTimeout 延时为0，其实还是异步的。因为H5标准规定 setTimeout 函数的第二个参数不能小于4毫秒，不足会自动增加。\n      </p>\n    </blockquote>\n\n    <p>setTimeout 和 promise 都是异步事件，而且setTimeout 写在 promise 之前，为什么 setTimeout 的回调要比 promise 后执行呢？那是因为 promise\n      属于微任务（microtasks）而 setTimeout 属于宏任务（macrotask），微任务（microtasks）的优先级要高于宏任务（macrotask）。</p>\n\n    <p>首先我们需要明白以下几件事情：</p>\n    <ul>\n      <li>JS 分为同步任务和异步任务</li>\n      <li>同步任务都在主线程上执行，形成一个执行栈</li>\n      <li>主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li>\n      <li>一旦执行栈中的所有同步任务执行完毕（此时JS引擎空闲），系统就会读取任务队列，将可运行的异步任务添加到可执行栈中，开始执行。</li>\n    </ul>\n\n    <p>根据规范，事件循环是通过任务队列的机制来进行协调的。一个 Event Loop 中，可以有一个或者多个任务队列(task queue)，一个任务队列便是一系列有序任务(task)的集合；每个任务都有一个任务源(task\n      source)，源自同一个任务源的 task 必须放到同一个任务队列，从不同源来的则被添加到不同队列。 setTimeout/Promise 等 API 便是任务源，而进入任务队列的是他们指定的具体执行任务。</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop16.png\"\n                      alt=\"js-eventloop\"\n                ></p>\n\n    <p>Callback Queue（Task Queue）里的回调事件称为宏任务（macrotask），每次异步事件结束后，它们的回调函数会依次按时间顺序放在 Callback Queue 里，等待 Event Loop\n      依次把它们放到 Call Stack 里执行。比如：<code class=\"language-plaintext highlighter-rouge\">setInterval</code> <code\n        class=\"language-plaintext highlighter-rouge\">setTimeout</code> <code\n        class=\"language-plaintext highlighter-rouge\">script</code> <code\n        class=\"language-plaintext highlighter-rouge\">setImmediate</code> <code\n        class=\"language-plaintext highlighter-rouge\">I/O</code> <code\n        class=\"language-plaintext highlighter-rouge\">UI rendering</code>就是宏任务（macrotask）。</p>\n\n    <p>微任务（microtasks）是指异步事件结束后，回调函数不会放到 Callback Queue，而是放到一个微任务队列里（Microtasks Queue），在 Call Stack 为空时，Event Loop\n      会先查看微任务队列里是否有任务，如果有就会先执行微任务队列里的回调事件；如果没有微任务，才会到 Callback Queue 执行回到事件。比如：<code\n        class=\"language-plaintext highlighter-rouge\">promise</code> <code\n        class=\"language-plaintext highlighter-rouge\">process.netTick</code> <code\n        class=\"language-plaintext highlighter-rouge\">Object.observe</code> <code\n        class=\"language-plaintext highlighter-rouge\">MutationObserver</code>就是微任务（microtasks）。</p>\n\n    <blockquote>\n      <p>\n        在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。\n      </p>\n    </blockquote>\n\n    <p>整个 Event Loop 的执行顺序如下：</p>\n    <ul>\n      <li>执行一个宏任务（栈中没有就从事件队列中获取）</li>\n      <li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>\n      <li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>\n      <li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li>\n      <li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取，也就是 callbacke queue）</li>\n    </ul>\n\n    <p>流程图如下：\n      <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop17.jpg\"\n                      alt=\"js-eventloop\" height=\"40%\" width=\"40%\"\n                >\n    </p>\n\n    <p>我们再把代码改一下，在创建 promise 的时候，加一行<code\n        class=\"language-plaintext highlighter-rouge\">console.log('Promise')</code>，而且在第一个 promise resolve 的时候再加一个\n      setTimeout，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Promise</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout in promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nPromise\nscript end\npromise1\npromise2\nsetTimeout\nsetTimeout in promise1\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p><code class=\"language-plaintext highlighter-rouge\">console.log('Promise')</code>在这里是同步代码，<code\n        class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>是同步代码且放在最后，所以<code\n        class=\"language-plaintext highlighter-rouge\">Promise</code>在<code\n        class=\"language-plaintext highlighter-rouge\">script end</code>前面，而且在微任务（microtasks）里有宏任务（macrotask），macrotask\n      还是会依次被放到 Callback Queue 等待执行。</p>\n\n    <p>如果有 async await 呢？再来看一段代码：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"c1\">//请写出输出内容</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们知道 Promise 中的异步体现在 then 和 catch 中，所以写在 Promise 中的代码是被当做同步任务立即执行的。而在 async/await 中，在出现 await\n      出现之前，其中的代码也是立即执行的。那么出现了 await 时候发生了什么呢？</p>\n\n    <p>由于因为 async await 本身就是 promise+generator 的语法糖。所以 await 后面的代码是 microtask。所以对于上面代码中的</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\t<span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;</span>\n</code></pre>\n      </div>\n    </div>\n    <p>等价于：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\t<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">async2</span><span class=\"p\">()).</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">&#125;)</span>\n<span class=\"p\">&#125;</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们来看一个变式, 将 async2 中的函数也变成了 Promise 函数：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"c1\">//async2做出如下更改：</span>\n    <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">&#125;);</span>\n<span class=\"p\">&#125;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise3</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise4</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\npromise1\npromise3\nscript end\npromise2\nasync1 end\npromise4\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们再来看一个变式，将 async1 中 await 后面的代码和 async2 的代码都改为异步的，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"c1\">//更改如下：</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout1</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">&#125;,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"c1\">//更改如下：</span>\n\t<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\t<span class=\"p\">&#125;,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout3</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\npromise1\nscript end\npromise2\nsetTimeout3\nsetTimeout2\nsetTimeout1\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们再来看一个变式，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">a1</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a1 start</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"nx\">a2</span><span class=\"p\">()</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a1 end</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">a2</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;)</span>\n\n<span class=\"nx\">a1</span><span class=\"p\">()</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2.then</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;)</span>\n\n<span class=\"nx\">promise2</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise3</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">&#125;)</span>\n<span class=\"p\">&#125;)</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n\n<span class=\"cm\">/**\nscript start\na1 start\na2\npromise2\nscript end\npromise1\na1 end\npromise2.then\npromise3\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>参考资料：</p>\n    <ul>\n      <li><a class=\"link\"   href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loops\" >“Event loops”, section in HTML5\n          spec. <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n      <li><a class=\"link\"   href=\"https://vimeo.com/96425312\" >“Help, I’m stuck in an event-loop” by Philip Roberts (video). <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n    </ul>\n\n  </section>\n</article>","site":{"data":{}},"excerpt":"","more":"<a class=\"link\"   href=\"https://limeii.github.io/2019/05/js-eventloop\" >转载：JS：详解Event Loop运行机制 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>\n\n<article class=\"post-container post-container--single\" itemscope=\"\" itemtype=\"http://schema.org/BlogPosting\">\n  <header class=\"post-header\">\n    <h1 class=\"post-title\">JS：详解Event Loop运行机制</h1>\n  </header>\n\n  <section class=\"post\">\n    <p>在这篇文章中会介绍以下内容：</p>\n    <ul>\n      <li>\n        <p>engine runtime 和 call stack 简介（以 V8 引擎为例）</p>\n      </li>\n      <li>\n        <p>Event Loop 运行机制的详解</p>\n      </li>\n      <li>\n        <p>microtasks 和 macrotask 的执行顺序</p>\n      </li>\n    </ul>\n\n    <h2 id=\"engine-runtime-和-call-stack-简介\">engine runtime 和 call stack 简介</h2>\n\n    <p>在 chrome 浏览器和 nodejs 里都是用 V8 引擎解析和运行 JS 代码，我们先来看下 V8 引擎的简化图：</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop01.png\"\n                      alt=\"js-eventloop\" height=\"80%\" width=\"80%\"\n                ></p>\n\n    <p>上图中 Heap 是用来做内存分配，<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>是用来执行 JS 代码，由于 JS\n      是单线程所以只有一个<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>。实际我们写网页开发的时候，除了一些 JS\n      代码，我们还会大量用到：DOM 事件、AJAX(XMLHttpRequest)、setTimeout 等等一些异步事件。从上图可以看出，这些异步事件都没有在 V8 引擎里，事实上这些异步事件不属于 V8\n      引擎，而是属于浏览器，并且 DOM 事件、AJAX(XMLHttpRequest)、setTimeout 都分别有单独的线程来处理。由于<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>执行（JS 运行线程）和页面渲染线程是互斥的，如果所有的事情都由 V8\n      引擎处理，这样肯定会导致页面卡顿。</p>\n\n    <p>浏览器多线程和 callback 机制完美避免了页面卡顿的问题。DOM 事件、AJAX(XMLHttpRequest)、setTimeout 这些异步事件在各自单独的线程处理完以后，每个异步事件都有 callback\n      回调函数，V8 引擎再把这些回调函数放在<code class=\"language-plaintext highlighter-rouge\">Call Stack</code>执行。上述整个运行机制可以称为是\n      runtime，可以简化如下图：</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop02.png\"\n                      alt=\"js-eventloop\" height=\"80%\" width=\"80%\"\n                ></p>\n\n    <p>如上图所示，web 异步事件结束以后，会有 callback，然后 runtime 把这些 callback 事件放到<code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>里，一旦<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>所有的方法都执行完以后，<code\n        class=\"language-plaintext highlighter-rouge\">Event Loop</code>会依次把 <code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>里的回调函数放到<code\n        class=\"language-plaintext highlighter-rouge\">Call Stack</code>里执行。</p>\n\n    <h2 id=\"event-loop-运行机制的详解\">Event Loop 运行机制的详解</h2>\n\n    <p>Event Loop 实际上就是一个 job，用来检测 Call Stack 和 Callback Queue，一旦 Call Stack 里代码执行完以后，就会把 Callback Queue 里第一个 callback\n      函数放到 Call Stack 里执行。我们来看个例子：</p>\n\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n      </div>\n    </div>\n    <p>运行运行结果如下:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code>script start\nscript end\nsetTimeout\n</code></pre>\n      </div>\n    </div>\n    <p>我们具体一步一步看下整个流程：</p>\n\n    <p>1，代码没有运行之前，<code class=\"language-plaintext highlighter-rouge\">Call Stack</code> <code\n        class=\"language-plaintext highlighter-rouge\">Callback Queue</code>都是空的</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop03.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>2，把<code class=\"language-plaintext highlighter-rouge\">console.log('script start')</code>加到 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop04.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>3，执行<code class=\"language-plaintext highlighter-rouge\">console.log('script start')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">script start</code>，执行结束后把它移出 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop05.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>4，把 setTimeout 放到 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop06.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>5, 执行 setTimeout，用 setTimout 线程执行 timeout 时间，Call Stack 中 setTimeout 执行结束，把它移出 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop07.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>6, 把<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>加到 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop08.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>7，执行<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">script end</code></p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop09.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>8，<code class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop10.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>9，1000毫秒以后，计时结束，把 callback<code class=\"language-plaintext highlighter-rouge\">cb1</code>函数放到 Callback Queue 里</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop11.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>10，此时 Callback Stack 是空的，Event Loop 把 cb1 拿到 Callback Stack 里</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop12.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>11，执行 cb1，cb1 里有<code class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>，把<code\n        class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>放到 Call Stack 里</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop13.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>12，执行<code class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>，在 console 里打印出<code\n        class=\"language-plaintext highlighter-rouge\">setTimeout</code>，<code\n        class=\"language-plaintext highlighter-rouge\">console.log('setTimeout')</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop14.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>13，<code class=\"language-plaintext highlighter-rouge\">cb1</code>执行结束，把它移出 Call Stack</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop15.png\"\n                      alt=\"js-eventloop\" height=\"60%\" width=\"60%\"\n                ></p>\n\n    <p>总结来说就是，JS 是单线程的，只有一个 Call Stack，浏览器是多线程的，并且 DOM 事件、AJAX(XMLHttpRequest)、setTimeout\n      都是有单独的线程处理。在这些异步事件结束，runtime会把它们的 callback 按顺序放到 Callback Queue 里，Event Loop 会检测 Call Stack，一旦它为空，就会把 Callback\n      Queue 里的回调函数依次放到 Call Stack 里执行，直到 Callback Queue 为空。</p>\n\n    <h2 id=\"microtasks-和-macrotask-的执行顺序\">microtasks 和 macrotask 的执行顺序</h2>\n\n    <p>刚才用 setTimeout 为例，解释了JS中 Event Loop 机制是怎么运行的，也提到过 runtime 会把回调函数依次按时间先后顺序放到 Callback Queue 里，然后 Event Loop\n      再依次把这些回调函数放到 Call Stack 里运行。我们在浏览器 Console 运行以下代码，看下结果：</p>\n\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n      </div>\n    </div>\n    <p>执行结果如下：</p>\n\n    <div class=\"language-plaintext highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code>script start\nscript end\npromise1\npromise2\nsetTimeout\n</code></pre>\n      </div>\n    </div>\n    <blockquote>\n      <p>\n        上述代码虽然 setTimeout 延时为0，其实还是异步的。因为H5标准规定 setTimeout 函数的第二个参数不能小于4毫秒，不足会自动增加。\n      </p>\n    </blockquote>\n\n    <p>setTimeout 和 promise 都是异步事件，而且setTimeout 写在 promise 之前，为什么 setTimeout 的回调要比 promise 后执行呢？那是因为 promise\n      属于微任务（microtasks）而 setTimeout 属于宏任务（macrotask），微任务（microtasks）的优先级要高于宏任务（macrotask）。</p>\n\n    <p>首先我们需要明白以下几件事情：</p>\n    <ul>\n      <li>JS 分为同步任务和异步任务</li>\n      <li>同步任务都在主线程上执行，形成一个执行栈</li>\n      <li>主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li>\n      <li>一旦执行栈中的所有同步任务执行完毕（此时JS引擎空闲），系统就会读取任务队列，将可运行的异步任务添加到可执行栈中，开始执行。</li>\n    </ul>\n\n    <p>根据规范，事件循环是通过任务队列的机制来进行协调的。一个 Event Loop 中，可以有一个或者多个任务队列(task queue)，一个任务队列便是一系列有序任务(task)的集合；每个任务都有一个任务源(task\n      source)，源自同一个任务源的 task 必须放到同一个任务队列，从不同源来的则被添加到不同队列。 setTimeout/Promise 等 API 便是任务源，而进入任务队列的是他们指定的具体执行任务。</p>\n\n    <p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop16.png\"\n                      alt=\"js-eventloop\"\n                ></p>\n\n    <p>Callback Queue（Task Queue）里的回调事件称为宏任务（macrotask），每次异步事件结束后，它们的回调函数会依次按时间顺序放在 Callback Queue 里，等待 Event Loop\n      依次把它们放到 Call Stack 里执行。比如：<code class=\"language-plaintext highlighter-rouge\">setInterval</code> <code\n        class=\"language-plaintext highlighter-rouge\">setTimeout</code> <code\n        class=\"language-plaintext highlighter-rouge\">script</code> <code\n        class=\"language-plaintext highlighter-rouge\">setImmediate</code> <code\n        class=\"language-plaintext highlighter-rouge\">I/O</code> <code\n        class=\"language-plaintext highlighter-rouge\">UI rendering</code>就是宏任务（macrotask）。</p>\n\n    <p>微任务（microtasks）是指异步事件结束后，回调函数不会放到 Callback Queue，而是放到一个微任务队列里（Microtasks Queue），在 Call Stack 为空时，Event Loop\n      会先查看微任务队列里是否有任务，如果有就会先执行微任务队列里的回调事件；如果没有微任务，才会到 Callback Queue 执行回到事件。比如：<code\n        class=\"language-plaintext highlighter-rouge\">promise</code> <code\n        class=\"language-plaintext highlighter-rouge\">process.netTick</code> <code\n        class=\"language-plaintext highlighter-rouge\">Object.observe</code> <code\n        class=\"language-plaintext highlighter-rouge\">MutationObserver</code>就是微任务（microtasks）。</p>\n\n    <blockquote>\n      <p>\n        在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。\n      </p>\n    </blockquote>\n\n    <p>整个 Event Loop 的执行顺序如下：</p>\n    <ul>\n      <li>执行一个宏任务（栈中没有就从事件队列中获取）</li>\n      <li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>\n      <li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>\n      <li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li>\n      <li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取，也就是 callbacke queue）</li>\n    </ul>\n\n    <p>流程图如下：\n      <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"./js-eventloop17.jpg\"\n                      alt=\"js-eventloop\" height=\"40%\" width=\"40%\"\n                >\n    </p>\n\n    <p>我们再把代码改一下，在创建 promise 的时候，加一行<code\n        class=\"language-plaintext highlighter-rouge\">console.log('Promise')</code>，而且在第一个 promise resolve 的时候再加一个\n      setTimeout，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Promise</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout in promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nPromise\nscript end\npromise1\npromise2\nsetTimeout\nsetTimeout in promise1\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p><code class=\"language-plaintext highlighter-rouge\">console.log('Promise')</code>在这里是同步代码，<code\n        class=\"language-plaintext highlighter-rouge\">console.log('script end')</code>是同步代码且放在最后，所以<code\n        class=\"language-plaintext highlighter-rouge\">Promise</code>在<code\n        class=\"language-plaintext highlighter-rouge\">script end</code>前面，而且在微任务（microtasks）里有宏任务（macrotask），macrotask\n      还是会依次被放到 Callback Queue 等待执行。</p>\n\n    <p>如果有 async await 呢？再来看一段代码：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"c1\">//请写出输出内容</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们知道 Promise 中的异步体现在 then 和 catch 中，所以写在 Promise 中的代码是被当做同步任务立即执行的。而在 async/await 中，在出现 await\n      出现之前，其中的代码也是立即执行的。那么出现了 await 时候发生了什么呢？</p>\n\n    <p>由于因为 async await 本身就是 promise+generator 的语法糖。所以 await 后面的代码是 microtask。所以对于上面代码中的</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\t<span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;</span>\n</code></pre>\n      </div>\n    </div>\n    <p>等价于：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\t<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">async2</span><span class=\"p\">()).</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">&#125;)</span>\n<span class=\"p\">&#125;</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们来看一个变式, 将 async2 中的函数也变成了 Promise 函数：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"c1\">//async2做出如下更改：</span>\n    <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">&#125;);</span>\n<span class=\"p\">&#125;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise3</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise4</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\npromise1\npromise3\nscript end\npromise2\nasync1 end\npromise4\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们再来看一个变式，将 async1 中 await 后面的代码和 async2 的代码都改为异步的，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async1</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">async1 start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">async2</span><span class=\"p\">();</span>\n    <span class=\"c1\">//更改如下：</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout1</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">&#125;,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">async2</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"c1\">//更改如下：</span>\n\t<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\t<span class=\"p\">&#125;,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout3</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">async1</span><span class=\"p\">();</span>\n\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n<span class=\"p\">&#125;).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/**\nscript start\nasync1 start\npromise1\nscript end\npromise2\nsetTimeout3\nsetTimeout2\nsetTimeout1\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>我们再来看一个变式，代码如下：</p>\n    <div class=\"language-js highlighter-rouge\">\n      <div class=\"highlight\">\n        <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">a1</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a1 start</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"nx\">a2</span><span class=\"p\">()</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a1 end</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">a2</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script start</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">setTimeout</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise1</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;)</span>\n\n<span class=\"nx\">a1</span><span class=\"p\">()</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2.then</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise2</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;)</span>\n\n<span class=\"nx\">promise2</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">promise3</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">&#125;)</span>\n<span class=\"p\">&#125;)</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">script end</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n\n<span class=\"cm\">/**\nscript start\na1 start\na2\npromise2\nscript end\npromise1\na1 end\npromise2.then\npromise3\nsetTimeout\n**/</span>\n</code></pre>\n      </div>\n    </div>\n\n    <p>参考资料：</p>\n    <ul>\n      <li><a class=\"link\"   href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loops\" >“Event loops”, section in HTML5\n          spec. <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n      <li><a class=\"link\"   href=\"https://vimeo.com/96425312\" >“Help, I’m stuck in an event-loop” by Philip Roberts (video). <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n    </ul>\n\n  </section>\n</article>"},{"title":"【一些有趣的问题】02，事件循环","date":"2021-02-25T02:15:54.000Z","_content":"\n`以下语句会如何输出？`\n```javascript\nconsole.log('start')\n\nsetTimeout(() => {\n  console.log('setTimeout')\n}, 0)\n\nnew Promise((resolve) => {\n  console.log('promise')\n  resolve()\n})\n  .then(() => {\n    console.log('then1')\n  })\n  .then(() => {\n    console.log('then2')\n  })\n\nconsole.log('end')\n```\n\n结果：打印 start promise end then1 then2 setTimeout\n\n原因：简单来说，JS 代码的执行顺序为：同步代码-->异步代码（微任务-->宏任务）\n\n分析：\n\n1. 打印 start\n\n2. setTimeout 加入消息队列\n\n3. new Promise 的同步部分执行，打印 promise，then 部分加入消息队列\n\n4. 打印 end\n\n5. 消息队列中先处理微任务 then 的部分，打印 then1，then2\n\n6. 消息队列处理宏任务 setTimeout，打印 setTimeout\n\n## `参考资料`\n> [并发模型与事件循环](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n>\n> [深入理解 js 事件循环机制（浏览器篇）](http://lynnelv.github.io/js-event-loop-browser)\n","source":"_posts/someInterestingQuestions02.md","raw":"---\ntitle: 【一些有趣的问题】02，事件循环\ndate: 2021-02-25 10:15:54\ntags: [JS]\ncategories: [一些有趣的问题]\n---\n\n`以下语句会如何输出？`\n```javascript\nconsole.log('start')\n\nsetTimeout(() => {\n  console.log('setTimeout')\n}, 0)\n\nnew Promise((resolve) => {\n  console.log('promise')\n  resolve()\n})\n  .then(() => {\n    console.log('then1')\n  })\n  .then(() => {\n    console.log('then2')\n  })\n\nconsole.log('end')\n```\n\n结果：打印 start promise end then1 then2 setTimeout\n\n原因：简单来说，JS 代码的执行顺序为：同步代码-->异步代码（微任务-->宏任务）\n\n分析：\n\n1. 打印 start\n\n2. setTimeout 加入消息队列\n\n3. new Promise 的同步部分执行，打印 promise，then 部分加入消息队列\n\n4. 打印 end\n\n5. 消息队列中先处理微任务 then 的部分，打印 then1，then2\n\n6. 消息队列处理宏任务 setTimeout，打印 setTimeout\n\n## `参考资料`\n> [并发模型与事件循环](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n>\n> [深入理解 js 事件循环机制（浏览器篇）](http://lynnelv.github.io/js-event-loop-browser)\n","slug":"someInterestingQuestions02","published":1,"updated":"2023-02-21T12:28:34.588Z","_id":"cle8bsvfw000ej0h8hxd6hddm","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then1&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then2&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>结果：打印 start promise end then1 then2 setTimeout</p>\n<p>原因：简单来说，JS 代码的执行顺序为：同步代码–&gt;异步代码（微任务–&gt;宏任务）</p>\n<p>分析：</p>\n<ol>\n<li><p>打印 start</p>\n</li>\n<li><p>setTimeout 加入消息队列</p>\n</li>\n<li><p>new Promise 的同步部分执行，打印 promise，then 部分加入消息队列</p>\n</li>\n<li><p>打印 end</p>\n</li>\n<li><p>消息队列中先处理微任务 then 的部分，打印 then1，then2</p>\n</li>\n<li><p>消息队列处理宏任务 setTimeout，打印 setTimeout</p>\n</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><blockquote>\n<p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" >并发模型与事件循环 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"http://lynnelv.github.io/js-event-loop-browser\" >深入理解 js 事件循环机制（浏览器篇） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then1&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then2&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>结果：打印 start promise end then1 then2 setTimeout</p>\n<p>原因：简单来说，JS 代码的执行顺序为：同步代码–&gt;异步代码（微任务–&gt;宏任务）</p>\n<p>分析：</p>\n<ol>\n<li><p>打印 start</p>\n</li>\n<li><p>setTimeout 加入消息队列</p>\n</li>\n<li><p>new Promise 的同步部分执行，打印 promise，then 部分加入消息队列</p>\n</li>\n<li><p>打印 end</p>\n</li>\n<li><p>消息队列中先处理微任务 then 的部分，打印 then1，then2</p>\n</li>\n<li><p>消息队列处理宏任务 setTimeout，打印 setTimeout</p>\n</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><blockquote>\n<p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" >并发模型与事件循环 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"http://lynnelv.github.io/js-event-loop-browser\" >深入理解 js 事件循环机制（浏览器篇） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n"},{"title":"【转载】Vue Composition API","date":"2022-06-22T07:30:57.000Z","_content":"\n## 转载：Composition API - 前端知识库的文章 - 知乎 https://zhuanlan.zhihu.com/p/408272742\n\n<div class=\"RichText ztext Post-RichText css-1g0fqss\" options=\"[object Object]\">\n  <h2 data-first-child=\"\">前言 </h2>\n  <p data-pid=\"d-p163wy\">关注 React 的同学应该知道，React 在 19 年推出了 Hooks API，从而可以抛弃难以理解的 class\n    完全转向函数式组件。当然，它对开发者的意义不止于此，更为重要的是它提供了从组件中<b>提取状态逻辑</b>的能力，让我们能以业务逻辑为细粒度拆分组件，并在组件之间复用业务逻辑。 </p>\n  <p data-pid=\"lloIgxso\">后续尤大马上发布了 Vue Function-based API RFC（在之后重写成了 Composition API），并作为 Vue3 的核心特性，可想而知它的重要性。 </p>\n  <p data-pid=\"vYRnkATX\">接下来让我们抛开 React，来看看 Composition API 都有哪些内容。 </p>\n  <h2>一、介绍 </h2>\n  <p data-pid=\"B39fLDrP\"><b>1.1 什么是 Composition API ？ </b></p>\n  <p data-pid=\"Rm3abSlN\">Vue 3 中引入的一种新的编写 Vue 组件的方式，可以将 2.x 中与组件逻辑相关的选项以 API 函数的形式重新设计。 </p>\n  <p data-pid=\"x_L4YJEQ\"><b>1.2 基本例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1884\" data-rawheight=\"1240\" class=\"origin_image zh-lightbox-thumb\" width=\"1884\"\n      data-original=\"https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"80OXzjAb\">我们使用 Composition API 对左侧进行重构，其实就是将组件选项抽离到了 <code>setup</code>\n    函数当中进行编排，并在最后把模板用到的变量返回，最后的结果和将变量定义在 <code>data</code> 或者 <code>methods</code> 中没有什么区别。 </p>\n  <p data-pid=\"zUbcTqvG\">当然，setup 和 2.x 的选项一起混用也是没有问题的，并且依旧可以通过 <code>this.xx</code> 访问到 <code>setup</code> 返回的变量。</p>\n  <blockquote data-pid=\"yCWHp3ur\">❓ 如果只是把代码迁移到 <code>setup</code> 函数中，变成一长条的面条式代码，有什么意义呢 </blockquote>\n  <p data-pid=\"__ovLorF\"><b>1.3 更进一步的例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"1204\" class=\"origin_image zh-lightbox-thumb\" width=\"936\"\n      data-original=\"https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_r.jpg\"></figure>\n  <p data-pid=\"3Plt6P_5\">这一次我们将 <code>setup</code> 中的代码进一步抽离，拆出了 <code>useMouse</code>\n    组合函数，里面封装了对鼠标位置的监听逻辑。<code>useMouse</code>\n    只需要将要暴露给组件的状态（<code>x</code>、<code>y</code>）以响应式的数据源的方式返回出来，就可以在我们的组件代码中使用。 </p>\n  <p data-pid=\"SLR82yO4\">对于 Component 来说，里面没有任何监听鼠标位置的逻辑代码，只需要调用 <code>useMouse</code> 拿到 <code>x</code>、<code>y</code>\n    即可。</p>\n  <blockquote data-pid=\"jfosxkhU\">❓ 这些我用 Mixins 也能实现呀 </blockquote>\n  <p data-pid=\"ba4NQEDI\"><b>1.4 更更进一步的例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1532\" data-rawheight=\"1384\" class=\"origin_image zh-lightbox-thumb\" width=\"1532\"\n      data-original=\"https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"xHhwJpIi\">首先我们通过模板来理解 <code>useDark</code> 的工作内容，就是返回了一个表示是否是黑夜模式的布尔值，并且可以通过 <code>useToggle</code>\n    来快速得到一个 toggle 函数。 </p>\n  <p data-pid=\"nmV5YoSR\">然后观察 <code>useDark</code>，我们可以看到它身为一个组合函数的同时，又调用了其他的组合函数 <code>usePreferredDark</code> 和\n    <code>useLocalStorage</code> 来获取系统主题色和本地配置色。当然，我们不需要太关心它们的具体实现，只需要专注于处理结果，并返回以本地配置色为优先的结果即可。\n  </p>\n  <p data-pid=\"C6hZ8F1F\">其中的组合函数调用关系如下图所示： </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1678\" data-rawheight=\"730\" class=\"origin_image zh-lightbox-thumb\" width=\"1678\"\n      data-original=\"https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"J4AYoGK8\">组合函数的底层又依赖了其他组合函数，比如 <code>useLocalStorage</code> 依赖统一封装了 SessionStorage 和 LocalStorage 逻辑的\n    <code>useStorage</code>，<code>usePreferredDark</code> 依赖封装了 <code>window.matchMedia</code> 逻辑的\n    <code>useMediaQuery</code>。它们最后又都通过 <code>useEventListener</code> 来做状态改变的响应，并且能自动卸载。\n  </p>\n  <p data-pid=\"jqJ6ebx1\">涉及的每一个函数都能独立使用，并且有自己的职责，最后进行组合。 </p>\n  <blockquote data-pid=\"08iizr0U\">这个例子来源于 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/vueuse/vueuse\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">VueUse</a>.\n  </blockquote>\n  <p data-pid=\"WuMdyX-p\">当然，我们不可能总是写到这么通用的代码，但是在业务中也可以使用 Composition API 来对业务逻辑进行拆分，让每一个组合函数负责独立的业务，比如埋点上报、RichTextPanel\n    组件参数与回调、页面控件逻辑等。这些组件内的状态、方法现在我们可以将它提取到组合函数中，可以是为了复用，也可以仅仅是为了让 .vue 文件看起来更干净。</p>\n  <h2>二、API </h2>\n  <p data-pid=\"0PsR029O\"><b>2.1 setup </b></p>\n  <p data-pid=\"FdBMQSTF\"><code>setup</code> 是组合式 API 的入口点，它的执行时机在 <code>beforeCreate</code> 和\n    <code>created</code>，并且只会执行一次。\n  </p>\n  <p data-pid=\"8emt6Qmd\">所以我们不需要 <code>onBeforeCreate</code> 和 <code>onCreated</code>，这些钩子对应的代码应该直接在 <code>setup</code>\n    函数中编写。 </p>\n  <p data-pid=\"-PkOkw14\">它接收两个参数： </p>\n  <ol>\n    <li data-pid=\"PzoT1YH8\">响应式的 <code>props</code> </li>\n    <li data-pid=\"En2tDX8_\">非响应式的 <code>context</code>，包含：attrs、slots、emit </li>\n  </ol>\n  <p data-pid=\"IeEBiCS8\">它执行的时候组件实例尚未被创建，所以我们无法访问 data、computed、methods 这些组件选项。 </p>\n  <p data-pid=\"JlJyHhSo\">如果它返回一个对象，那么对象的 property 就可以在选项或者模板中访问到。 </p>\n  <p data-pid=\"pCqoAluV\"><b>2.1.1 返回渲染函数 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1088\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"1088\"\n      data-original=\"https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_r.jpg\"></figure>\n  <p data-pid=\"yc8vp9x5\">在 Babel Plugin 支持下可以返回 JSX：<a\n      href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/jsx/pull/142\" class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">feat: add @vue/composition-api support\n      #142</a> </p>\n  <p data-pid=\"4iqS02eC\"><b>2.1.2 getCurrentInstance </b></p>\n  <p data-pid=\"jphaZDki\">如果确实需要访问组件实例，可以使用 <code>getCurrentInstance()</code>。 </p>\n  <p data-pid=\"X2DJAAWy\">只能在 <code>setup</code>、生命周期钩子和组合函数中使用。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"970\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"970\"\n      data-original=\"https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_r.jpg\"></figure>\n  <p data-pid=\"tKx1A6sw\"><b>2.2 reactive </b></p>\n  <p data-pid=\"EXN2rHlJ\">返回对象的响应式副本，相当于 <code>Vue.observable(obj)</code> 。 </p>\n  <p data-pid=\"XRwILD4j\">该响应式转换是“深度转换”——它会影响嵌套对象传递的所有 property。 </p>\n  <p data-pid=\"YTfRw30Y\">怎么理解这里的响应式呢？就是我们在渲染期间使用响应式对象，当值改变的时候视图会自动更新，就和修改挂在 data 对象里的值一样。 </p>\n  <p data-pid=\"Chdt9Vul\"><b>2.2.1 无法代理原始值类型 </b></p>\n  <p data-pid=\"6Qo8VckW\">reactive() 函数可以代理一个对象，但不能代理基本类型值，这是因为原始值类型只有值而没有引用，无法追踪变量的后续变化。 </p>\n  <p data-pid=\"i_6Q-8R3\"><b>2.2.2 响应丢失 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1008\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"1008\"\n      data-original=\"https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_r.jpg\"></figure>\n  <p data-pid=\"pAx7_aPR\"><b>2.3 ref </b></p>\n  <p data-pid=\"E96TTVJ_\">接收一个值，返回的响应式且可变的包装对象。 </p>\n  <p data-pid=\"xmCIrvO9\">它只有一个属性：<code>.value</code> ，该属性指向内部被包装的值。这个值可以直接修改。 </p>\n  <blockquote data-pid=\"OgJesy_I\">我们没法用 reactive 处理原始值类型，但是我们可以创建一个对象将原始值挂在它的同名 property 下，再传递给 reactive。Vue 提供了 ref\n    来替我们做这件事。 </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"800\"\n      data-original=\"https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_r.jpg\"></figure>\n  <p data-pid=\"Q7Uideqn\"><b>2.3.1 自动解包（不需要加 .value 的情况） </b></p>\n  <ol>\n    <li data-pid=\"g2srjh5V\">ref 在模板中会自动解包 </li>\n  </ol>\n  <p data-pid=\"nHaF68Z1\">2.<code>watch</code> 可以直接接受 ref 作为监听对象，在回调函数中会直接返回解包后的值。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"868\"\n      data-original=\"https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_r.jpg\"></figure>\n  <p data-pid=\"BWQdWKOb\">3. 使用 reactive() / readonly() 解包对象嵌套的 ref </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"716\"\n      data-original=\"https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_r.jpg\"></figure>\n  <blockquote data-pid=\"zaIwbIj-\">但是从 <code>Array</code> 或原生集合类型如 <code>Map</code>访问 ref 时，不会进行解包。</blockquote>\n  <p data-pid=\"e4NmHN9d\"><b>2.3.2 unref（ref 的反向操作） </b></p>\n  <p data-pid=\"snoUo1ZM\">传入一个 ref，返回 <code>ref.value</code>，否则原样返回。 </p>\n  <blockquote data-pid=\"o7iXv9Gs\">纠结是否需要加 <code>.value</code>（比如某个函数参数的类型是\n    <code>Ref&lt;number&gt; | number</code>）来取值，可以使用 unref 来解包。\n  </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"700\"\n      data-original=\"https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_r.jpg\"></figure>\n  <p data-pid=\"vHg0rpqg\"><b>2.3.3 重复使用已有 ref </b></p>\n  <p data-pid=\"liLqb6ff\">将一个 ref 传递给 <code>ref()</code> 构造函数，它会原样返回。 </p>\n  <blockquote data-pid=\"h1FrzDho\">如果你的函数需要返回一个 ref，但是不确定参数的类型，可以直接 <code>return ref(param)</code>，如果是 ref 则会复用，不是则返回一个新的\n    ref。 </blockquote>\n  <p data-pid=\"ueXBRAta\"><b>2.3.4 可以使用 ES6 解构语法 </b></p>\n  <p data-pid=\"7Qg9q4Wo\">解构一个值是 ref 的对象不会丢失响应式。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"744\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"744\"\n      data-original=\"https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_r.jpg\"></figure>\n  <p data-pid=\"bVu2MvPp\"><b>2.3.5 this.$refs 的解决方案 </b></p>\n  <p data-pid=\"sYcku75L\">在虚拟 DOM 补丁算法中，如果 VNode 的 <code>ref</code> 键对应于渲染上下文中的 ref，则 VNode 的相应元素或组件实例将被分配给该 ref 的值。 </p>\n  <blockquote data-pid=\"jYqAgu0k\">由于是在虚拟 DOM 挂载/打补丁过程中执行的，因此 ref 只会在初始渲染之后才获得赋值。 </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"1348\" class=\"origin_image zh-lightbox-thumb\" width=\"902\"\n      data-original=\"https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_r.jpg\"></figure>\n  <p data-pid=\"oCTH_fU2\"><b>2.4 toRefs </b></p>\n  <p data-pid=\"TZTJ9i_T\">将响应式对象转换为普通对象，并对每个 property 对应的 value 转换成 ref。 </p>\n  <p data-pid=\"2oWgFXua\">可以用来解决 <code>reactive</code> 或者 <code>props</code> 在解构的时候丢失响应式的问题。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1008\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"1008\"\n      data-original=\"https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_r.jpg\"></figure>\n  <p data-pid=\"YcVVmyxD\"><b>2.5 computed </b></p>\n  <p data-pid=\"STH_UE0l\">接收 getter 函数，返回一个<b>只读</b>的响应式 ref 对象。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"868\"\n      data-original=\"https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_r.jpg\"></figure>\n  <p data-pid=\"8GHIhOTL\">如果参数是具有 get 和 set 函数的对象，返回的结果会是一个<b>可写</b>的响应式 ref 对象。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"448\" class=\"origin_image zh-lightbox-thumb\" width=\"564\"\n      data-original=\"https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_r.jpg\"></figure>\n  <p data-pid=\"VVFGe_SE\"><b>2.6 watch </b></p>\n  <p data-pid=\"d64D5vN9\">第一个参数接收数据源，可以是： </p>\n  <ul>\n    <li data-pid=\"Tk3QbSoW\">getter 函数、ref </li>\n    <li data-pid=\"67gvpbE8\">包含上述两种类型的数组（也就是可以 watch 多个源，其中任一个变化都会触发回调） </li>\n  </ul>\n  <p data-pid=\"lIMaq9k1\">第二个参数是回调函数，在数据源变动的时候触发。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"520\" class=\"origin_image zh-lightbox-thumb\" width=\"752\"\n      data-original=\"https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_r.jpg\"></figure>\n  <p data-pid=\"6F0hGO5P\"><b>2.6.1 停止观察 </b></p>\n  <p data-pid=\"3v1JUsDo\"><code>watch()</code> 返回一个停止观察的函数： </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"464\"\n      data-original=\"https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_r.jpg\"></figure>\n  <p data-pid=\"JiYo5C3c\">如果 <code>watch()</code> 是在一个组件的 <code>setup()</code> 或是生命周期函数中被调用的，那么该 watcher\n    会在当前组件被销毁时也一同被自动停</p>\n  <p data-pid=\"IddzStMs\"><b>2.6.2 清理 effect </b></p>\n  <p data-pid=\"ZlB7P72W\">watcher 的回调会接收到的第三个参数是一个用来注册清理操作的函数。 </p>\n  <blockquote data-pid=\"GLeHCtBz\">有时候当观察的数据源变化后，我们可能需要对之前所执行的副作用进行清理。举例来说，一个异步操作在完成之前数据就产生了变化，我们可能要撤销还在等待的前一个操作。\n  </blockquote>\n  <p data-pid=\"yWDqqwZf\">调用这个函数可以注册一个清理函数，执行时机在： </p>\n  <ul>\n    <li data-pid=\"IqIvIe6s\">回调被下一次调用前 </li>\n    <li data-pid=\"lJAeV6sq\">watcher 被停止前 </li>\n  </ul>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb\" width=\"784\"\n      data-original=\"https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_r.jpg\"></figure>\n  <h2>三、设计动机 </h2>\n  <p data-pid=\"4kuIX-HO\"><b>3.1 从 Class API 到 Function API 再到 Composition API </b></p>\n  <p data-pid=\"MxQjNLEk\">我们可以在 Vue RFC 中看到最初的 <a\n      href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/17\" class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Class API</a> 到 <a\n      href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/42\" class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Function-based Component API</a> 取其 FP\n    的精华，再到被修订为 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/78\" class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Composition API</a> 采用 Reactivity 的过程。\n  </p>\n  <p data-pid=\"Nxz49j3D\"><b>3.2 解决了什么问题 </b></p>\n  <p data-pid=\"4qCnoHpH\">对比 2.x 对象式 API： </p>\n  <ul>\n    <li data-pid=\"tsAJKZRh\">极易复用。 </li>\n    <ul>\n      <li data-pid=\"J6TxQJgP\">状态可以从组件中拆出来放到组合函数中。 </li>\n    </ul>\n    <li data-pid=\"XNnV1qH2\">更清楚的逻辑。 </li>\n    <ul>\n      <li data-pid=\"3a9fzd7b\">代码可以按功能/逻辑组织，而不是分散在各个选项中。 </li>\n    </ul>\n    <li data-pid=\"6Yavg6-T\">更好的 TypeScript 类型支持。 </li>\n    <ul>\n      <li data-pid=\"0zXyXXu0\">基于 Class 的 API 存在 TS 类型问题，而基于函数的 API 天然对类型推导很友好，因为 TS 对函数的参数、返回值和泛型的支持已经非常完备。 </li>\n    </ul>\n    <li data-pid=\"t_7FHIx3\">更小的打包体积。 </li>\n    <ul>\n      <li data-pid=\"53fBlnTF\">基于函数的 API 每一个函数都可以作为 named ES export 被单独引入，这使得它们对 tree-shaking 非常友好。没有被使用的 API\n        的相关代码可以在最终打包时被移除。 </li>\n      <li data-pid=\"qTwuzRZq\">同时，基于函数 API 所写的代码也有更好的压缩效率，因为所有的函数名和 setup 函数体内部的变量名都可以被压缩，但对象和 class 的属性/方法名却不可以。</li>\n    </ul>\n  </ul>\n  <p data-pid=\"4OG0-W96\"><b>3.3 对比 2.x 的复用模式 </b></p>\n  <p data-pid=\"54CLk7Ni\">Vue 2.x 目前的 API 我们有一些常见的逻辑复用模式，包括： </p>\n  <ul>\n    <li data-pid=\"5CdKCo9R\">Mixins </li>\n    <li data-pid=\"uKjdCge1\">高阶组件 (Higher-order Components, aka HOCs) </li>\n    <li data-pid=\"JpSzfvFy\">Renderless Components （基于 scoped slots / 作用域插槽封装逻辑的组件） </li>\n  </ul>\n  <p data-pid=\"THz_2hk1\">总体来说，以上这些模式存在以下问题： </p>\n  <ul>\n    <li data-pid=\"u5nWdNNy\">模版中的数据来源不清晰。 </li>\n    <ul>\n      <li data-pid=\"JofMkOuo\">举例来说，当一个组件中使用了多个 mixin 的时候，光看模版会很难分清一个属性到底是来自哪一个 mixin。HOC 也有类似的问题。 </li>\n    </ul>\n    <li data-pid=\"Uu6popTc\">使用 Composition API 只需要观察 setup 函数就可以知道数据的来源。 </li>\n    <li data-pid=\"vJXVZcq_\">命名空间冲突。 </li>\n    <ul>\n      <li data-pid=\"srpLZS_S\">由不同开发者开发的 mixin 无法保证不会正好用到一样的属性或是方法名。HOC 在注入的 props 中也存在类似问题。 </li>\n    </ul>\n    <li data-pid=\"MnHS9JyT\">组合函数在使用和返回给渲染层的两个阶段都可以做重命名的操作。 </li>\n    <li data-pid=\"HvY9AAXD\">性能。 </li>\n    <ul>\n      <li data-pid=\"RsS4JaW_\">HOC 和 Renderless Components 都需要额外的组件实例嵌套来封装逻辑，导致无谓的性能开销。 </li>\n    </ul>\n    <li data-pid=\"Rx5iZc1D\">组合函数没有创建额外的组件实例所带来的性能损耗。</li>\n  </ul>\n  <p data-pid=\"XE-GZHF7\"><b>3.4 对比 React Hooks </b></p>\n  <p data-pid=\"Kqxc4Ygq\">Composition API 虽然借鉴了 React Hooks，两者具有同等的基于函数抽取和复用逻辑的能力，但是出于框架的性质两者在实现上是天差地别的。 </p>\n  <p data-pid=\"bmfO65Zo\">React Hooks 在每次组件渲染时都会调用，通过隐式地将状态挂载在当前的内部组件节点上，在下一次渲染时根据调用顺序取出。而 Vue 的 <code>setup()</code>\n    每个组件实例只会在初始化时调用一次 ，状态通过引用储存在 <code>setup()</code> 的闭包内。 </p>\n  <p data-pid=\"eIwmCeKN\"> 也就是说，Composition API 相比 React Hooks： </p>\n  <ul>\n    <li data-pid=\"xvul6_a6\">整体上更符合 JavaScript 的直觉； </li>\n    <ul>\n      <li data-pid=\"I-_5HxJR\">Mutable 写法。 </li>\n    </ul>\n    <li data-pid=\"Dbe9xIks\">不受调用顺序的限制，可以有条件地被调用； </li>\n    <ul>\n      <li data-pid=\"14d6KrXq\">Hooks 需要使用下标来获取对应的 state。 </li>\n    </ul>\n    <li data-pid=\"ITuR--Mc\">不会在后续更新时不断产生大量的内联函数而影响引擎优化或是导致 GC 压力； </li>\n    <ul>\n      <li data-pid=\"OCdzF7ke\">Hooks 的每次渲染都是单独的闭包。 </li>\n    </ul>\n    <li data-pid=\"sJud2Tht\">不需要总是使用 <code>useCallback</code> 来缓存传给子组件的回调以防止过度更新； </li>\n    <ul>\n      <li data-pid=\"MJOZSOIQ\">如果给子组件传了函数，每次渲染都会被当作新 props。 </li>\n    </ul>\n    <li data-pid=\"LaKlKgt_\">不需要担心传了错误的依赖数组给 <code>useEffect/useMemo/useCallback</code> 从而导致回调中使用了过期的值。 </li>\n    <ul>\n      <li data-pid=\"71dmEK53\">Vue 的依赖收集是全自动的，可以做到最小粒度的更新。 </li>\n    </ul>\n  </ul>\n  <p data-pid=\"xxxm1Mna\">这都是基于 Vue 的响应式更新能力。 </p>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <p data-pid=\"6wCLdS0z\">有兴趣的同学可以通过下面的链接了解 React Hooks 的心智模型有多么沉重： </p>\n  <p data-pid=\"dXcX4NpU\"><a\n      href=\"https://link.zhihu.com/?target=https%3A//zh-hans.reactjs.org/docs/hooks-faq.html%23from-classes-to-hooks\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Hooks FAQ</a> </p>\n  <p data-pid=\"1O7wFzO1\"><a\n      href=\"https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">使用 React Hooks 声明\n      setInterval</a> </p>\n  <p data-pid=\"tOfqa6Ta\"><a\n      href=\"https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/a-complete-guide-to-useeffect/\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">useEffect 完整指南</a>\n  </p>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <p data-pid=\"jW2h8EBi\"><b>3.5 那么它有缺点吗？ </b></p>\n  <p data-pid=\"ZAvsH4cw\"><b>3.5.1 ref 和 reactive 的区别 </b></p>\n  <table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\">\n    <thead style=\"background-color: gray;\">\n      <th>ref</th>\n      <th>reactive</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>可以处理原始值，也可以处理对象</td>\n        <td>只能处理对象</td>\n      </tr>\n      <tr>\n        <td>需要加 .value，需要考虑自动解包</td>\n        <td>不需要加 .value</td>\n      </tr>\n      <tr>\n        <td>有单独的类型</td>\n        <td>和普通的对象没有什么区别，无法直接通过类型判断是否是响应式</td>\n      </tr>\n      <tr>\n        <td>可以使用解构赋值</td>\n        <td>不可以使用解构赋值，会丢失响应式</td>\n      </tr>\n      <tr>\n        <td></td>\n        <td>需要使用箭头函数包装才能使用 watch</td>\n      </tr>\n    </tbody>\n  </table>\n  <p data-pid=\"aVtdgg6d\"><b>3.5.2 考虑响应式和 .value </b></p>\n  <p data-pid=\"mIuWJkq7\">虽然写 Composition API 不会有 <code>useEffect</code> 的困扰，还能使用完全一致的生命周期钩子函数，但是此次 Vue 把响应式 API\n    暴露给我们，实际上在编写代码的时候，需要考虑是否是响应式、是否是 ref 和响应式丢失的问题，也会带来一定的心智负担。 </p>\n  <h2>总结</h2>\n  <blockquote data-pid=\"dwydTu3z\"><b>面向生命周期编程 vs 面向业务逻辑编程</b> <br>Composition API\n    带来了组件逻辑抽取和复用的优化，抽取逻辑会变得非常简单，所以我们不必只在需要复用逻辑的时候才抽取函数，也可以单纯为了更好地组织代码去抽取函数，以此避免每个逻辑任务的代码都被选项切成了多个碎片分散在各处。\n    <br>当然如果组件足够简单，我们还是可以只使用 Options API，以原来的习惯写代码。\n  </blockquote>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <blockquote data-pid=\"nZaUCgyk\"><b>我可以在 Vue 2 中使用吗？</b> <br>可以的，官方团队提供了可供 Vue 2 使用的插件： <a\n      href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/composition-api\" class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">@vue/composition-api</a>。 <br>另外他们也计划让\n    Composition API 在 Vue 2.7 原生支持。</blockquote>\n  <h2>参考 </h2>\n  <p data-pid=\"0nG5Lg4p\"><a\n      href=\"https://link.zhihu.com/?target=https%3A//v3.cn.vuejs.org/guide/composition-api-introduction.html%23%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E7%25BB%2584%25E5%2590%2588%25E5%25BC%258F-api\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">官方文档</a> </p>\n  <p data-pid=\"CEjDQuk6\"><a href=\"https://zhuanlan.zhihu.com/p/68477600\" class=\"internal\"\n      data-za-detail-view-id=\"1043\">Vue Function-based API RFC</a> </p>\n  <p data-pid=\"PF0H7EFU\"><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1x54y1V7H6/\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">VueUse 作者 Anthony\n      Fu 分享可组合的 Vue</a> </p>\n  <p data-pid=\"cxCCci-C\"><a href=\"https://zhuanlan.zhihu.com/p/146097763\" class=\"internal\"\n      data-za-detail-view-id=\"1043\">深入理解 Vue3 Reactivity API</a> </p>\n</div>","source":"_posts/ReprintVueCompositionAPI.html","raw":"---\ntitle: 【转载】Vue Composition API\ndate: 2022-06-22 15:30:57\ntags: [vue]\ncategories: [转载]\n---\n\n## 转载：Composition API - 前端知识库的文章 - 知乎 https://zhuanlan.zhihu.com/p/408272742\n\n<div class=\"RichText ztext Post-RichText css-1g0fqss\" options=\"[object Object]\">\n  <h2 data-first-child=\"\">前言 </h2>\n  <p data-pid=\"d-p163wy\">关注 React 的同学应该知道，React 在 19 年推出了 Hooks API，从而可以抛弃难以理解的 class\n    完全转向函数式组件。当然，它对开发者的意义不止于此，更为重要的是它提供了从组件中<b>提取状态逻辑</b>的能力，让我们能以业务逻辑为细粒度拆分组件，并在组件之间复用业务逻辑。 </p>\n  <p data-pid=\"lloIgxso\">后续尤大马上发布了 Vue Function-based API RFC（在之后重写成了 Composition API），并作为 Vue3 的核心特性，可想而知它的重要性。 </p>\n  <p data-pid=\"vYRnkATX\">接下来让我们抛开 React，来看看 Composition API 都有哪些内容。 </p>\n  <h2>一、介绍 </h2>\n  <p data-pid=\"B39fLDrP\"><b>1.1 什么是 Composition API ？ </b></p>\n  <p data-pid=\"Rm3abSlN\">Vue 3 中引入的一种新的编写 Vue 组件的方式，可以将 2.x 中与组件逻辑相关的选项以 API 函数的形式重新设计。 </p>\n  <p data-pid=\"x_L4YJEQ\"><b>1.2 基本例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1884\" data-rawheight=\"1240\" class=\"origin_image zh-lightbox-thumb\" width=\"1884\"\n      data-original=\"https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"80OXzjAb\">我们使用 Composition API 对左侧进行重构，其实就是将组件选项抽离到了 <code>setup</code>\n    函数当中进行编排，并在最后把模板用到的变量返回，最后的结果和将变量定义在 <code>data</code> 或者 <code>methods</code> 中没有什么区别。 </p>\n  <p data-pid=\"zUbcTqvG\">当然，setup 和 2.x 的选项一起混用也是没有问题的，并且依旧可以通过 <code>this.xx</code> 访问到 <code>setup</code> 返回的变量。</p>\n  <blockquote data-pid=\"yCWHp3ur\">❓ 如果只是把代码迁移到 <code>setup</code> 函数中，变成一长条的面条式代码，有什么意义呢 </blockquote>\n  <p data-pid=\"__ovLorF\"><b>1.3 更进一步的例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"1204\" class=\"origin_image zh-lightbox-thumb\" width=\"936\"\n      data-original=\"https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_r.jpg\"></figure>\n  <p data-pid=\"3Plt6P_5\">这一次我们将 <code>setup</code> 中的代码进一步抽离，拆出了 <code>useMouse</code>\n    组合函数，里面封装了对鼠标位置的监听逻辑。<code>useMouse</code>\n    只需要将要暴露给组件的状态（<code>x</code>、<code>y</code>）以响应式的数据源的方式返回出来，就可以在我们的组件代码中使用。 </p>\n  <p data-pid=\"SLR82yO4\">对于 Component 来说，里面没有任何监听鼠标位置的逻辑代码，只需要调用 <code>useMouse</code> 拿到 <code>x</code>、<code>y</code>\n    即可。</p>\n  <blockquote data-pid=\"jfosxkhU\">❓ 这些我用 Mixins 也能实现呀 </blockquote>\n  <p data-pid=\"ba4NQEDI\"><b>1.4 更更进一步的例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1532\" data-rawheight=\"1384\" class=\"origin_image zh-lightbox-thumb\" width=\"1532\"\n      data-original=\"https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"xHhwJpIi\">首先我们通过模板来理解 <code>useDark</code> 的工作内容，就是返回了一个表示是否是黑夜模式的布尔值，并且可以通过 <code>useToggle</code>\n    来快速得到一个 toggle 函数。 </p>\n  <p data-pid=\"nmV5YoSR\">然后观察 <code>useDark</code>，我们可以看到它身为一个组合函数的同时，又调用了其他的组合函数 <code>usePreferredDark</code> 和\n    <code>useLocalStorage</code> 来获取系统主题色和本地配置色。当然，我们不需要太关心它们的具体实现，只需要专注于处理结果，并返回以本地配置色为优先的结果即可。\n  </p>\n  <p data-pid=\"C6hZ8F1F\">其中的组合函数调用关系如下图所示： </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1678\" data-rawheight=\"730\" class=\"origin_image zh-lightbox-thumb\" width=\"1678\"\n      data-original=\"https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"J4AYoGK8\">组合函数的底层又依赖了其他组合函数，比如 <code>useLocalStorage</code> 依赖统一封装了 SessionStorage 和 LocalStorage 逻辑的\n    <code>useStorage</code>，<code>usePreferredDark</code> 依赖封装了 <code>window.matchMedia</code> 逻辑的\n    <code>useMediaQuery</code>。它们最后又都通过 <code>useEventListener</code> 来做状态改变的响应，并且能自动卸载。\n  </p>\n  <p data-pid=\"jqJ6ebx1\">涉及的每一个函数都能独立使用，并且有自己的职责，最后进行组合。 </p>\n  <blockquote data-pid=\"08iizr0U\">这个例子来源于 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/vueuse/vueuse\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">VueUse</a>.\n  </blockquote>\n  <p data-pid=\"WuMdyX-p\">当然，我们不可能总是写到这么通用的代码，但是在业务中也可以使用 Composition API 来对业务逻辑进行拆分，让每一个组合函数负责独立的业务，比如埋点上报、RichTextPanel\n    组件参数与回调、页面控件逻辑等。这些组件内的状态、方法现在我们可以将它提取到组合函数中，可以是为了复用，也可以仅仅是为了让 .vue 文件看起来更干净。</p>\n  <h2>二、API </h2>\n  <p data-pid=\"0PsR029O\"><b>2.1 setup </b></p>\n  <p data-pid=\"FdBMQSTF\"><code>setup</code> 是组合式 API 的入口点，它的执行时机在 <code>beforeCreate</code> 和\n    <code>created</code>，并且只会执行一次。\n  </p>\n  <p data-pid=\"8emt6Qmd\">所以我们不需要 <code>onBeforeCreate</code> 和 <code>onCreated</code>，这些钩子对应的代码应该直接在 <code>setup</code>\n    函数中编写。 </p>\n  <p data-pid=\"-PkOkw14\">它接收两个参数： </p>\n  <ol>\n    <li data-pid=\"PzoT1YH8\">响应式的 <code>props</code> </li>\n    <li data-pid=\"En2tDX8_\">非响应式的 <code>context</code>，包含：attrs、slots、emit </li>\n  </ol>\n  <p data-pid=\"IeEBiCS8\">它执行的时候组件实例尚未被创建，所以我们无法访问 data、computed、methods 这些组件选项。 </p>\n  <p data-pid=\"JlJyHhSo\">如果它返回一个对象，那么对象的 property 就可以在选项或者模板中访问到。 </p>\n  <p data-pid=\"pCqoAluV\"><b>2.1.1 返回渲染函数 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1088\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"1088\"\n      data-original=\"https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_r.jpg\"></figure>\n  <p data-pid=\"yc8vp9x5\">在 Babel Plugin 支持下可以返回 JSX：<a\n      href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/jsx/pull/142\" class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">feat: add @vue/composition-api support\n      #142</a> </p>\n  <p data-pid=\"4iqS02eC\"><b>2.1.2 getCurrentInstance </b></p>\n  <p data-pid=\"jphaZDki\">如果确实需要访问组件实例，可以使用 <code>getCurrentInstance()</code>。 </p>\n  <p data-pid=\"X2DJAAWy\">只能在 <code>setup</code>、生命周期钩子和组合函数中使用。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"970\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"970\"\n      data-original=\"https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_r.jpg\"></figure>\n  <p data-pid=\"tKx1A6sw\"><b>2.2 reactive </b></p>\n  <p data-pid=\"EXN2rHlJ\">返回对象的响应式副本，相当于 <code>Vue.observable(obj)</code> 。 </p>\n  <p data-pid=\"XRwILD4j\">该响应式转换是“深度转换”——它会影响嵌套对象传递的所有 property。 </p>\n  <p data-pid=\"YTfRw30Y\">怎么理解这里的响应式呢？就是我们在渲染期间使用响应式对象，当值改变的时候视图会自动更新，就和修改挂在 data 对象里的值一样。 </p>\n  <p data-pid=\"Chdt9Vul\"><b>2.2.1 无法代理原始值类型 </b></p>\n  <p data-pid=\"6Qo8VckW\">reactive() 函数可以代理一个对象，但不能代理基本类型值，这是因为原始值类型只有值而没有引用，无法追踪变量的后续变化。 </p>\n  <p data-pid=\"i_6Q-8R3\"><b>2.2.2 响应丢失 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1008\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"1008\"\n      data-original=\"https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_r.jpg\"></figure>\n  <p data-pid=\"pAx7_aPR\"><b>2.3 ref </b></p>\n  <p data-pid=\"E96TTVJ_\">接收一个值，返回的响应式且可变的包装对象。 </p>\n  <p data-pid=\"xmCIrvO9\">它只有一个属性：<code>.value</code> ，该属性指向内部被包装的值。这个值可以直接修改。 </p>\n  <blockquote data-pid=\"OgJesy_I\">我们没法用 reactive 处理原始值类型，但是我们可以创建一个对象将原始值挂在它的同名 property 下，再传递给 reactive。Vue 提供了 ref\n    来替我们做这件事。 </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"800\"\n      data-original=\"https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_r.jpg\"></figure>\n  <p data-pid=\"Q7Uideqn\"><b>2.3.1 自动解包（不需要加 .value 的情况） </b></p>\n  <ol>\n    <li data-pid=\"g2srjh5V\">ref 在模板中会自动解包 </li>\n  </ol>\n  <p data-pid=\"nHaF68Z1\">2.<code>watch</code> 可以直接接受 ref 作为监听对象，在回调函数中会直接返回解包后的值。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"868\"\n      data-original=\"https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_r.jpg\"></figure>\n  <p data-pid=\"BWQdWKOb\">3. 使用 reactive() / readonly() 解包对象嵌套的 ref </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"716\"\n      data-original=\"https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_r.jpg\"></figure>\n  <blockquote data-pid=\"zaIwbIj-\">但是从 <code>Array</code> 或原生集合类型如 <code>Map</code>访问 ref 时，不会进行解包。</blockquote>\n  <p data-pid=\"e4NmHN9d\"><b>2.3.2 unref（ref 的反向操作） </b></p>\n  <p data-pid=\"snoUo1ZM\">传入一个 ref，返回 <code>ref.value</code>，否则原样返回。 </p>\n  <blockquote data-pid=\"o7iXv9Gs\">纠结是否需要加 <code>.value</code>（比如某个函数参数的类型是\n    <code>Ref&lt;number&gt; | number</code>）来取值，可以使用 unref 来解包。\n  </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"700\"\n      data-original=\"https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_r.jpg\"></figure>\n  <p data-pid=\"vHg0rpqg\"><b>2.3.3 重复使用已有 ref </b></p>\n  <p data-pid=\"liLqb6ff\">将一个 ref 传递给 <code>ref()</code> 构造函数，它会原样返回。 </p>\n  <blockquote data-pid=\"h1FrzDho\">如果你的函数需要返回一个 ref，但是不确定参数的类型，可以直接 <code>return ref(param)</code>，如果是 ref 则会复用，不是则返回一个新的\n    ref。 </blockquote>\n  <p data-pid=\"ueXBRAta\"><b>2.3.4 可以使用 ES6 解构语法 </b></p>\n  <p data-pid=\"7Qg9q4Wo\">解构一个值是 ref 的对象不会丢失响应式。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"744\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"744\"\n      data-original=\"https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_r.jpg\"></figure>\n  <p data-pid=\"bVu2MvPp\"><b>2.3.5 this.$refs 的解决方案 </b></p>\n  <p data-pid=\"sYcku75L\">在虚拟 DOM 补丁算法中，如果 VNode 的 <code>ref</code> 键对应于渲染上下文中的 ref，则 VNode 的相应元素或组件实例将被分配给该 ref 的值。 </p>\n  <blockquote data-pid=\"jYqAgu0k\">由于是在虚拟 DOM 挂载/打补丁过程中执行的，因此 ref 只会在初始渲染之后才获得赋值。 </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"1348\" class=\"origin_image zh-lightbox-thumb\" width=\"902\"\n      data-original=\"https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_r.jpg\"></figure>\n  <p data-pid=\"oCTH_fU2\"><b>2.4 toRefs </b></p>\n  <p data-pid=\"TZTJ9i_T\">将响应式对象转换为普通对象，并对每个 property 对应的 value 转换成 ref。 </p>\n  <p data-pid=\"2oWgFXua\">可以用来解决 <code>reactive</code> 或者 <code>props</code> 在解构的时候丢失响应式的问题。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1008\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"1008\"\n      data-original=\"https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_r.jpg\"></figure>\n  <p data-pid=\"YcVVmyxD\"><b>2.5 computed </b></p>\n  <p data-pid=\"STH_UE0l\">接收 getter 函数，返回一个<b>只读</b>的响应式 ref 对象。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"868\"\n      data-original=\"https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_r.jpg\"></figure>\n  <p data-pid=\"8GHIhOTL\">如果参数是具有 get 和 set 函数的对象，返回的结果会是一个<b>可写</b>的响应式 ref 对象。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"448\" class=\"origin_image zh-lightbox-thumb\" width=\"564\"\n      data-original=\"https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_r.jpg\"></figure>\n  <p data-pid=\"VVFGe_SE\"><b>2.6 watch </b></p>\n  <p data-pid=\"d64D5vN9\">第一个参数接收数据源，可以是： </p>\n  <ul>\n    <li data-pid=\"Tk3QbSoW\">getter 函数、ref </li>\n    <li data-pid=\"67gvpbE8\">包含上述两种类型的数组（也就是可以 watch 多个源，其中任一个变化都会触发回调） </li>\n  </ul>\n  <p data-pid=\"lIMaq9k1\">第二个参数是回调函数，在数据源变动的时候触发。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"520\" class=\"origin_image zh-lightbox-thumb\" width=\"752\"\n      data-original=\"https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_r.jpg\"></figure>\n  <p data-pid=\"6F0hGO5P\"><b>2.6.1 停止观察 </b></p>\n  <p data-pid=\"3v1JUsDo\"><code>watch()</code> 返回一个停止观察的函数： </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"464\"\n      data-original=\"https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_r.jpg\"></figure>\n  <p data-pid=\"JiYo5C3c\">如果 <code>watch()</code> 是在一个组件的 <code>setup()</code> 或是生命周期函数中被调用的，那么该 watcher\n    会在当前组件被销毁时也一同被自动停</p>\n  <p data-pid=\"IddzStMs\"><b>2.6.2 清理 effect </b></p>\n  <p data-pid=\"ZlB7P72W\">watcher 的回调会接收到的第三个参数是一个用来注册清理操作的函数。 </p>\n  <blockquote data-pid=\"GLeHCtBz\">有时候当观察的数据源变化后，我们可能需要对之前所执行的副作用进行清理。举例来说，一个异步操作在完成之前数据就产生了变化，我们可能要撤销还在等待的前一个操作。\n  </blockquote>\n  <p data-pid=\"yWDqqwZf\">调用这个函数可以注册一个清理函数，执行时机在： </p>\n  <ul>\n    <li data-pid=\"IqIvIe6s\">回调被下一次调用前 </li>\n    <li data-pid=\"lJAeV6sq\">watcher 被停止前 </li>\n  </ul>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb\" width=\"784\"\n      data-original=\"https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_r.jpg\"></figure>\n  <h2>三、设计动机 </h2>\n  <p data-pid=\"4kuIX-HO\"><b>3.1 从 Class API 到 Function API 再到 Composition API </b></p>\n  <p data-pid=\"MxQjNLEk\">我们可以在 Vue RFC 中看到最初的 <a\n      href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/17\" class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Class API</a> 到 <a\n      href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/42\" class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Function-based Component API</a> 取其 FP\n    的精华，再到被修订为 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/78\" class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Composition API</a> 采用 Reactivity 的过程。\n  </p>\n  <p data-pid=\"Nxz49j3D\"><b>3.2 解决了什么问题 </b></p>\n  <p data-pid=\"4qCnoHpH\">对比 2.x 对象式 API： </p>\n  <ul>\n    <li data-pid=\"tsAJKZRh\">极易复用。 </li>\n    <ul>\n      <li data-pid=\"J6TxQJgP\">状态可以从组件中拆出来放到组合函数中。 </li>\n    </ul>\n    <li data-pid=\"XNnV1qH2\">更清楚的逻辑。 </li>\n    <ul>\n      <li data-pid=\"3a9fzd7b\">代码可以按功能/逻辑组织，而不是分散在各个选项中。 </li>\n    </ul>\n    <li data-pid=\"6Yavg6-T\">更好的 TypeScript 类型支持。 </li>\n    <ul>\n      <li data-pid=\"0zXyXXu0\">基于 Class 的 API 存在 TS 类型问题，而基于函数的 API 天然对类型推导很友好，因为 TS 对函数的参数、返回值和泛型的支持已经非常完备。 </li>\n    </ul>\n    <li data-pid=\"t_7FHIx3\">更小的打包体积。 </li>\n    <ul>\n      <li data-pid=\"53fBlnTF\">基于函数的 API 每一个函数都可以作为 named ES export 被单独引入，这使得它们对 tree-shaking 非常友好。没有被使用的 API\n        的相关代码可以在最终打包时被移除。 </li>\n      <li data-pid=\"qTwuzRZq\">同时，基于函数 API 所写的代码也有更好的压缩效率，因为所有的函数名和 setup 函数体内部的变量名都可以被压缩，但对象和 class 的属性/方法名却不可以。</li>\n    </ul>\n  </ul>\n  <p data-pid=\"4OG0-W96\"><b>3.3 对比 2.x 的复用模式 </b></p>\n  <p data-pid=\"54CLk7Ni\">Vue 2.x 目前的 API 我们有一些常见的逻辑复用模式，包括： </p>\n  <ul>\n    <li data-pid=\"5CdKCo9R\">Mixins </li>\n    <li data-pid=\"uKjdCge1\">高阶组件 (Higher-order Components, aka HOCs) </li>\n    <li data-pid=\"JpSzfvFy\">Renderless Components （基于 scoped slots / 作用域插槽封装逻辑的组件） </li>\n  </ul>\n  <p data-pid=\"THz_2hk1\">总体来说，以上这些模式存在以下问题： </p>\n  <ul>\n    <li data-pid=\"u5nWdNNy\">模版中的数据来源不清晰。 </li>\n    <ul>\n      <li data-pid=\"JofMkOuo\">举例来说，当一个组件中使用了多个 mixin 的时候，光看模版会很难分清一个属性到底是来自哪一个 mixin。HOC 也有类似的问题。 </li>\n    </ul>\n    <li data-pid=\"Uu6popTc\">使用 Composition API 只需要观察 setup 函数就可以知道数据的来源。 </li>\n    <li data-pid=\"vJXVZcq_\">命名空间冲突。 </li>\n    <ul>\n      <li data-pid=\"srpLZS_S\">由不同开发者开发的 mixin 无法保证不会正好用到一样的属性或是方法名。HOC 在注入的 props 中也存在类似问题。 </li>\n    </ul>\n    <li data-pid=\"MnHS9JyT\">组合函数在使用和返回给渲染层的两个阶段都可以做重命名的操作。 </li>\n    <li data-pid=\"HvY9AAXD\">性能。 </li>\n    <ul>\n      <li data-pid=\"RsS4JaW_\">HOC 和 Renderless Components 都需要额外的组件实例嵌套来封装逻辑，导致无谓的性能开销。 </li>\n    </ul>\n    <li data-pid=\"Rx5iZc1D\">组合函数没有创建额外的组件实例所带来的性能损耗。</li>\n  </ul>\n  <p data-pid=\"XE-GZHF7\"><b>3.4 对比 React Hooks </b></p>\n  <p data-pid=\"Kqxc4Ygq\">Composition API 虽然借鉴了 React Hooks，两者具有同等的基于函数抽取和复用逻辑的能力，但是出于框架的性质两者在实现上是天差地别的。 </p>\n  <p data-pid=\"bmfO65Zo\">React Hooks 在每次组件渲染时都会调用，通过隐式地将状态挂载在当前的内部组件节点上，在下一次渲染时根据调用顺序取出。而 Vue 的 <code>setup()</code>\n    每个组件实例只会在初始化时调用一次 ，状态通过引用储存在 <code>setup()</code> 的闭包内。 </p>\n  <p data-pid=\"eIwmCeKN\"> 也就是说，Composition API 相比 React Hooks： </p>\n  <ul>\n    <li data-pid=\"xvul6_a6\">整体上更符合 JavaScript 的直觉； </li>\n    <ul>\n      <li data-pid=\"I-_5HxJR\">Mutable 写法。 </li>\n    </ul>\n    <li data-pid=\"Dbe9xIks\">不受调用顺序的限制，可以有条件地被调用； </li>\n    <ul>\n      <li data-pid=\"14d6KrXq\">Hooks 需要使用下标来获取对应的 state。 </li>\n    </ul>\n    <li data-pid=\"ITuR--Mc\">不会在后续更新时不断产生大量的内联函数而影响引擎优化或是导致 GC 压力； </li>\n    <ul>\n      <li data-pid=\"OCdzF7ke\">Hooks 的每次渲染都是单独的闭包。 </li>\n    </ul>\n    <li data-pid=\"sJud2Tht\">不需要总是使用 <code>useCallback</code> 来缓存传给子组件的回调以防止过度更新； </li>\n    <ul>\n      <li data-pid=\"MJOZSOIQ\">如果给子组件传了函数，每次渲染都会被当作新 props。 </li>\n    </ul>\n    <li data-pid=\"LaKlKgt_\">不需要担心传了错误的依赖数组给 <code>useEffect/useMemo/useCallback</code> 从而导致回调中使用了过期的值。 </li>\n    <ul>\n      <li data-pid=\"71dmEK53\">Vue 的依赖收集是全自动的，可以做到最小粒度的更新。 </li>\n    </ul>\n  </ul>\n  <p data-pid=\"xxxm1Mna\">这都是基于 Vue 的响应式更新能力。 </p>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <p data-pid=\"6wCLdS0z\">有兴趣的同学可以通过下面的链接了解 React Hooks 的心智模型有多么沉重： </p>\n  <p data-pid=\"dXcX4NpU\"><a\n      href=\"https://link.zhihu.com/?target=https%3A//zh-hans.reactjs.org/docs/hooks-faq.html%23from-classes-to-hooks\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Hooks FAQ</a> </p>\n  <p data-pid=\"1O7wFzO1\"><a\n      href=\"https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">使用 React Hooks 声明\n      setInterval</a> </p>\n  <p data-pid=\"tOfqa6Ta\"><a\n      href=\"https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/a-complete-guide-to-useeffect/\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">useEffect 完整指南</a>\n  </p>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <p data-pid=\"jW2h8EBi\"><b>3.5 那么它有缺点吗？ </b></p>\n  <p data-pid=\"ZAvsH4cw\"><b>3.5.1 ref 和 reactive 的区别 </b></p>\n  <table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\">\n    <thead style=\"background-color: gray;\">\n      <th>ref</th>\n      <th>reactive</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>可以处理原始值，也可以处理对象</td>\n        <td>只能处理对象</td>\n      </tr>\n      <tr>\n        <td>需要加 .value，需要考虑自动解包</td>\n        <td>不需要加 .value</td>\n      </tr>\n      <tr>\n        <td>有单独的类型</td>\n        <td>和普通的对象没有什么区别，无法直接通过类型判断是否是响应式</td>\n      </tr>\n      <tr>\n        <td>可以使用解构赋值</td>\n        <td>不可以使用解构赋值，会丢失响应式</td>\n      </tr>\n      <tr>\n        <td></td>\n        <td>需要使用箭头函数包装才能使用 watch</td>\n      </tr>\n    </tbody>\n  </table>\n  <p data-pid=\"aVtdgg6d\"><b>3.5.2 考虑响应式和 .value </b></p>\n  <p data-pid=\"mIuWJkq7\">虽然写 Composition API 不会有 <code>useEffect</code> 的困扰，还能使用完全一致的生命周期钩子函数，但是此次 Vue 把响应式 API\n    暴露给我们，实际上在编写代码的时候，需要考虑是否是响应式、是否是 ref 和响应式丢失的问题，也会带来一定的心智负担。 </p>\n  <h2>总结</h2>\n  <blockquote data-pid=\"dwydTu3z\"><b>面向生命周期编程 vs 面向业务逻辑编程</b> <br>Composition API\n    带来了组件逻辑抽取和复用的优化，抽取逻辑会变得非常简单，所以我们不必只在需要复用逻辑的时候才抽取函数，也可以单纯为了更好地组织代码去抽取函数，以此避免每个逻辑任务的代码都被选项切成了多个碎片分散在各处。\n    <br>当然如果组件足够简单，我们还是可以只使用 Options API，以原来的习惯写代码。\n  </blockquote>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <blockquote data-pid=\"nZaUCgyk\"><b>我可以在 Vue 2 中使用吗？</b> <br>可以的，官方团队提供了可供 Vue 2 使用的插件： <a\n      href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/composition-api\" class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">@vue/composition-api</a>。 <br>另外他们也计划让\n    Composition API 在 Vue 2.7 原生支持。</blockquote>\n  <h2>参考 </h2>\n  <p data-pid=\"0nG5Lg4p\"><a\n      href=\"https://link.zhihu.com/?target=https%3A//v3.cn.vuejs.org/guide/composition-api-introduction.html%23%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E7%25BB%2584%25E5%2590%2588%25E5%25BC%258F-api\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">官方文档</a> </p>\n  <p data-pid=\"CEjDQuk6\"><a href=\"https://zhuanlan.zhihu.com/p/68477600\" class=\"internal\"\n      data-za-detail-view-id=\"1043\">Vue Function-based API RFC</a> </p>\n  <p data-pid=\"PF0H7EFU\"><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1x54y1V7H6/\"\n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">VueUse 作者 Anthony\n      Fu 分享可组合的 Vue</a> </p>\n  <p data-pid=\"cxCCci-C\"><a href=\"https://zhuanlan.zhihu.com/p/146097763\" class=\"internal\"\n      data-za-detail-view-id=\"1043\">深入理解 Vue3 Reactivity API</a> </p>\n</div>","slug":"ReprintVueCompositionAPI","published":1,"updated":"2023-02-16T10:34:25.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle8bsvfy000jj0h8htp7fem4","content":"\n## 转载：Composition API - 前端知识库的文章 - 知乎 https://zhuanlan.zhihu.com/p/408272742\n\n<div class=\"RichText ztext Post-RichText css-1g0fqss\" options=\"[object Object]\">\n  <h2 data-first-child=\"\">前言 </h2>\n  <p data-pid=\"d-p163wy\">关注 React 的同学应该知道，React 在 19 年推出了 Hooks API，从而可以抛弃难以理解的 class\n    完全转向函数式组件。当然，它对开发者的意义不止于此，更为重要的是它提供了从组件中<b>提取状态逻辑</b>的能力，让我们能以业务逻辑为细粒度拆分组件，并在组件之间复用业务逻辑。 </p>\n  <p data-pid=\"lloIgxso\">后续尤大马上发布了 Vue Function-based API RFC（在之后重写成了 Composition API），并作为 Vue3 的核心特性，可想而知它的重要性。 </p>\n  <p data-pid=\"vYRnkATX\">接下来让我们抛开 React，来看看 Composition API 都有哪些内容。 </p>\n  <h2>一、介绍 </h2>\n  <p data-pid=\"B39fLDrP\"><b>1.1 什么是 Composition API ？ </b></p>\n  <p data-pid=\"Rm3abSlN\">Vue 3 中引入的一种新的编写 Vue 组件的方式，可以将 2.x 中与组件逻辑相关的选项以 API 函数的形式重新设计。 </p>\n  <p data-pid=\"x_L4YJEQ\"><b>1.2 基本例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1884\" data-rawheight=\"1240\" class=\"origin_image zh-lightbox-thumb\" width=\"1884\"\n      data-original=\"https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"80OXzjAb\">我们使用 Composition API 对左侧进行重构，其实就是将组件选项抽离到了 <code>setup</code>\n    函数当中进行编排，并在最后把模板用到的变量返回，最后的结果和将变量定义在 <code>data</code> 或者 <code>methods</code> 中没有什么区别。 </p>\n  <p data-pid=\"zUbcTqvG\">当然，setup 和 2.x 的选项一起混用也是没有问题的，并且依旧可以通过 <code>this.xx</code> 访问到 <code>setup</code> 返回的变量。</p>\n  <blockquote data-pid=\"yCWHp3ur\">❓ 如果只是把代码迁移到 <code>setup</code> 函数中，变成一长条的面条式代码，有什么意义呢 </blockquote>\n  <p data-pid=\"__ovLorF\"><b>1.3 更进一步的例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"1204\" class=\"origin_image zh-lightbox-thumb\" width=\"936\"\n      data-original=\"https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_r.jpg\"></figure>\n  <p data-pid=\"3Plt6P_5\">这一次我们将 <code>setup</code> 中的代码进一步抽离，拆出了 <code>useMouse</code>\n    组合函数，里面封装了对鼠标位置的监听逻辑。<code>useMouse</code>\n    只需要将要暴露给组件的状态（<code>x</code>、<code>y</code>）以响应式的数据源的方式返回出来，就可以在我们的组件代码中使用。 </p>\n  <p data-pid=\"SLR82yO4\">对于 Component 来说，里面没有任何监听鼠标位置的逻辑代码，只需要调用 <code>useMouse</code> 拿到 <code>x</code>、<code>y</code>\n    即可。</p>\n  <blockquote data-pid=\"jfosxkhU\">❓ 这些我用 Mixins 也能实现呀 </blockquote>\n  <p data-pid=\"ba4NQEDI\"><b>1.4 更更进一步的例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1532\" data-rawheight=\"1384\" class=\"origin_image zh-lightbox-thumb\" width=\"1532\"\n      data-original=\"https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"xHhwJpIi\">首先我们通过模板来理解 <code>useDark</code> 的工作内容，就是返回了一个表示是否是黑夜模式的布尔值，并且可以通过 <code>useToggle</code>\n    来快速得到一个 toggle 函数。 </p>\n  <p data-pid=\"nmV5YoSR\">然后观察 <code>useDark</code>，我们可以看到它身为一个组合函数的同时，又调用了其他的组合函数 <code>usePreferredDark</code> 和\n    <code>useLocalStorage</code> 来获取系统主题色和本地配置色。当然，我们不需要太关心它们的具体实现，只需要专注于处理结果，并返回以本地配置色为优先的结果即可。\n  </p>\n  <p data-pid=\"C6hZ8F1F\">其中的组合函数调用关系如下图所示： </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1678\" data-rawheight=\"730\" class=\"origin_image zh-lightbox-thumb\" width=\"1678\"\n      data-original=\"https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"J4AYoGK8\">组合函数的底层又依赖了其他组合函数，比如 <code>useLocalStorage</code> 依赖统一封装了 SessionStorage 和 LocalStorage 逻辑的\n    <code>useStorage</code>，<code>usePreferredDark</code> 依赖封装了 <code>window.matchMedia</code> 逻辑的\n    <code>useMediaQuery</code>。它们最后又都通过 <code>useEventListener</code> 来做状态改变的响应，并且能自动卸载。\n  </p>\n  <p data-pid=\"jqJ6ebx1\">涉及的每一个函数都能独立使用，并且有自己的职责，最后进行组合。 </p>\n  <blockquote data-pid=\"08iizr0U\">这个例子来源于 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https%3A//github.com/vueuse/vueuse\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">VueUse <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>.\n  </blockquote>\n  <p data-pid=\"WuMdyX-p\">当然，我们不可能总是写到这么通用的代码，但是在业务中也可以使用 Composition API 来对业务逻辑进行拆分，让每一个组合函数负责独立的业务，比如埋点上报、RichTextPanel\n    组件参数与回调、页面控件逻辑等。这些组件内的状态、方法现在我们可以将它提取到组合函数中，可以是为了复用，也可以仅仅是为了让 .vue 文件看起来更干净。</p>\n  <h2>二、API </h2>\n  <p data-pid=\"0PsR029O\"><b>2.1 setup </b></p>\n  <p data-pid=\"FdBMQSTF\"><code>setup</code> 是组合式 API 的入口点，它的执行时机在 <code>beforeCreate</code> 和\n    <code>created</code>，并且只会执行一次。\n  </p>\n  <p data-pid=\"8emt6Qmd\">所以我们不需要 <code>onBeforeCreate</code> 和 <code>onCreated</code>，这些钩子对应的代码应该直接在 <code>setup</code>\n    函数中编写。 </p>\n  <p data-pid=\"-PkOkw14\">它接收两个参数： </p>\n  <ol>\n    <li data-pid=\"PzoT1YH8\">响应式的 <code>props</code> </li>\n    <li data-pid=\"En2tDX8_\">非响应式的 <code>context</code>，包含：attrs、slots、emit </li>\n  </ol>\n  <p data-pid=\"IeEBiCS8\">它执行的时候组件实例尚未被创建，所以我们无法访问 data、computed、methods 这些组件选项。 </p>\n  <p data-pid=\"JlJyHhSo\">如果它返回一个对象，那么对象的 property 就可以在选项或者模板中访问到。 </p>\n  <p data-pid=\"pCqoAluV\"><b>2.1.1 返回渲染函数 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1088\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"1088\"\n      data-original=\"https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_r.jpg\"></figure>\n  <p data-pid=\"yc8vp9x5\">在 Babel Plugin 支持下可以返回 JSX：<a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/jsx/pull/142\"  class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">feat: add @vue/composition-api support\n      #142 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"4iqS02eC\"><b>2.1.2 getCurrentInstance </b></p>\n  <p data-pid=\"jphaZDki\">如果确实需要访问组件实例，可以使用 <code>getCurrentInstance()</code>。 </p>\n  <p data-pid=\"X2DJAAWy\">只能在 <code>setup</code>、生命周期钩子和组合函数中使用。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"970\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"970\"\n      data-original=\"https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_r.jpg\"></figure>\n  <p data-pid=\"tKx1A6sw\"><b>2.2 reactive </b></p>\n  <p data-pid=\"EXN2rHlJ\">返回对象的响应式副本，相当于 <code>Vue.observable(obj)</code> 。 </p>\n  <p data-pid=\"XRwILD4j\">该响应式转换是“深度转换”——它会影响嵌套对象传递的所有 property。 </p>\n  <p data-pid=\"YTfRw30Y\">怎么理解这里的响应式呢？就是我们在渲染期间使用响应式对象，当值改变的时候视图会自动更新，就和修改挂在 data 对象里的值一样。 </p>\n  <p data-pid=\"Chdt9Vul\"><b>2.2.1 无法代理原始值类型 </b></p>\n  <p data-pid=\"6Qo8VckW\">reactive() 函数可以代理一个对象，但不能代理基本类型值，这是因为原始值类型只有值而没有引用，无法追踪变量的后续变化。 </p>\n  <p data-pid=\"i_6Q-8R3\"><b>2.2.2 响应丢失 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1008\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"1008\"\n      data-original=\"https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_r.jpg\"></figure>\n  <p data-pid=\"pAx7_aPR\"><b>2.3 ref </b></p>\n  <p data-pid=\"E96TTVJ_\">接收一个值，返回的响应式且可变的包装对象。 </p>\n  <p data-pid=\"xmCIrvO9\">它只有一个属性：<code>.value</code> ，该属性指向内部被包装的值。这个值可以直接修改。 </p>\n  <blockquote data-pid=\"OgJesy_I\">我们没法用 reactive 处理原始值类型，但是我们可以创建一个对象将原始值挂在它的同名 property 下，再传递给 reactive。Vue 提供了 ref\n    来替我们做这件事。 </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"800\"\n      data-original=\"https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_r.jpg\"></figure>\n  <p data-pid=\"Q7Uideqn\"><b>2.3.1 自动解包（不需要加 .value 的情况） </b></p>\n  <ol>\n    <li data-pid=\"g2srjh5V\">ref 在模板中会自动解包 </li>\n  </ol>\n  <p data-pid=\"nHaF68Z1\">2.<code>watch</code> 可以直接接受 ref 作为监听对象，在回调函数中会直接返回解包后的值。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"868\"\n      data-original=\"https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_r.jpg\"></figure>\n  <p data-pid=\"BWQdWKOb\">3. 使用 reactive() / readonly() 解包对象嵌套的 ref </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"716\"\n      data-original=\"https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_r.jpg\"></figure>\n  <blockquote data-pid=\"zaIwbIj-\">但是从 <code>Array</code> 或原生集合类型如 <code>Map</code>访问 ref 时，不会进行解包。</blockquote>\n  <p data-pid=\"e4NmHN9d\"><b>2.3.2 unref（ref 的反向操作） </b></p>\n  <p data-pid=\"snoUo1ZM\">传入一个 ref，返回 <code>ref.value</code>，否则原样返回。 </p>\n  <blockquote data-pid=\"o7iXv9Gs\">纠结是否需要加 <code>.value</code>（比如某个函数参数的类型是\n    <code>Ref&lt;number&gt; | number</code>）来取值，可以使用 unref 来解包。\n  </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"700\"\n      data-original=\"https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_r.jpg\"></figure>\n  <p data-pid=\"vHg0rpqg\"><b>2.3.3 重复使用已有 ref </b></p>\n  <p data-pid=\"liLqb6ff\">将一个 ref 传递给 <code>ref()</code> 构造函数，它会原样返回。 </p>\n  <blockquote data-pid=\"h1FrzDho\">如果你的函数需要返回一个 ref，但是不确定参数的类型，可以直接 <code>return ref(param)</code>，如果是 ref 则会复用，不是则返回一个新的\n    ref。 </blockquote>\n  <p data-pid=\"ueXBRAta\"><b>2.3.4 可以使用 ES6 解构语法 </b></p>\n  <p data-pid=\"7Qg9q4Wo\">解构一个值是 ref 的对象不会丢失响应式。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"744\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"744\"\n      data-original=\"https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_r.jpg\"></figure>\n  <p data-pid=\"bVu2MvPp\"><b>2.3.5 this.$refs 的解决方案 </b></p>\n  <p data-pid=\"sYcku75L\">在虚拟 DOM 补丁算法中，如果 VNode 的 <code>ref</code> 键对应于渲染上下文中的 ref，则 VNode 的相应元素或组件实例将被分配给该 ref 的值。 </p>\n  <blockquote data-pid=\"jYqAgu0k\">由于是在虚拟 DOM 挂载/打补丁过程中执行的，因此 ref 只会在初始渲染之后才获得赋值。 </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"1348\" class=\"origin_image zh-lightbox-thumb\" width=\"902\"\n      data-original=\"https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_r.jpg\"></figure>\n  <p data-pid=\"oCTH_fU2\"><b>2.4 toRefs </b></p>\n  <p data-pid=\"TZTJ9i_T\">将响应式对象转换为普通对象，并对每个 property 对应的 value 转换成 ref。 </p>\n  <p data-pid=\"2oWgFXua\">可以用来解决 <code>reactive</code> 或者 <code>props</code> 在解构的时候丢失响应式的问题。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1008\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"1008\"\n      data-original=\"https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_r.jpg\"></figure>\n  <p data-pid=\"YcVVmyxD\"><b>2.5 computed </b></p>\n  <p data-pid=\"STH_UE0l\">接收 getter 函数，返回一个<b>只读</b>的响应式 ref 对象。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"868\"\n      data-original=\"https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_r.jpg\"></figure>\n  <p data-pid=\"8GHIhOTL\">如果参数是具有 get 和 set 函数的对象，返回的结果会是一个<b>可写</b>的响应式 ref 对象。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"448\" class=\"origin_image zh-lightbox-thumb\" width=\"564\"\n      data-original=\"https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_r.jpg\"></figure>\n  <p data-pid=\"VVFGe_SE\"><b>2.6 watch </b></p>\n  <p data-pid=\"d64D5vN9\">第一个参数接收数据源，可以是： </p>\n  <ul>\n    <li data-pid=\"Tk3QbSoW\">getter 函数、ref </li>\n    <li data-pid=\"67gvpbE8\">包含上述两种类型的数组（也就是可以 watch 多个源，其中任一个变化都会触发回调） </li>\n  </ul>\n  <p data-pid=\"lIMaq9k1\">第二个参数是回调函数，在数据源变动的时候触发。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"520\" class=\"origin_image zh-lightbox-thumb\" width=\"752\"\n      data-original=\"https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_r.jpg\"></figure>\n  <p data-pid=\"6F0hGO5P\"><b>2.6.1 停止观察 </b></p>\n  <p data-pid=\"3v1JUsDo\"><code>watch()</code> 返回一个停止观察的函数： </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"464\"\n      data-original=\"https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_r.jpg\"></figure>\n  <p data-pid=\"JiYo5C3c\">如果 <code>watch()</code> 是在一个组件的 <code>setup()</code> 或是生命周期函数中被调用的，那么该 watcher\n    会在当前组件被销毁时也一同被自动停</p>\n  <p data-pid=\"IddzStMs\"><b>2.6.2 清理 effect </b></p>\n  <p data-pid=\"ZlB7P72W\">watcher 的回调会接收到的第三个参数是一个用来注册清理操作的函数。 </p>\n  <blockquote data-pid=\"GLeHCtBz\">有时候当观察的数据源变化后，我们可能需要对之前所执行的副作用进行清理。举例来说，一个异步操作在完成之前数据就产生了变化，我们可能要撤销还在等待的前一个操作。\n  </blockquote>\n  <p data-pid=\"yWDqqwZf\">调用这个函数可以注册一个清理函数，执行时机在： </p>\n  <ul>\n    <li data-pid=\"IqIvIe6s\">回调被下一次调用前 </li>\n    <li data-pid=\"lJAeV6sq\">watcher 被停止前 </li>\n  </ul>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb\" width=\"784\"\n      data-original=\"https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_r.jpg\"></figure>\n  <h2>三、设计动机 </h2>\n  <p data-pid=\"4kuIX-HO\"><b>3.1 从 Class API 到 Function API 再到 Composition API </b></p>\n  <p data-pid=\"MxQjNLEk\">我们可以在 Vue RFC 中看到最初的 <a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/17\"  class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Class API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 到 <a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/42\"  class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Function-based Component API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 取其 FP\n    的精华，再到被修订为 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/78\"  class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Composition API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 采用 Reactivity 的过程。\n  </p>\n  <p data-pid=\"Nxz49j3D\"><b>3.2 解决了什么问题 </b></p>\n  <p data-pid=\"4qCnoHpH\">对比 2.x 对象式 API： </p>\n  <ul>\n    <li data-pid=\"tsAJKZRh\">极易复用。 </li>\n    <ul>\n      <li data-pid=\"J6TxQJgP\">状态可以从组件中拆出来放到组合函数中。 </li>\n    </ul>\n    <li data-pid=\"XNnV1qH2\">更清楚的逻辑。 </li>\n    <ul>\n      <li data-pid=\"3a9fzd7b\">代码可以按功能/逻辑组织，而不是分散在各个选项中。 </li>\n    </ul>\n    <li data-pid=\"6Yavg6-T\">更好的 TypeScript 类型支持。 </li>\n    <ul>\n      <li data-pid=\"0zXyXXu0\">基于 Class 的 API 存在 TS 类型问题，而基于函数的 API 天然对类型推导很友好，因为 TS 对函数的参数、返回值和泛型的支持已经非常完备。 </li>\n    </ul>\n    <li data-pid=\"t_7FHIx3\">更小的打包体积。 </li>\n    <ul>\n      <li data-pid=\"53fBlnTF\">基于函数的 API 每一个函数都可以作为 named ES export 被单独引入，这使得它们对 tree-shaking 非常友好。没有被使用的 API\n        的相关代码可以在最终打包时被移除。 </li>\n      <li data-pid=\"qTwuzRZq\">同时，基于函数 API 所写的代码也有更好的压缩效率，因为所有的函数名和 setup 函数体内部的变量名都可以被压缩，但对象和 class 的属性/方法名却不可以。</li>\n    </ul>\n  </ul>\n  <p data-pid=\"4OG0-W96\"><b>3.3 对比 2.x 的复用模式 </b></p>\n  <p data-pid=\"54CLk7Ni\">Vue 2.x 目前的 API 我们有一些常见的逻辑复用模式，包括： </p>\n  <ul>\n    <li data-pid=\"5CdKCo9R\">Mixins </li>\n    <li data-pid=\"uKjdCge1\">高阶组件 (Higher-order Components, aka HOCs) </li>\n    <li data-pid=\"JpSzfvFy\">Renderless Components （基于 scoped slots / 作用域插槽封装逻辑的组件） </li>\n  </ul>\n  <p data-pid=\"THz_2hk1\">总体来说，以上这些模式存在以下问题： </p>\n  <ul>\n    <li data-pid=\"u5nWdNNy\">模版中的数据来源不清晰。 </li>\n    <ul>\n      <li data-pid=\"JofMkOuo\">举例来说，当一个组件中使用了多个 mixin 的时候，光看模版会很难分清一个属性到底是来自哪一个 mixin。HOC 也有类似的问题。 </li>\n    </ul>\n    <li data-pid=\"Uu6popTc\">使用 Composition API 只需要观察 setup 函数就可以知道数据的来源。 </li>\n    <li data-pid=\"vJXVZcq_\">命名空间冲突。 </li>\n    <ul>\n      <li data-pid=\"srpLZS_S\">由不同开发者开发的 mixin 无法保证不会正好用到一样的属性或是方法名。HOC 在注入的 props 中也存在类似问题。 </li>\n    </ul>\n    <li data-pid=\"MnHS9JyT\">组合函数在使用和返回给渲染层的两个阶段都可以做重命名的操作。 </li>\n    <li data-pid=\"HvY9AAXD\">性能。 </li>\n    <ul>\n      <li data-pid=\"RsS4JaW_\">HOC 和 Renderless Components 都需要额外的组件实例嵌套来封装逻辑，导致无谓的性能开销。 </li>\n    </ul>\n    <li data-pid=\"Rx5iZc1D\">组合函数没有创建额外的组件实例所带来的性能损耗。</li>\n  </ul>\n  <p data-pid=\"XE-GZHF7\"><b>3.4 对比 React Hooks </b></p>\n  <p data-pid=\"Kqxc4Ygq\">Composition API 虽然借鉴了 React Hooks，两者具有同等的基于函数抽取和复用逻辑的能力，但是出于框架的性质两者在实现上是天差地别的。 </p>\n  <p data-pid=\"bmfO65Zo\">React Hooks 在每次组件渲染时都会调用，通过隐式地将状态挂载在当前的内部组件节点上，在下一次渲染时根据调用顺序取出。而 Vue 的 <code>setup()</code>\n    每个组件实例只会在初始化时调用一次 ，状态通过引用储存在 <code>setup()</code> 的闭包内。 </p>\n  <p data-pid=\"eIwmCeKN\"> 也就是说，Composition API 相比 React Hooks： </p>\n  <ul>\n    <li data-pid=\"xvul6_a6\">整体上更符合 JavaScript 的直觉； </li>\n    <ul>\n      <li data-pid=\"I-_5HxJR\">Mutable 写法。 </li>\n    </ul>\n    <li data-pid=\"Dbe9xIks\">不受调用顺序的限制，可以有条件地被调用； </li>\n    <ul>\n      <li data-pid=\"14d6KrXq\">Hooks 需要使用下标来获取对应的 state。 </li>\n    </ul>\n    <li data-pid=\"ITuR--Mc\">不会在后续更新时不断产生大量的内联函数而影响引擎优化或是导致 GC 压力； </li>\n    <ul>\n      <li data-pid=\"OCdzF7ke\">Hooks 的每次渲染都是单独的闭包。 </li>\n    </ul>\n    <li data-pid=\"sJud2Tht\">不需要总是使用 <code>useCallback</code> 来缓存传给子组件的回调以防止过度更新； </li>\n    <ul>\n      <li data-pid=\"MJOZSOIQ\">如果给子组件传了函数，每次渲染都会被当作新 props。 </li>\n    </ul>\n    <li data-pid=\"LaKlKgt_\">不需要担心传了错误的依赖数组给 <code>useEffect/useMemo/useCallback</code> 从而导致回调中使用了过期的值。 </li>\n    <ul>\n      <li data-pid=\"71dmEK53\">Vue 的依赖收集是全自动的，可以做到最小粒度的更新。 </li>\n    </ul>\n  </ul>\n  <p data-pid=\"xxxm1Mna\">这都是基于 Vue 的响应式更新能力。 </p>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <p data-pid=\"6wCLdS0z\">有兴趣的同学可以通过下面的链接了解 React Hooks 的心智模型有多么沉重： </p>\n  <p data-pid=\"dXcX4NpU\"><a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//zh-hans.reactjs.org/docs/hooks-faq.html%23from-classes-to-hooks\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Hooks FAQ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"1O7wFzO1\"><a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">使用 React Hooks 声明\n      setInterval <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"tOfqa6Ta\"><a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/a-complete-guide-to-useeffect/\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">useEffect 完整指南 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>\n  </p>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <p data-pid=\"jW2h8EBi\"><b>3.5 那么它有缺点吗？ </b></p>\n  <p data-pid=\"ZAvsH4cw\"><b>3.5.1 ref 和 reactive 的区别 </b></p>\n  <table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\">\n    <thead style=\"background-color: gray;\">\n      <th>ref</th>\n      <th>reactive</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>可以处理原始值，也可以处理对象</td>\n        <td>只能处理对象</td>\n      </tr>\n      <tr>\n        <td>需要加 .value，需要考虑自动解包</td>\n        <td>不需要加 .value</td>\n      </tr>\n      <tr>\n        <td>有单独的类型</td>\n        <td>和普通的对象没有什么区别，无法直接通过类型判断是否是响应式</td>\n      </tr>\n      <tr>\n        <td>可以使用解构赋值</td>\n        <td>不可以使用解构赋值，会丢失响应式</td>\n      </tr>\n      <tr>\n        <td></td>\n        <td>需要使用箭头函数包装才能使用 watch</td>\n      </tr>\n    </tbody>\n  </table>\n  <p data-pid=\"aVtdgg6d\"><b>3.5.2 考虑响应式和 .value </b></p>\n  <p data-pid=\"mIuWJkq7\">虽然写 Composition API 不会有 <code>useEffect</code> 的困扰，还能使用完全一致的生命周期钩子函数，但是此次 Vue 把响应式 API\n    暴露给我们，实际上在编写代码的时候，需要考虑是否是响应式、是否是 ref 和响应式丢失的问题，也会带来一定的心智负担。 </p>\n  <h2>总结</h2>\n  <blockquote data-pid=\"dwydTu3z\"><b>面向生命周期编程 vs 面向业务逻辑编程</b> <br>Composition API\n    带来了组件逻辑抽取和复用的优化，抽取逻辑会变得非常简单，所以我们不必只在需要复用逻辑的时候才抽取函数，也可以单纯为了更好地组织代码去抽取函数，以此避免每个逻辑任务的代码都被选项切成了多个碎片分散在各处。\n    <br>当然如果组件足够简单，我们还是可以只使用 Options API，以原来的习惯写代码。\n  </blockquote>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <blockquote data-pid=\"nZaUCgyk\"><b>我可以在 Vue 2 中使用吗？</b> <br>可以的，官方团队提供了可供 Vue 2 使用的插件： <a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/composition-api\"  class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">@vue/composition-api <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。 <br>另外他们也计划让\n    Composition API 在 Vue 2.7 原生支持。</blockquote>\n  <h2>参考 </h2>\n  <p data-pid=\"0nG5Lg4p\"><a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//v3.cn.vuejs.org/guide/composition-api-introduction.html%23%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E7%25BB%2584%25E5%2590%2588%25E5%25BC%258F-api\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">官方文档 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"CEjDQuk6\"><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/68477600\"  class=\"internal\"\n      data-za-detail-view-id=\"1043\">Vue Function-based API RFC <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"PF0H7EFU\"><a class=\"link\"   href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1x54y1V7H6/\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">VueUse 作者 Anthony\n      Fu 分享可组合的 Vue <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"cxCCci-C\"><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/146097763\"  class=\"internal\"\n      data-za-detail-view-id=\"1043\">深入理解 Vue3 Reactivity API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n</div>","site":{"data":{}},"excerpt":"","more":"\n## 转载：Composition API - 前端知识库的文章 - 知乎 https://zhuanlan.zhihu.com/p/408272742\n\n<div class=\"RichText ztext Post-RichText css-1g0fqss\" options=\"[object Object]\">\n  <h2 data-first-child=\"\">前言 </h2>\n  <p data-pid=\"d-p163wy\">关注 React 的同学应该知道，React 在 19 年推出了 Hooks API，从而可以抛弃难以理解的 class\n    完全转向函数式组件。当然，它对开发者的意义不止于此，更为重要的是它提供了从组件中<b>提取状态逻辑</b>的能力，让我们能以业务逻辑为细粒度拆分组件，并在组件之间复用业务逻辑。 </p>\n  <p data-pid=\"lloIgxso\">后续尤大马上发布了 Vue Function-based API RFC（在之后重写成了 Composition API），并作为 Vue3 的核心特性，可想而知它的重要性。 </p>\n  <p data-pid=\"vYRnkATX\">接下来让我们抛开 React，来看看 Composition API 都有哪些内容。 </p>\n  <h2>一、介绍 </h2>\n  <p data-pid=\"B39fLDrP\"><b>1.1 什么是 Composition API ？ </b></p>\n  <p data-pid=\"Rm3abSlN\">Vue 3 中引入的一种新的编写 Vue 组件的方式，可以将 2.x 中与组件逻辑相关的选项以 API 函数的形式重新设计。 </p>\n  <p data-pid=\"x_L4YJEQ\"><b>1.2 基本例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1884\" data-rawheight=\"1240\" class=\"origin_image zh-lightbox-thumb\" width=\"1884\"\n      data-original=\"https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"80OXzjAb\">我们使用 Composition API 对左侧进行重构，其实就是将组件选项抽离到了 <code>setup</code>\n    函数当中进行编排，并在最后把模板用到的变量返回，最后的结果和将变量定义在 <code>data</code> 或者 <code>methods</code> 中没有什么区别。 </p>\n  <p data-pid=\"zUbcTqvG\">当然，setup 和 2.x 的选项一起混用也是没有问题的，并且依旧可以通过 <code>this.xx</code> 访问到 <code>setup</code> 返回的变量。</p>\n  <blockquote data-pid=\"yCWHp3ur\">❓ 如果只是把代码迁移到 <code>setup</code> 函数中，变成一长条的面条式代码，有什么意义呢 </blockquote>\n  <p data-pid=\"__ovLorF\"><b>1.3 更进一步的例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"1204\" class=\"origin_image zh-lightbox-thumb\" width=\"936\"\n      data-original=\"https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_r.jpg\"></figure>\n  <p data-pid=\"3Plt6P_5\">这一次我们将 <code>setup</code> 中的代码进一步抽离，拆出了 <code>useMouse</code>\n    组合函数，里面封装了对鼠标位置的监听逻辑。<code>useMouse</code>\n    只需要将要暴露给组件的状态（<code>x</code>、<code>y</code>）以响应式的数据源的方式返回出来，就可以在我们的组件代码中使用。 </p>\n  <p data-pid=\"SLR82yO4\">对于 Component 来说，里面没有任何监听鼠标位置的逻辑代码，只需要调用 <code>useMouse</code> 拿到 <code>x</code>、<code>y</code>\n    即可。</p>\n  <blockquote data-pid=\"jfosxkhU\">❓ 这些我用 Mixins 也能实现呀 </blockquote>\n  <p data-pid=\"ba4NQEDI\"><b>1.4 更更进一步的例子 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1532\" data-rawheight=\"1384\" class=\"origin_image zh-lightbox-thumb\" width=\"1532\"\n      data-original=\"https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"xHhwJpIi\">首先我们通过模板来理解 <code>useDark</code> 的工作内容，就是返回了一个表示是否是黑夜模式的布尔值，并且可以通过 <code>useToggle</code>\n    来快速得到一个 toggle 函数。 </p>\n  <p data-pid=\"nmV5YoSR\">然后观察 <code>useDark</code>，我们可以看到它身为一个组合函数的同时，又调用了其他的组合函数 <code>usePreferredDark</code> 和\n    <code>useLocalStorage</code> 来获取系统主题色和本地配置色。当然，我们不需要太关心它们的具体实现，只需要专注于处理结果，并返回以本地配置色为优先的结果即可。\n  </p>\n  <p data-pid=\"C6hZ8F1F\">其中的组合函数调用关系如下图所示： </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1678\" data-rawheight=\"730\" class=\"origin_image zh-lightbox-thumb\" width=\"1678\"\n      data-original=\"https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_r.jpg\" style=\"\"></figure>\n  <p data-pid=\"J4AYoGK8\">组合函数的底层又依赖了其他组合函数，比如 <code>useLocalStorage</code> 依赖统一封装了 SessionStorage 和 LocalStorage 逻辑的\n    <code>useStorage</code>，<code>usePreferredDark</code> 依赖封装了 <code>window.matchMedia</code> 逻辑的\n    <code>useMediaQuery</code>。它们最后又都通过 <code>useEventListener</code> 来做状态改变的响应，并且能自动卸载。\n  </p>\n  <p data-pid=\"jqJ6ebx1\">涉及的每一个函数都能独立使用，并且有自己的职责，最后进行组合。 </p>\n  <blockquote data-pid=\"08iizr0U\">这个例子来源于 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https%3A//github.com/vueuse/vueuse\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">VueUse <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>.\n  </blockquote>\n  <p data-pid=\"WuMdyX-p\">当然，我们不可能总是写到这么通用的代码，但是在业务中也可以使用 Composition API 来对业务逻辑进行拆分，让每一个组合函数负责独立的业务，比如埋点上报、RichTextPanel\n    组件参数与回调、页面控件逻辑等。这些组件内的状态、方法现在我们可以将它提取到组合函数中，可以是为了复用，也可以仅仅是为了让 .vue 文件看起来更干净。</p>\n  <h2>二、API </h2>\n  <p data-pid=\"0PsR029O\"><b>2.1 setup </b></p>\n  <p data-pid=\"FdBMQSTF\"><code>setup</code> 是组合式 API 的入口点，它的执行时机在 <code>beforeCreate</code> 和\n    <code>created</code>，并且只会执行一次。\n  </p>\n  <p data-pid=\"8emt6Qmd\">所以我们不需要 <code>onBeforeCreate</code> 和 <code>onCreated</code>，这些钩子对应的代码应该直接在 <code>setup</code>\n    函数中编写。 </p>\n  <p data-pid=\"-PkOkw14\">它接收两个参数： </p>\n  <ol>\n    <li data-pid=\"PzoT1YH8\">响应式的 <code>props</code> </li>\n    <li data-pid=\"En2tDX8_\">非响应式的 <code>context</code>，包含：attrs、slots、emit </li>\n  </ol>\n  <p data-pid=\"IeEBiCS8\">它执行的时候组件实例尚未被创建，所以我们无法访问 data、computed、methods 这些组件选项。 </p>\n  <p data-pid=\"JlJyHhSo\">如果它返回一个对象，那么对象的 property 就可以在选项或者模板中访问到。 </p>\n  <p data-pid=\"pCqoAluV\"><b>2.1.1 返回渲染函数 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1088\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"1088\"\n      data-original=\"https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_r.jpg\"></figure>\n  <p data-pid=\"yc8vp9x5\">在 Babel Plugin 支持下可以返回 JSX：<a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/jsx/pull/142\"  class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">feat: add @vue/composition-api support\n      #142 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"4iqS02eC\"><b>2.1.2 getCurrentInstance </b></p>\n  <p data-pid=\"jphaZDki\">如果确实需要访问组件实例，可以使用 <code>getCurrentInstance()</code>。 </p>\n  <p data-pid=\"X2DJAAWy\">只能在 <code>setup</code>、生命周期钩子和组合函数中使用。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"970\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"970\"\n      data-original=\"https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_r.jpg\"></figure>\n  <p data-pid=\"tKx1A6sw\"><b>2.2 reactive </b></p>\n  <p data-pid=\"EXN2rHlJ\">返回对象的响应式副本，相当于 <code>Vue.observable(obj)</code> 。 </p>\n  <p data-pid=\"XRwILD4j\">该响应式转换是“深度转换”——它会影响嵌套对象传递的所有 property。 </p>\n  <p data-pid=\"YTfRw30Y\">怎么理解这里的响应式呢？就是我们在渲染期间使用响应式对象，当值改变的时候视图会自动更新，就和修改挂在 data 对象里的值一样。 </p>\n  <p data-pid=\"Chdt9Vul\"><b>2.2.1 无法代理原始值类型 </b></p>\n  <p data-pid=\"6Qo8VckW\">reactive() 函数可以代理一个对象，但不能代理基本类型值，这是因为原始值类型只有值而没有引用，无法追踪变量的后续变化。 </p>\n  <p data-pid=\"i_6Q-8R3\"><b>2.2.2 响应丢失 </b></p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1008\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"1008\"\n      data-original=\"https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_r.jpg\"></figure>\n  <p data-pid=\"pAx7_aPR\"><b>2.3 ref </b></p>\n  <p data-pid=\"E96TTVJ_\">接收一个值，返回的响应式且可变的包装对象。 </p>\n  <p data-pid=\"xmCIrvO9\">它只有一个属性：<code>.value</code> ，该属性指向内部被包装的值。这个值可以直接修改。 </p>\n  <blockquote data-pid=\"OgJesy_I\">我们没法用 reactive 处理原始值类型，但是我们可以创建一个对象将原始值挂在它的同名 property 下，再传递给 reactive。Vue 提供了 ref\n    来替我们做这件事。 </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"800\"\n      data-original=\"https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_r.jpg\"></figure>\n  <p data-pid=\"Q7Uideqn\"><b>2.3.1 自动解包（不需要加 .value 的情况） </b></p>\n  <ol>\n    <li data-pid=\"g2srjh5V\">ref 在模板中会自动解包 </li>\n  </ol>\n  <p data-pid=\"nHaF68Z1\">2.<code>watch</code> 可以直接接受 ref 作为监听对象，在回调函数中会直接返回解包后的值。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"868\"\n      data-original=\"https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_r.jpg\"></figure>\n  <p data-pid=\"BWQdWKOb\">3. 使用 reactive() / readonly() 解包对象嵌套的 ref </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"716\"\n      data-original=\"https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_r.jpg\"></figure>\n  <blockquote data-pid=\"zaIwbIj-\">但是从 <code>Array</code> 或原生集合类型如 <code>Map</code>访问 ref 时，不会进行解包。</blockquote>\n  <p data-pid=\"e4NmHN9d\"><b>2.3.2 unref（ref 的反向操作） </b></p>\n  <p data-pid=\"snoUo1ZM\">传入一个 ref，返回 <code>ref.value</code>，否则原样返回。 </p>\n  <blockquote data-pid=\"o7iXv9Gs\">纠结是否需要加 <code>.value</code>（比如某个函数参数的类型是\n    <code>Ref&lt;number&gt; | number</code>）来取值，可以使用 unref 来解包。\n  </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"700\"\n      data-original=\"https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_r.jpg\"></figure>\n  <p data-pid=\"vHg0rpqg\"><b>2.3.3 重复使用已有 ref </b></p>\n  <p data-pid=\"liLqb6ff\">将一个 ref 传递给 <code>ref()</code> 构造函数，它会原样返回。 </p>\n  <blockquote data-pid=\"h1FrzDho\">如果你的函数需要返回一个 ref，但是不确定参数的类型，可以直接 <code>return ref(param)</code>，如果是 ref 则会复用，不是则返回一个新的\n    ref。 </blockquote>\n  <p data-pid=\"ueXBRAta\"><b>2.3.4 可以使用 ES6 解构语法 </b></p>\n  <p data-pid=\"7Qg9q4Wo\">解构一个值是 ref 的对象不会丢失响应式。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"744\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"744\"\n      data-original=\"https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_r.jpg\"></figure>\n  <p data-pid=\"bVu2MvPp\"><b>2.3.5 this.$refs 的解决方案 </b></p>\n  <p data-pid=\"sYcku75L\">在虚拟 DOM 补丁算法中，如果 VNode 的 <code>ref</code> 键对应于渲染上下文中的 ref，则 VNode 的相应元素或组件实例将被分配给该 ref 的值。 </p>\n  <blockquote data-pid=\"jYqAgu0k\">由于是在虚拟 DOM 挂载/打补丁过程中执行的，因此 ref 只会在初始渲染之后才获得赋值。 </blockquote>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"1348\" class=\"origin_image zh-lightbox-thumb\" width=\"902\"\n      data-original=\"https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_r.jpg\"></figure>\n  <p data-pid=\"oCTH_fU2\"><b>2.4 toRefs </b></p>\n  <p data-pid=\"TZTJ9i_T\">将响应式对象转换为普通对象，并对每个 property 对应的 value 转换成 ref。 </p>\n  <p data-pid=\"2oWgFXua\">可以用来解决 <code>reactive</code> 或者 <code>props</code> 在解构的时候丢失响应式的问题。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"1008\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"1008\"\n      data-original=\"https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_r.jpg\"></figure>\n  <p data-pid=\"YcVVmyxD\"><b>2.5 computed </b></p>\n  <p data-pid=\"STH_UE0l\">接收 getter 函数，返回一个<b>只读</b>的响应式 ref 对象。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"868\"\n      data-original=\"https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_r.jpg\"></figure>\n  <p data-pid=\"8GHIhOTL\">如果参数是具有 get 和 set 函数的对象，返回的结果会是一个<b>可写</b>的响应式 ref 对象。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"448\" class=\"origin_image zh-lightbox-thumb\" width=\"564\"\n      data-original=\"https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_r.jpg\"></figure>\n  <p data-pid=\"VVFGe_SE\"><b>2.6 watch </b></p>\n  <p data-pid=\"d64D5vN9\">第一个参数接收数据源，可以是： </p>\n  <ul>\n    <li data-pid=\"Tk3QbSoW\">getter 函数、ref </li>\n    <li data-pid=\"67gvpbE8\">包含上述两种类型的数组（也就是可以 watch 多个源，其中任一个变化都会触发回调） </li>\n  </ul>\n  <p data-pid=\"lIMaq9k1\">第二个参数是回调函数，在数据源变动的时候触发。 </p>\n  <figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"520\" class=\"origin_image zh-lightbox-thumb\" width=\"752\"\n      data-original=\"https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_r.jpg\"></figure>\n  <p data-pid=\"6F0hGO5P\"><b>2.6.1 停止观察 </b></p>\n  <p data-pid=\"3v1JUsDo\"><code>watch()</code> 返回一个停止观察的函数： </p>\n  <figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"196\" class=\"origin_image zh-lightbox-thumb\" width=\"464\"\n      data-original=\"https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_r.jpg\"></figure>\n  <p data-pid=\"JiYo5C3c\">如果 <code>watch()</code> 是在一个组件的 <code>setup()</code> 或是生命周期函数中被调用的，那么该 watcher\n    会在当前组件被销毁时也一同被自动停</p>\n  <p data-pid=\"IddzStMs\"><b>2.6.2 清理 effect </b></p>\n  <p data-pid=\"ZlB7P72W\">watcher 的回调会接收到的第三个参数是一个用来注册清理操作的函数。 </p>\n  <blockquote data-pid=\"GLeHCtBz\">有时候当观察的数据源变化后，我们可能需要对之前所执行的副作用进行清理。举例来说，一个异步操作在完成之前数据就产生了变化，我们可能要撤销还在等待的前一个操作。\n  </blockquote>\n  <p data-pid=\"yWDqqwZf\">调用这个函数可以注册一个清理函数，执行时机在： </p>\n  <ul>\n    <li data-pid=\"IqIvIe6s\">回调被下一次调用前 </li>\n    <li data-pid=\"lJAeV6sq\">watcher 被停止前 </li>\n  </ul>\n  <figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_b.jpg\" data-caption=\"\"\n      data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb\" width=\"784\"\n      data-original=\"https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_r.jpg\"></figure>\n  <h2>三、设计动机 </h2>\n  <p data-pid=\"4kuIX-HO\"><b>3.1 从 Class API 到 Function API 再到 Composition API </b></p>\n  <p data-pid=\"MxQjNLEk\">我们可以在 Vue RFC 中看到最初的 <a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/17\"  class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Class API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 到 <a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/42\"  class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Function-based Component API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 取其 FP\n    的精华，再到被修订为 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/78\"  class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Composition API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 采用 Reactivity 的过程。\n  </p>\n  <p data-pid=\"Nxz49j3D\"><b>3.2 解决了什么问题 </b></p>\n  <p data-pid=\"4qCnoHpH\">对比 2.x 对象式 API： </p>\n  <ul>\n    <li data-pid=\"tsAJKZRh\">极易复用。 </li>\n    <ul>\n      <li data-pid=\"J6TxQJgP\">状态可以从组件中拆出来放到组合函数中。 </li>\n    </ul>\n    <li data-pid=\"XNnV1qH2\">更清楚的逻辑。 </li>\n    <ul>\n      <li data-pid=\"3a9fzd7b\">代码可以按功能/逻辑组织，而不是分散在各个选项中。 </li>\n    </ul>\n    <li data-pid=\"6Yavg6-T\">更好的 TypeScript 类型支持。 </li>\n    <ul>\n      <li data-pid=\"0zXyXXu0\">基于 Class 的 API 存在 TS 类型问题，而基于函数的 API 天然对类型推导很友好，因为 TS 对函数的参数、返回值和泛型的支持已经非常完备。 </li>\n    </ul>\n    <li data-pid=\"t_7FHIx3\">更小的打包体积。 </li>\n    <ul>\n      <li data-pid=\"53fBlnTF\">基于函数的 API 每一个函数都可以作为 named ES export 被单独引入，这使得它们对 tree-shaking 非常友好。没有被使用的 API\n        的相关代码可以在最终打包时被移除。 </li>\n      <li data-pid=\"qTwuzRZq\">同时，基于函数 API 所写的代码也有更好的压缩效率，因为所有的函数名和 setup 函数体内部的变量名都可以被压缩，但对象和 class 的属性/方法名却不可以。</li>\n    </ul>\n  </ul>\n  <p data-pid=\"4OG0-W96\"><b>3.3 对比 2.x 的复用模式 </b></p>\n  <p data-pid=\"54CLk7Ni\">Vue 2.x 目前的 API 我们有一些常见的逻辑复用模式，包括： </p>\n  <ul>\n    <li data-pid=\"5CdKCo9R\">Mixins </li>\n    <li data-pid=\"uKjdCge1\">高阶组件 (Higher-order Components, aka HOCs) </li>\n    <li data-pid=\"JpSzfvFy\">Renderless Components （基于 scoped slots / 作用域插槽封装逻辑的组件） </li>\n  </ul>\n  <p data-pid=\"THz_2hk1\">总体来说，以上这些模式存在以下问题： </p>\n  <ul>\n    <li data-pid=\"u5nWdNNy\">模版中的数据来源不清晰。 </li>\n    <ul>\n      <li data-pid=\"JofMkOuo\">举例来说，当一个组件中使用了多个 mixin 的时候，光看模版会很难分清一个属性到底是来自哪一个 mixin。HOC 也有类似的问题。 </li>\n    </ul>\n    <li data-pid=\"Uu6popTc\">使用 Composition API 只需要观察 setup 函数就可以知道数据的来源。 </li>\n    <li data-pid=\"vJXVZcq_\">命名空间冲突。 </li>\n    <ul>\n      <li data-pid=\"srpLZS_S\">由不同开发者开发的 mixin 无法保证不会正好用到一样的属性或是方法名。HOC 在注入的 props 中也存在类似问题。 </li>\n    </ul>\n    <li data-pid=\"MnHS9JyT\">组合函数在使用和返回给渲染层的两个阶段都可以做重命名的操作。 </li>\n    <li data-pid=\"HvY9AAXD\">性能。 </li>\n    <ul>\n      <li data-pid=\"RsS4JaW_\">HOC 和 Renderless Components 都需要额外的组件实例嵌套来封装逻辑，导致无谓的性能开销。 </li>\n    </ul>\n    <li data-pid=\"Rx5iZc1D\">组合函数没有创建额外的组件实例所带来的性能损耗。</li>\n  </ul>\n  <p data-pid=\"XE-GZHF7\"><b>3.4 对比 React Hooks </b></p>\n  <p data-pid=\"Kqxc4Ygq\">Composition API 虽然借鉴了 React Hooks，两者具有同等的基于函数抽取和复用逻辑的能力，但是出于框架的性质两者在实现上是天差地别的。 </p>\n  <p data-pid=\"bmfO65Zo\">React Hooks 在每次组件渲染时都会调用，通过隐式地将状态挂载在当前的内部组件节点上，在下一次渲染时根据调用顺序取出。而 Vue 的 <code>setup()</code>\n    每个组件实例只会在初始化时调用一次 ，状态通过引用储存在 <code>setup()</code> 的闭包内。 </p>\n  <p data-pid=\"eIwmCeKN\"> 也就是说，Composition API 相比 React Hooks： </p>\n  <ul>\n    <li data-pid=\"xvul6_a6\">整体上更符合 JavaScript 的直觉； </li>\n    <ul>\n      <li data-pid=\"I-_5HxJR\">Mutable 写法。 </li>\n    </ul>\n    <li data-pid=\"Dbe9xIks\">不受调用顺序的限制，可以有条件地被调用； </li>\n    <ul>\n      <li data-pid=\"14d6KrXq\">Hooks 需要使用下标来获取对应的 state。 </li>\n    </ul>\n    <li data-pid=\"ITuR--Mc\">不会在后续更新时不断产生大量的内联函数而影响引擎优化或是导致 GC 压力； </li>\n    <ul>\n      <li data-pid=\"OCdzF7ke\">Hooks 的每次渲染都是单独的闭包。 </li>\n    </ul>\n    <li data-pid=\"sJud2Tht\">不需要总是使用 <code>useCallback</code> 来缓存传给子组件的回调以防止过度更新； </li>\n    <ul>\n      <li data-pid=\"MJOZSOIQ\">如果给子组件传了函数，每次渲染都会被当作新 props。 </li>\n    </ul>\n    <li data-pid=\"LaKlKgt_\">不需要担心传了错误的依赖数组给 <code>useEffect/useMemo/useCallback</code> 从而导致回调中使用了过期的值。 </li>\n    <ul>\n      <li data-pid=\"71dmEK53\">Vue 的依赖收集是全自动的，可以做到最小粒度的更新。 </li>\n    </ul>\n  </ul>\n  <p data-pid=\"xxxm1Mna\">这都是基于 Vue 的响应式更新能力。 </p>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <p data-pid=\"6wCLdS0z\">有兴趣的同学可以通过下面的链接了解 React Hooks 的心智模型有多么沉重： </p>\n  <p data-pid=\"dXcX4NpU\"><a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//zh-hans.reactjs.org/docs/hooks-faq.html%23from-classes-to-hooks\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Hooks FAQ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"1O7wFzO1\"><a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">使用 React Hooks 声明\n      setInterval <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"tOfqa6Ta\"><a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/a-complete-guide-to-useeffect/\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">useEffect 完整指南 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>\n  </p>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <p data-pid=\"jW2h8EBi\"><b>3.5 那么它有缺点吗？ </b></p>\n  <p data-pid=\"ZAvsH4cw\"><b>3.5.1 ref 和 reactive 的区别 </b></p>\n  <table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\">\n    <thead style=\"background-color: gray;\">\n      <th>ref</th>\n      <th>reactive</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>可以处理原始值，也可以处理对象</td>\n        <td>只能处理对象</td>\n      </tr>\n      <tr>\n        <td>需要加 .value，需要考虑自动解包</td>\n        <td>不需要加 .value</td>\n      </tr>\n      <tr>\n        <td>有单独的类型</td>\n        <td>和普通的对象没有什么区别，无法直接通过类型判断是否是响应式</td>\n      </tr>\n      <tr>\n        <td>可以使用解构赋值</td>\n        <td>不可以使用解构赋值，会丢失响应式</td>\n      </tr>\n      <tr>\n        <td></td>\n        <td>需要使用箭头函数包装才能使用 watch</td>\n      </tr>\n    </tbody>\n  </table>\n  <p data-pid=\"aVtdgg6d\"><b>3.5.2 考虑响应式和 .value </b></p>\n  <p data-pid=\"mIuWJkq7\">虽然写 Composition API 不会有 <code>useEffect</code> 的困扰，还能使用完全一致的生命周期钩子函数，但是此次 Vue 把响应式 API\n    暴露给我们，实际上在编写代码的时候，需要考虑是否是响应式、是否是 ref 和响应式丢失的问题，也会带来一定的心智负担。 </p>\n  <h2>总结</h2>\n  <blockquote data-pid=\"dwydTu3z\"><b>面向生命周期编程 vs 面向业务逻辑编程</b> <br>Composition API\n    带来了组件逻辑抽取和复用的优化，抽取逻辑会变得非常简单，所以我们不必只在需要复用逻辑的时候才抽取函数，也可以单纯为了更好地组织代码去抽取函数，以此避免每个逻辑任务的代码都被选项切成了多个碎片分散在各处。\n    <br>当然如果组件足够简单，我们还是可以只使用 Options API，以原来的习惯写代码。\n  </blockquote>\n  <p class=\"ztext-empty-paragraph\"><br></p>\n  <blockquote data-pid=\"nZaUCgyk\"><b>我可以在 Vue 2 中使用吗？</b> <br>可以的，官方团队提供了可供 Vue 2 使用的插件： <a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//github.com/vuejs/composition-api\"  class=\" wrap external\"\n      target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">@vue/composition-api <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。 <br>另外他们也计划让\n    Composition API 在 Vue 2.7 原生支持。</blockquote>\n  <h2>参考 </h2>\n  <p data-pid=\"0nG5Lg4p\"><a class=\"link\" \n       href=\"https://link.zhihu.com/?target=https%3A//v3.cn.vuejs.org/guide/composition-api-introduction.html%23%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E7%25BB%2584%25E5%2590%2588%25E5%25BC%258F-api\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">官方文档 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"CEjDQuk6\"><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/68477600\"  class=\"internal\"\n      data-za-detail-view-id=\"1043\">Vue Function-based API RFC <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"PF0H7EFU\"><a class=\"link\"   href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1x54y1V7H6/\" \n      class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">VueUse 作者 Anthony\n      Fu 分享可组合的 Vue <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n  <p data-pid=\"cxCCci-C\"><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/146097763\"  class=\"internal\"\n      data-za-detail-view-id=\"1043\">深入理解 Vue3 Reactivity API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> </p>\n</div>"},{"title":"【一些有趣的问题】01，作用域与闭包","date":"2021-02-23T01:30:54.000Z","_content":"\n## 问题 1\n`以下语句会如何输出？`\n```javascript\nfor(var i=0;i<5;i++){\n    console.log('i',i)\n    setTimeout(function(){\n        console.log(i);\n    },1000)\n}\n```\n`结果`：![结果](./someInterestingQuestions01/q1.png)\n\n`原因`：异步代码会在同步代码执行完毕后执行\n\n`分析`：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了 5\n\n**解决方案一：**\n```javascript\nfor(var i=0;i<5;i++){\n    (function(i){\n        setTimeout(function(){\n            console.log(i);\n        },1000)\n    })(i)\n}\n```\n` 结果`：1 秒后连续打印 0 1 2 3 4 \n\n`原因`：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为 5\n\n**解决方案二：**\n```javascript\nfor(let i=0;i<5;i++){\n  setTimeourt(function(){\n    console.log(i);\n  },1000)\n}\n```\n`结果`：1 秒后连续打印 0 1 2 3 4\n\n`原因`：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。\n\n---\n\n## 问题 2\n```javascript\nfunction Foo() {\n    var i = 0;\n    return function() {\n        console.log(i++);\n    }\n}\n\nvar f1 = Foo(),\n    f2 = Foo();\nf1();\nf2();\n```\n`结果`：![结果](./someInterestingQuestions01/q2.png)\n\n`原因`：\n\n第一次调用函数 f1()：打印 0，创建闭包，此时局部变量 i=1；\n\n第二次调用函数 f1()：打印 1，创建闭包，此时局部变量 i=2；\n\n第一次调用函数 f2()：打印 0，因为函数 f1、f2 指向不同对象。\n\n--- \n## 问题 3\n```javascript\nfunction Foo() {\n  // 类变量 a\n  Foo.a = function () {\n    console.log(1);\n  }\n  // 实例变量 a，每个实例都有一个\n  this.a = function () {\n    console.log(2);\n  }\n}\n// 实例变量 a，所有实例共享一个\nFoo.prototype.a = function () {\n  console.log(3);\n}\n// 类变量 a\nFoo.a = function () {\n  console.log(4);\n}\n\nFoo.a();\nlet obj = new Foo();\nobj.a();\nFoo.a();\n```\n`结果`：![结果](./someInterestingQuestions01/q3.png)\n\n`原因`：\n\n打印 4：一开始 Foo 方法并未调用，输出的是函数体外的变量 a，此时可以把 Foo 当作对象，Foo.a 为其对象属性。\n\n打印 2：使用 new 操作符实例化 Foo 后，obj.a 首先查找 obj 上的标识符 a，如果找不到的话沿着原型链向上查找，也找不到的话返回 undefined。\n\n打印 1：此时 Foo 方法已经调用，方法体内的类变量 a 覆盖原来已经赋值的类变量 a。\n","source":"_posts/someInterestingQuestions01.md","raw":"---\ntitle: 【一些有趣的问题】01，作用域与闭包\ndate: 2021-02-23 9:30:54\ntags: [JS]\ncategories: [一些有趣的问题]\n---\n\n## 问题 1\n`以下语句会如何输出？`\n```javascript\nfor(var i=0;i<5;i++){\n    console.log('i',i)\n    setTimeout(function(){\n        console.log(i);\n    },1000)\n}\n```\n`结果`：![结果](./someInterestingQuestions01/q1.png)\n\n`原因`：异步代码会在同步代码执行完毕后执行\n\n`分析`：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了 5\n\n**解决方案一：**\n```javascript\nfor(var i=0;i<5;i++){\n    (function(i){\n        setTimeout(function(){\n            console.log(i);\n        },1000)\n    })(i)\n}\n```\n` 结果`：1 秒后连续打印 0 1 2 3 4 \n\n`原因`：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为 5\n\n**解决方案二：**\n```javascript\nfor(let i=0;i<5;i++){\n  setTimeourt(function(){\n    console.log(i);\n  },1000)\n}\n```\n`结果`：1 秒后连续打印 0 1 2 3 4\n\n`原因`：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。\n\n---\n\n## 问题 2\n```javascript\nfunction Foo() {\n    var i = 0;\n    return function() {\n        console.log(i++);\n    }\n}\n\nvar f1 = Foo(),\n    f2 = Foo();\nf1();\nf2();\n```\n`结果`：![结果](./someInterestingQuestions01/q2.png)\n\n`原因`：\n\n第一次调用函数 f1()：打印 0，创建闭包，此时局部变量 i=1；\n\n第二次调用函数 f1()：打印 1，创建闭包，此时局部变量 i=2；\n\n第一次调用函数 f2()：打印 0，因为函数 f1、f2 指向不同对象。\n\n--- \n## 问题 3\n```javascript\nfunction Foo() {\n  // 类变量 a\n  Foo.a = function () {\n    console.log(1);\n  }\n  // 实例变量 a，每个实例都有一个\n  this.a = function () {\n    console.log(2);\n  }\n}\n// 实例变量 a，所有实例共享一个\nFoo.prototype.a = function () {\n  console.log(3);\n}\n// 类变量 a\nFoo.a = function () {\n  console.log(4);\n}\n\nFoo.a();\nlet obj = new Foo();\nobj.a();\nFoo.a();\n```\n`结果`：![结果](./someInterestingQuestions01/q3.png)\n\n`原因`：\n\n打印 4：一开始 Foo 方法并未调用，输出的是函数体外的变量 a，此时可以把 Foo 当作对象，Foo.a 为其对象属性。\n\n打印 2：使用 new 操作符实例化 Foo 后，obj.a 首先查找 obj 上的标识符 a，如果找不到的话沿着原型链向上查找，也找不到的话返回 undefined。\n\n打印 1：此时 Foo 方法已经调用，方法体内的类变量 a 覆盖原来已经赋值的类变量 a。\n","slug":"someInterestingQuestions01","published":1,"updated":"2023-02-21T12:28:31.923Z","_id":"cle8bsvfy000mj0h8c2ue4i9g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题 1\"></a>问题 1</h2><p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i&#x27;</span>,i)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q1.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：异步代码会在同步代码执行完毕后执行</p>\n<p><code>分析</code>：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了 5</p>\n<p><strong>解决方案一：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code> 结果</code>：1 秒后连续打印 0 1 2 3 4 </p>\n<p><code>原因</code>：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为 5</p>\n<p><strong>解决方案二：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"title function_\">setTimeourt</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：1 秒后连续打印 0 1 2 3 4</p>\n<p><code>原因</code>：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</p>\n<hr>\n<h2 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题 2\"></a>问题 2</h2><div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"title class_\">Foo</span>(),</span><br><span class=\"line\">    f2 = <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"title function_\">f1</span>();</span><br><span class=\"line\"><span class=\"title function_\">f2</span>();</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q2.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>第一次调用函数 f1()：打印 0，创建闭包，此时局部变量 i&#x3D;1；</p>\n<p>第二次调用函数 f1()：打印 1，创建闭包，此时局部变量 i&#x3D;2；</p>\n<p>第一次调用函数 f2()：打印 0，因为函数 f1、f2 指向不同对象。</p>\n<hr>\n<h2 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题 3\"></a>问题 3</h2><div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 类变量 a</span></span><br><span class=\"line\">  <span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 实例变量 a，每个实例都有一个</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例变量 a，所有实例共享一个</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类变量 a</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q3.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>打印 4：一开始 Foo 方法并未调用，输出的是函数体外的变量 a，此时可以把 Foo 当作对象，Foo.a 为其对象属性。</p>\n<p>打印 2：使用 new 操作符实例化 Foo 后，obj.a 首先查找 obj 上的标识符 a，如果找不到的话沿着原型链向上查找，也找不到的话返回 undefined。</p>\n<p>打印 1：此时 Foo 方法已经调用，方法体内的类变量 a 覆盖原来已经赋值的类变量 a。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题 1\"></a>问题 1</h2><p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i&#x27;</span>,i)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q1.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：异步代码会在同步代码执行完毕后执行</p>\n<p><code>分析</code>：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了 5</p>\n<p><strong>解决方案一：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code> 结果</code>：1 秒后连续打印 0 1 2 3 4 </p>\n<p><code>原因</code>：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为 5</p>\n<p><strong>解决方案二：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"title function_\">setTimeourt</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：1 秒后连续打印 0 1 2 3 4</p>\n<p><code>原因</code>：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</p>\n<hr>\n<h2 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题 2\"></a>问题 2</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"title class_\">Foo</span>(),</span><br><span class=\"line\">    f2 = <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"title function_\">f1</span>();</span><br><span class=\"line\"><span class=\"title function_\">f2</span>();</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q2.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>第一次调用函数 f1()：打印 0，创建闭包，此时局部变量 i&#x3D;1；</p>\n<p>第二次调用函数 f1()：打印 1，创建闭包，此时局部变量 i&#x3D;2；</p>\n<p>第一次调用函数 f2()：打印 0，因为函数 f1、f2 指向不同对象。</p>\n<hr>\n<h2 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题 3\"></a>问题 3</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 类变量 a</span></span><br><span class=\"line\">  <span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 实例变量 a，每个实例都有一个</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例变量 a，所有实例共享一个</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类变量 a</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q3.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>打印 4：一开始 Foo 方法并未调用，输出的是函数体外的变量 a，此时可以把 Foo 当作对象，Foo.a 为其对象属性。</p>\n<p>打印 2：使用 new 操作符实例化 Foo 后，obj.a 首先查找 obj 上的标识符 a，如果找不到的话沿着原型链向上查找，也找不到的话返回 undefined。</p>\n<p>打印 1：此时 Foo 方法已经调用，方法体内的类变量 a 覆盖原来已经赋值的类变量 a。</p>\n"},{"title":"【Vue3 源码学习】01，从 createApp() 方法开始","date":"2022-06-03T02:56:48.000Z","_content":"\n![s0](./vueSourceCodeStudy01/s0.jpg)\nPS: 这是一张很有用的图\n\n## 前言：怎样学习源码？\n1. 有主线，两种方式\n   1. 从入口入手，package.json-->\n   2. 从逻辑入手，createApp()\n2. 提出一个问题，在源码中找答案\n3. 学习一步整理一步，然后复盘复习（画图）\n4. 有所掌握后造轮子实践\n5. 写博客或者做视频，在知识分享中巩固知识\n\n## 首先提几个问题\n- 第一个问题：app 实例如何创建？\n- 第二个问题：app 实例中有些什么？\n\n## 第一个问题：app 实例如何创建？\n![s1-1](./vueSourceCodeStudy01/s1-1.png)\n![s1-2](./vueSourceCodeStudy01/s1-2.png)\ncreateApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。\n![s1-3](./vueSourceCodeStudy01/s1-3.png) \n查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。\n![s1-4](./vueSourceCodeStudy01/s1-4.png)\n![s1-5](./vueSourceCodeStudy01/s1-5.png)\n\n## 第二个问题：app 实例中有些什么？\n在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上\n![s1-6](./vueSourceCodeStudy01/s1-6.png)\n\n## 一些思考\n可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化\n```javascript\nimport myComponent from './vueSourceCodeStudy01/myComponent';\nimport myPlugin from './myPlugin';\n\n// vue2\nVue.component('myComponent',myComponent);\nVue.use(myPlugin);\n\n// vue3\ncreateApp({...}).coponent(myComponent).use(myPlugin).mount('#app')\n```\n这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。","source":"_posts/vueSourceCodeStudy01.md","raw":"---\ntitle: 【Vue3 源码学习】01，从 createApp() 方法开始\ndate: 2022-06-03 10:56:48\ntags: [vue]\ncategories: [源码]\n---\n\n![s0](./vueSourceCodeStudy01/s0.jpg)\nPS: 这是一张很有用的图\n\n## 前言：怎样学习源码？\n1. 有主线，两种方式\n   1. 从入口入手，package.json-->\n   2. 从逻辑入手，createApp()\n2. 提出一个问题，在源码中找答案\n3. 学习一步整理一步，然后复盘复习（画图）\n4. 有所掌握后造轮子实践\n5. 写博客或者做视频，在知识分享中巩固知识\n\n## 首先提几个问题\n- 第一个问题：app 实例如何创建？\n- 第二个问题：app 实例中有些什么？\n\n## 第一个问题：app 实例如何创建？\n![s1-1](./vueSourceCodeStudy01/s1-1.png)\n![s1-2](./vueSourceCodeStudy01/s1-2.png)\ncreateApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。\n![s1-3](./vueSourceCodeStudy01/s1-3.png) \n查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。\n![s1-4](./vueSourceCodeStudy01/s1-4.png)\n![s1-5](./vueSourceCodeStudy01/s1-5.png)\n\n## 第二个问题：app 实例中有些什么？\n在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上\n![s1-6](./vueSourceCodeStudy01/s1-6.png)\n\n## 一些思考\n可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化\n```javascript\nimport myComponent from './vueSourceCodeStudy01/myComponent';\nimport myPlugin from './myPlugin';\n\n// vue2\nVue.component('myComponent',myComponent);\nVue.use(myPlugin);\n\n// vue3\ncreateApp({...}).coponent(myComponent).use(myPlugin).mount('#app')\n```\n这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。","slug":"vueSourceCodeStudy01","published":1,"updated":"2023-02-21T12:28:47.916Z","_id":"cle8bsvfz000rj0h8b1occco2","comments":1,"layout":"post","photos":[],"link":"","content":"<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s0.jpg\"\n                      class=\"\" title=\"s0\"\n                >\n<p>PS: 这是一张很有用的图</p>\n<h2 id=\"前言：怎样学习源码？\"><a href=\"#前言：怎样学习源码？\" class=\"headerlink\" title=\"前言：怎样学习源码？\"></a>前言：怎样学习源码？</h2><ol>\n<li>有主线，两种方式<ol>\n<li>从入口入手，package.json–&gt;</li>\n<li>从逻辑入手，createApp()</li>\n</ol>\n</li>\n<li>提出一个问题，在源码中找答案</li>\n<li>学习一步整理一步，然后复盘复习（画图）</li>\n<li>有所掌握后造轮子实践</li>\n<li>写博客或者做视频，在知识分享中巩固知识</li>\n</ol>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ul>\n<li>第一个问题：app 实例如何创建？</li>\n<li>第二个问题：app 实例中有些什么？</li>\n</ul>\n<h2 id=\"第一个问题：app-实例如何创建？\"><a href=\"#第一个问题：app-实例如何创建？\" class=\"headerlink\" title=\"第一个问题：app 实例如何创建？\"></a>第一个问题：app 实例如何创建？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-1.png\"\n                      class=\"\" title=\"s1-1\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-2.png\"\n                      class=\"\" title=\"s1-2\"\n                >\n<p>createApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-3.png\"\n                      class=\"\" title=\"s1-3\"\n                > \n<p>查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-4.png\"\n                      class=\"\" title=\"s1-4\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-5.png\"\n                      class=\"\" title=\"s1-5\"\n                >\n\n<h2 id=\"第二个问题：app-实例中有些什么？\"><a href=\"#第二个问题：app-实例中有些什么？\" class=\"headerlink\" title=\"第二个问题：app 实例中有些什么？\"></a>第二个问题：app 实例中有些什么？</h2><p>在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-6.png\"\n                      class=\"\" title=\"s1-6\"\n                >\n\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><p>可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myComponent <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./vueSourceCodeStudy01/myComponent&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> myPlugin <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myPlugin&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue2</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;myComponent&#x27;</span>,myComponent);</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(myPlugin);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue3</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;...&#125;).<span class=\"title function_\">coponent</span>(myComponent).<span class=\"title function_\">use</span>(myPlugin).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n<p>这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。</p>\n","site":{"data":{}},"excerpt":"","more":"<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s0.jpg\"\n                      class=\"\" title=\"s0\"\n                >\n<p>PS: 这是一张很有用的图</p>\n<h2 id=\"前言：怎样学习源码？\"><a href=\"#前言：怎样学习源码？\" class=\"headerlink\" title=\"前言：怎样学习源码？\"></a>前言：怎样学习源码？</h2><ol>\n<li>有主线，两种方式<ol>\n<li>从入口入手，package.json–&gt;</li>\n<li>从逻辑入手，createApp()</li>\n</ol>\n</li>\n<li>提出一个问题，在源码中找答案</li>\n<li>学习一步整理一步，然后复盘复习（画图）</li>\n<li>有所掌握后造轮子实践</li>\n<li>写博客或者做视频，在知识分享中巩固知识</li>\n</ol>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ul>\n<li>第一个问题：app 实例如何创建？</li>\n<li>第二个问题：app 实例中有些什么？</li>\n</ul>\n<h2 id=\"第一个问题：app-实例如何创建？\"><a href=\"#第一个问题：app-实例如何创建？\" class=\"headerlink\" title=\"第一个问题：app 实例如何创建？\"></a>第一个问题：app 实例如何创建？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-1.png\"\n                      class=\"\" title=\"s1-1\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-2.png\"\n                      class=\"\" title=\"s1-2\"\n                >\n<p>createApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-3.png\"\n                      class=\"\" title=\"s1-3\"\n                > \n<p>查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-4.png\"\n                      class=\"\" title=\"s1-4\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-5.png\"\n                      class=\"\" title=\"s1-5\"\n                >\n\n<h2 id=\"第二个问题：app-实例中有些什么？\"><a href=\"#第二个问题：app-实例中有些什么？\" class=\"headerlink\" title=\"第二个问题：app 实例中有些什么？\"></a>第二个问题：app 实例中有些什么？</h2><p>在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-6.png\"\n                      class=\"\" title=\"s1-6\"\n                >\n\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><p>可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myComponent <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./vueSourceCodeStudy01/myComponent&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> myPlugin <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myPlugin&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue2</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;myComponent&#x27;</span>,myComponent);</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(myPlugin);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue3</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;...&#125;).<span class=\"title function_\">coponent</span>(myComponent).<span class=\"title function_\">use</span>(myPlugin).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。</p>\n"},{"title":"【Vue3 源码学习】02，初始 mount() 方法","date":"2022-06-03T02:56:48.000Z","_content":"\n## 前言\n书接上回，在 runtime-core 包下的文件`/runtime-core/src/apiCreateApp.ts`中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，`mount()`就在其中。\n\n## 首先提几个问题\n1. 初次挂载时 mount() 方法做了些什么？ \n2. 回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？\n![s2-0](./vueSourceCodeStudy02/s0.png)\n\n## 初次挂载时 mount() 方法干了些什么？\n![s2-1](./vueSourceCodeStudy02/s2-1.png)\n\n首先进入 mount() 方法，它接收 3 个参数：`rootContainer`，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：\n```javascript\n// 可以看到我们只传了一个字符串，是一个 CSS 选择器。\ncreateApp({}).mount('#app')\n```\n\n再看方法体：\n![s2-2](./vueSourceCodeStudy02/s2-2.png)\n\n可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。\n\n让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在`/runtime-core/src/renderer.ts`目录下可以找到。\n![s2-3](./vueSourceCodeStudy02/s2-3.png)\n\n![s2-4](./vueSourceCodeStudy02/s2-4.png)\n\n接下来找到 render() 方法的方法体：\n![s2-5](./vueSourceCodeStudy02/s2-5.png)\n\n可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个`patch()`方法\n\n我们来看一下这个 patch() 方法中传了些什么：\n![s2-6](./vueSourceCodeStudy02/s2-6.png)\n\n可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向`div#app`，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：\n![s2-7](./vueSourceCodeStudy02/s2-7.png)\n\n之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：\n![s2-8](./vueSourceCodeStudy02/s2-8.png)\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据`type`和`shapeFlag`的值进行不同的操作：\n![s2-10](./vueSourceCodeStudy02/s2-10.png)\n\n此时 shapeFlag 的值为 4，进行位与运算值为 true。以下`位移枚举`可以学一下，它的好处是清晰、好计算并且可以进行多值判断。\n![s2-11](./vueSourceCodeStudy02/s2-11.png)\n\n初次挂载时执行`processComponent()`方法，进入方法体 processComponent()：\n![s2-12](./vueSourceCodeStudy02/s2-12.png)\n\n可以看到走进 else 代码块，触发方法`mountComponent()`，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个`setupRenderEffect()`方法，\n![s2-13](./vueSourceCodeStudy02/s2-13.png)\n\n这个方法创建了一个执行器 `effect`，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。\n\n## 总结\n\n总结一下，初次挂载时 mount() 方法执行流程大概这样：\n\nmount()-->createVNode()-->render()-->patch()-->processComponent()-->mountComponent()-->createComponentInstance-->setupRenderEffect()-->ReactiveEffect()-->update()-->effect.run()\n\n简洁一点就是：\n\nmount()-->render()-->patch()\n\n可以通过调用堆栈查看：\n![s2-14](./vueSourceCodeStudy02/s2-14.png)\n\n回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：\n![s2-15](./vueSourceCodeStudy02/s2-15.png)\n\n本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。\n\n若有错误请大佬指出，感激不尽。\n","source":"_posts/vueSourceCodeStudy02.md","raw":"---\ntitle: 【Vue3 源码学习】02，初始 mount() 方法\ndate: 2022-06-03 10:56:48\ntags: [vue]\ncategories: [源码]\n---\n\n## 前言\n书接上回，在 runtime-core 包下的文件`/runtime-core/src/apiCreateApp.ts`中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，`mount()`就在其中。\n\n## 首先提几个问题\n1. 初次挂载时 mount() 方法做了些什么？ \n2. 回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？\n![s2-0](./vueSourceCodeStudy02/s0.png)\n\n## 初次挂载时 mount() 方法干了些什么？\n![s2-1](./vueSourceCodeStudy02/s2-1.png)\n\n首先进入 mount() 方法，它接收 3 个参数：`rootContainer`，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：\n```javascript\n// 可以看到我们只传了一个字符串，是一个 CSS 选择器。\ncreateApp({}).mount('#app')\n```\n\n再看方法体：\n![s2-2](./vueSourceCodeStudy02/s2-2.png)\n\n可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。\n\n让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在`/runtime-core/src/renderer.ts`目录下可以找到。\n![s2-3](./vueSourceCodeStudy02/s2-3.png)\n\n![s2-4](./vueSourceCodeStudy02/s2-4.png)\n\n接下来找到 render() 方法的方法体：\n![s2-5](./vueSourceCodeStudy02/s2-5.png)\n\n可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个`patch()`方法\n\n我们来看一下这个 patch() 方法中传了些什么：\n![s2-6](./vueSourceCodeStudy02/s2-6.png)\n\n可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向`div#app`，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：\n![s2-7](./vueSourceCodeStudy02/s2-7.png)\n\n之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：\n![s2-8](./vueSourceCodeStudy02/s2-8.png)\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据`type`和`shapeFlag`的值进行不同的操作：\n![s2-10](./vueSourceCodeStudy02/s2-10.png)\n\n此时 shapeFlag 的值为 4，进行位与运算值为 true。以下`位移枚举`可以学一下，它的好处是清晰、好计算并且可以进行多值判断。\n![s2-11](./vueSourceCodeStudy02/s2-11.png)\n\n初次挂载时执行`processComponent()`方法，进入方法体 processComponent()：\n![s2-12](./vueSourceCodeStudy02/s2-12.png)\n\n可以看到走进 else 代码块，触发方法`mountComponent()`，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个`setupRenderEffect()`方法，\n![s2-13](./vueSourceCodeStudy02/s2-13.png)\n\n这个方法创建了一个执行器 `effect`，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。\n\n## 总结\n\n总结一下，初次挂载时 mount() 方法执行流程大概这样：\n\nmount()-->createVNode()-->render()-->patch()-->processComponent()-->mountComponent()-->createComponentInstance-->setupRenderEffect()-->ReactiveEffect()-->update()-->effect.run()\n\n简洁一点就是：\n\nmount()-->render()-->patch()\n\n可以通过调用堆栈查看：\n![s2-14](./vueSourceCodeStudy02/s2-14.png)\n\n回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：\n![s2-15](./vueSourceCodeStudy02/s2-15.png)\n\n本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。\n\n若有错误请大佬指出，感激不尽。\n","slug":"vueSourceCodeStudy02","published":1,"updated":"2023-02-21T12:28:50.400Z","_id":"cle8bsvg0000uj0h80ssp9wdy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>书接上回，在 runtime-core 包下的文件<code>/runtime-core/src/apiCreateApp.ts</code>中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，<code>mount()</code>就在其中。</p>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ol>\n<li>初次挂载时 mount() 方法做了些什么？ </li>\n<li>回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s0.png\"\n                      class=\"\" title=\"s2-0\"\n                ></li>\n</ol>\n<h2 id=\"初次挂载时-mount-方法干了些什么？\"><a href=\"#初次挂载时-mount-方法干了些什么？\" class=\"headerlink\" title=\"初次挂载时 mount() 方法干了些什么？\"></a>初次挂载时 mount() 方法干了些什么？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-1.png\"\n                      class=\"\" title=\"s2-1\"\n                >\n\n<p>首先进入 mount() 方法，它接收 3 个参数：<code>rootContainer</code>，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以看到我们只传了一个字符串，是一个 CSS 选择器。</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;&#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>再看方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-2.png\"\n                      class=\"\" title=\"s2-2\"\n                >\n\n<p>可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。</p>\n<p>让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在<code>/runtime-core/src/renderer.ts</code>目录下可以找到。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-3.png\"\n                      class=\"\" title=\"s2-3\"\n                >\n\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-4.png\"\n                      class=\"\" title=\"s2-4\"\n                >\n\n<p>接下来找到 render() 方法的方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-5.png\"\n                      class=\"\" title=\"s2-5\"\n                >\n\n<p>可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个<code>patch()</code>方法</p>\n<p>我们来看一下这个 patch() 方法中传了些什么：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-6.png\"\n                      class=\"\" title=\"s2-6\"\n                >\n\n<p>可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向<code>div#app</code>，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-7.png\"\n                      class=\"\" title=\"s2-7\"\n                >\n\n<p>之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-8.png\"\n                      class=\"\" title=\"s2-8\"\n                >\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n<p>沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据<code>type</code>和<code>shapeFlag</code>的值进行不同的操作：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-10.png\"\n                      class=\"\" title=\"s2-10\"\n                >\n\n<p>此时 shapeFlag 的值为 4，进行位与运算值为 true。以下<code>位移枚举</code>可以学一下，它的好处是清晰、好计算并且可以进行多值判断。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-11.png\"\n                      class=\"\" title=\"s2-11\"\n                >\n\n<p>初次挂载时执行<code>processComponent()</code>方法，进入方法体 processComponent()：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-12.png\"\n                      class=\"\" title=\"s2-12\"\n                >\n\n<p>可以看到走进 else 代码块，触发方法<code>mountComponent()</code>，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个<code>setupRenderEffect()</code>方法，</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-13.png\"\n                      class=\"\" title=\"s2-13\"\n                >\n\n<p>这个方法创建了一个执行器 <code>effect</code>，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下，初次挂载时 mount() 方法执行流程大概这样：</p>\n<p>mount()–&gt;createVNode()–&gt;render()–&gt;patch()–&gt;processComponent()–&gt;mountComponent()–&gt;createComponentInstance–&gt;setupRenderEffect()–&gt;ReactiveEffect()–&gt;update()–&gt;effect.run()</p>\n<p>简洁一点就是：</p>\n<p>mount()–&gt;render()–&gt;patch()</p>\n<p>可以通过调用堆栈查看：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-14.png\"\n                      class=\"\" title=\"s2-14\"\n                >\n\n<p>回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-15.png\"\n                      class=\"\" title=\"s2-15\"\n                >\n\n<p>本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。</p>\n<p>若有错误请大佬指出，感激不尽。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>书接上回，在 runtime-core 包下的文件<code>/runtime-core/src/apiCreateApp.ts</code>中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，<code>mount()</code>就在其中。</p>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ol>\n<li>初次挂载时 mount() 方法做了些什么？ </li>\n<li>回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s0.png\"\n                      class=\"\" title=\"s2-0\"\n                ></li>\n</ol>\n<h2 id=\"初次挂载时-mount-方法干了些什么？\"><a href=\"#初次挂载时-mount-方法干了些什么？\" class=\"headerlink\" title=\"初次挂载时 mount() 方法干了些什么？\"></a>初次挂载时 mount() 方法干了些什么？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-1.png\"\n                      class=\"\" title=\"s2-1\"\n                >\n\n<p>首先进入 mount() 方法，它接收 3 个参数：<code>rootContainer</code>，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以看到我们只传了一个字符串，是一个 CSS 选择器。</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;&#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>再看方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-2.png\"\n                      class=\"\" title=\"s2-2\"\n                >\n\n<p>可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。</p>\n<p>让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在<code>/runtime-core/src/renderer.ts</code>目录下可以找到。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-3.png\"\n                      class=\"\" title=\"s2-3\"\n                >\n\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-4.png\"\n                      class=\"\" title=\"s2-4\"\n                >\n\n<p>接下来找到 render() 方法的方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-5.png\"\n                      class=\"\" title=\"s2-5\"\n                >\n\n<p>可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个<code>patch()</code>方法</p>\n<p>我们来看一下这个 patch() 方法中传了些什么：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-6.png\"\n                      class=\"\" title=\"s2-6\"\n                >\n\n<p>可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向<code>div#app</code>，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-7.png\"\n                      class=\"\" title=\"s2-7\"\n                >\n\n<p>之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-8.png\"\n                      class=\"\" title=\"s2-8\"\n                >\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n<p>沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据<code>type</code>和<code>shapeFlag</code>的值进行不同的操作：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-10.png\"\n                      class=\"\" title=\"s2-10\"\n                >\n\n<p>此时 shapeFlag 的值为 4，进行位与运算值为 true。以下<code>位移枚举</code>可以学一下，它的好处是清晰、好计算并且可以进行多值判断。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-11.png\"\n                      class=\"\" title=\"s2-11\"\n                >\n\n<p>初次挂载时执行<code>processComponent()</code>方法，进入方法体 processComponent()：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-12.png\"\n                      class=\"\" title=\"s2-12\"\n                >\n\n<p>可以看到走进 else 代码块，触发方法<code>mountComponent()</code>，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个<code>setupRenderEffect()</code>方法，</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-13.png\"\n                      class=\"\" title=\"s2-13\"\n                >\n\n<p>这个方法创建了一个执行器 <code>effect</code>，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下，初次挂载时 mount() 方法执行流程大概这样：</p>\n<p>mount()–&gt;createVNode()–&gt;render()–&gt;patch()–&gt;processComponent()–&gt;mountComponent()–&gt;createComponentInstance–&gt;setupRenderEffect()–&gt;ReactiveEffect()–&gt;update()–&gt;effect.run()</p>\n<p>简洁一点就是：</p>\n<p>mount()–&gt;render()–&gt;patch()</p>\n<p>可以通过调用堆栈查看：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-14.png\"\n                      class=\"\" title=\"s2-14\"\n                >\n\n<p>回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-15.png\"\n                      class=\"\" title=\"s2-15\"\n                >\n\n<p>本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。</p>\n<p>若有错误请大佬指出，感激不尽。</p>\n"},{"title":"【一些有趣的问题】04，逗号运算符","date":"2021-03-14T14:15:54.000Z","_content":"\n`以下语句会如何输出？`\n```javascript\nfor(let i=0,j=0;i<6,j<5,i++,j++){\n  console.log(i,j);\n}\n```\n在\n## `参考资料`\n","source":"_posts/someInterestingQuestions04.md","raw":"---\ntitle: 【一些有趣的问题】04，逗号运算符\ndate: 2021-03-14 22:15:54\ntags: [JS]\ncategories: [一些有趣的问题]\n---\n\n`以下语句会如何输出？`\n```javascript\nfor(let i=0,j=0;i<6,j<5,i++,j++){\n  console.log(i,j);\n}\n```\n在\n## `参考资料`\n","slug":"someInterestingQuestions04","published":1,"updated":"2023-02-25T06:00:48.964Z","_id":"clee7ax1300037oh8fwqk44ng","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>,j&lt;<span class=\"number\">5</span>,i++,j++)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i,j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>在</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2>","site":{"data":{}},"excerpt":"","more":"<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>,j&lt;<span class=\"number\">5</span>,i++,j++)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i,j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2>"},{"title":"【一些有趣的问题】03，浮点数","date":"2021-03-06T07:15:54.000Z","_content":"\n`以下语句会如何输出？`\n```javascript\n0.1 + 0.2 == 0.3；\n// false\n\n1 - 0.9 == 0.1;\n// false\n```\n在 JS 中只有一种数值类型，以 64 位表示的双精度浮点类型\n\n`解决方法`\n```javascript\n(0.1 + 0.2).toFixed(10) == 0.3;\n// true\n\n(1 - 0.9).toFixed(10) == 0.1;\n// true\n```\n\n`可以把运算封装成方法`\n```javascript\n//加法函数，用来得到精确的加法结果\n//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。\n//调用：accAdd(arg1,arg2)\n//返回值：arg1 加上 arg2 的精确结果\nfunction accAdd(arg1,arg2){\n  var r1,r2,m;\n  try{r1=arg1.toString().split(\".\")[1].length}catch(e){r1=0}\n  try{r2=arg2.toString().split(\".\")[1].length}catch(e){r2=0}\n  m=Math.pow(10,Math.max(r1,r2))\n  return (arg1*m+arg2*m)/m\n}\n//给 Number 类型增加一个 add 方法，调用起来更加方便。\nNumber.prototype.add = function (arg){\n  return accAdd(arg,this);\n}\n \n//减法函数，用来得到精确的减法结果\n//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的减法结果。\n//调用：accSub(arg1,arg2)\n//返回值：arg1 减去 arg2 的精确结果\nfunction accSub(arg1,arg2){\n  var r1,r2,m,n;\n  try{r1=arg1.toString().split(\".\")[1].length}catch(e){r1=0}\n  try{r2=arg2.toString().split(\".\")[1].length}catch(e){r2=0}\n  m=Math.pow(10,Math.max(r1,r2));\n  //last modify by deeka\n  //动态控制精度长度\n  n=(r1>=r2)?r1:r2;\n  return ((arg1*m-arg2*m)/m).toFixed(n);\n}\n \n//除法函数，用来得到精确的除法结果\n//说明：javascript 的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。\n//调用：accDiv(arg1,arg2)\n//返回值：arg1 除以 arg2 的精确结果\nfunction accDiv(arg1,arg2){\n  var t1=0,t2=0,r1,r2;\n  try{t1=arg1.toString().split(\".\")[1].length}catch(e){}\n  try{t2=arg2.toString().split(\".\")[1].length}catch(e){}\n  with(Math){\n    r1=Number(arg1.toString().replace(\".\",\"\"))\n    r2=Number(arg2.toString().replace(\".\",\"\"))\n    return (r1/r2)*pow(10,t2-t1);\n  }\n}\n//给 Number 类型增加一个 div 方法，调用起来更加方便。\nNumber.prototype.div = function (arg){\n  return accDiv(this, arg);\n}\n \n//乘法函数，用来得到精确的乘法结果\n//说明：javascript 的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。\n//调用：accMul(arg1,arg2)\n//返回值：arg1 乘以 arg2 的精确结果\nfunction accMul(arg1,arg2) {\n  var m=0,s1=arg1.toString(),s2=arg2.toString();\n  try{m+=s1.split(\".\")[1].length}catch(e){}\n  try{m+=s2.split(\".\")[1].length}catch(e){}\n  return  Number(s1.replace(\".\",\"\"))*Number(s2.replace(\".\",\"\"))/Math.pow(10,m)\n}\n//给 Number 类型增加一个 mul 方法，调用起来更加方便。\nNumber.prototype.mul = function (arg){\n  return accMul(arg, this);\n}\n<br>//验证一下：\nconsole.log(accAdd(1.79, 0.12));  //1.91\nconsole.log(accSub(2.01, 0.12));  //1.89\nconsole.log(accDiv(0.69, 10));    //0.069<br>console.log(accMul(1.01, 1.3));   //1.313　　\n```\n\n## `参考资料`\n- [浅谈 JavaScript 浮点数及其运算](https://www.cnblogs.com/ppforever/p/5011660.html)\n- [JavaScript 数字\n](https://www.w3school.com.cn/js/js_numbers.asp)","source":"_posts/someInterestingQuestions03.md","raw":"---\ntitle: 【一些有趣的问题】03，浮点数\ndate: 2021-03-06 15:15:54\ntags: [JS]\ncategories: [一些有趣的问题]\n---\n\n`以下语句会如何输出？`\n```javascript\n0.1 + 0.2 == 0.3；\n// false\n\n1 - 0.9 == 0.1;\n// false\n```\n在 JS 中只有一种数值类型，以 64 位表示的双精度浮点类型\n\n`解决方法`\n```javascript\n(0.1 + 0.2).toFixed(10) == 0.3;\n// true\n\n(1 - 0.9).toFixed(10) == 0.1;\n// true\n```\n\n`可以把运算封装成方法`\n```javascript\n//加法函数，用来得到精确的加法结果\n//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。\n//调用：accAdd(arg1,arg2)\n//返回值：arg1 加上 arg2 的精确结果\nfunction accAdd(arg1,arg2){\n  var r1,r2,m;\n  try{r1=arg1.toString().split(\".\")[1].length}catch(e){r1=0}\n  try{r2=arg2.toString().split(\".\")[1].length}catch(e){r2=0}\n  m=Math.pow(10,Math.max(r1,r2))\n  return (arg1*m+arg2*m)/m\n}\n//给 Number 类型增加一个 add 方法，调用起来更加方便。\nNumber.prototype.add = function (arg){\n  return accAdd(arg,this);\n}\n \n//减法函数，用来得到精确的减法结果\n//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的减法结果。\n//调用：accSub(arg1,arg2)\n//返回值：arg1 减去 arg2 的精确结果\nfunction accSub(arg1,arg2){\n  var r1,r2,m,n;\n  try{r1=arg1.toString().split(\".\")[1].length}catch(e){r1=0}\n  try{r2=arg2.toString().split(\".\")[1].length}catch(e){r2=0}\n  m=Math.pow(10,Math.max(r1,r2));\n  //last modify by deeka\n  //动态控制精度长度\n  n=(r1>=r2)?r1:r2;\n  return ((arg1*m-arg2*m)/m).toFixed(n);\n}\n \n//除法函数，用来得到精确的除法结果\n//说明：javascript 的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。\n//调用：accDiv(arg1,arg2)\n//返回值：arg1 除以 arg2 的精确结果\nfunction accDiv(arg1,arg2){\n  var t1=0,t2=0,r1,r2;\n  try{t1=arg1.toString().split(\".\")[1].length}catch(e){}\n  try{t2=arg2.toString().split(\".\")[1].length}catch(e){}\n  with(Math){\n    r1=Number(arg1.toString().replace(\".\",\"\"))\n    r2=Number(arg2.toString().replace(\".\",\"\"))\n    return (r1/r2)*pow(10,t2-t1);\n  }\n}\n//给 Number 类型增加一个 div 方法，调用起来更加方便。\nNumber.prototype.div = function (arg){\n  return accDiv(this, arg);\n}\n \n//乘法函数，用来得到精确的乘法结果\n//说明：javascript 的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。\n//调用：accMul(arg1,arg2)\n//返回值：arg1 乘以 arg2 的精确结果\nfunction accMul(arg1,arg2) {\n  var m=0,s1=arg1.toString(),s2=arg2.toString();\n  try{m+=s1.split(\".\")[1].length}catch(e){}\n  try{m+=s2.split(\".\")[1].length}catch(e){}\n  return  Number(s1.replace(\".\",\"\"))*Number(s2.replace(\".\",\"\"))/Math.pow(10,m)\n}\n//给 Number 类型增加一个 mul 方法，调用起来更加方便。\nNumber.prototype.mul = function (arg){\n  return accMul(arg, this);\n}\n<br>//验证一下：\nconsole.log(accAdd(1.79, 0.12));  //1.91\nconsole.log(accSub(2.01, 0.12));  //1.89\nconsole.log(accDiv(0.69, 10));    //0.069<br>console.log(accMul(1.01, 1.3));   //1.313　　\n```\n\n## `参考资料`\n- [浅谈 JavaScript 浮点数及其运算](https://www.cnblogs.com/ppforever/p/5011660.html)\n- [JavaScript 数字\n](https://www.w3school.com.cn/js/js_numbers.asp)","slug":"someInterestingQuestions03","published":1,"updated":"2023-02-21T12:28:37.346Z","_id":"clee7ax1400047oh82pz61y2a","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> == <span class=\"number\">0.3</span>；</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"number\">0.9</span> == <span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></div>\n<p>在 JS 中只有一种数值类型，以 64 位表示的双精度浮点类型</p>\n<p><code>解决方法</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">10</span>) == <span class=\"number\">0.3</span>;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">1</span> - <span class=\"number\">0.9</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">10</span>) == <span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></div>\n\n<p><code>可以把运算封装成方法</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加法函数，用来得到精确的加法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accAdd(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 加上 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accAdd</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r1,r2,m;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r1=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r2=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  m=<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(r1,r2))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (arg1*m+arg2*m)/m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 add 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accAdd</span>(arg,<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//减法函数，用来得到精确的减法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的减法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accSub(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 减去 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accSub</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r1,r2,m,n;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r1=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r2=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  m=<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(r1,r2));</span><br><span class=\"line\">  <span class=\"comment\">//last modify by deeka</span></span><br><span class=\"line\">  <span class=\"comment\">//动态控制精度长度</span></span><br><span class=\"line\">  n=(r1&gt;=r2)?<span class=\"attr\">r1</span>:r2;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((arg1*m-arg2*m)/m).<span class=\"title function_\">toFixed</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//除法函数，用来得到精确的除法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accDiv(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 除以 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accDiv</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t1=<span class=\"number\">0</span>,t2=<span class=\"number\">0</span>,r1,r2;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;t1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;t2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">with</span>(<span class=\"params\"><span class=\"built_in\">Math</span></span>)&#123;</span><br><span class=\"line\">    r1=<span class=\"title class_\">Number</span>(arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    r2=<span class=\"title class_\">Number</span>(arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (r1/r2)*<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,t2-t1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 div 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">div</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accDiv</span>(<span class=\"variable language_\">this</span>, arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//乘法函数，用来得到精确的乘法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accMul(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 乘以 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accMul</span>(<span class=\"params\">arg1,arg2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m=<span class=\"number\">0</span>,s1=arg1.<span class=\"title function_\">toString</span>(),s2=arg2.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;m+=s1.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;m+=s2.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"title class_\">Number</span>(s1.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))*<span class=\"title class_\">Number</span>(s2.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))/<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 mul 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mul</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accMul</span>(arg, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;br&gt;<span class=\"comment\">//验证一下：</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accAdd</span>(<span class=\"number\">1.79</span>, <span class=\"number\">0.12</span>));  <span class=\"comment\">//1.91</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accSub</span>(<span class=\"number\">2.01</span>, <span class=\"number\">0.12</span>));  <span class=\"comment\">//1.89</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accDiv</span>(<span class=\"number\">0.69</span>, <span class=\"number\">10</span>));    <span class=\"comment\">//0.069&lt;br&gt;console.log(accMul(1.01, 1.3));   //1.313　　</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><ul>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/ppforever/p/5011660.html\" >浅谈 JavaScript 浮点数及其运算 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.w3school.com.cn/js/js_numbers.asp\" >JavaScript 数字\n <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> == <span class=\"number\">0.3</span>；</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"number\">0.9</span> == <span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>在 JS 中只有一种数值类型，以 64 位表示的双精度浮点类型</p>\n<p><code>解决方法</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">10</span>) == <span class=\"number\">0.3</span>;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">1</span> - <span class=\"number\">0.9</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">10</span>) == <span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>可以把运算封装成方法</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加法函数，用来得到精确的加法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accAdd(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 加上 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accAdd</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r1,r2,m;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r1=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r2=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  m=<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(r1,r2))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (arg1*m+arg2*m)/m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 add 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accAdd</span>(arg,<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//减法函数，用来得到精确的减法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的减法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accSub(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 减去 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accSub</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r1,r2,m,n;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r1=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r2=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  m=<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(r1,r2));</span><br><span class=\"line\">  <span class=\"comment\">//last modify by deeka</span></span><br><span class=\"line\">  <span class=\"comment\">//动态控制精度长度</span></span><br><span class=\"line\">  n=(r1&gt;=r2)?<span class=\"attr\">r1</span>:r2;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((arg1*m-arg2*m)/m).<span class=\"title function_\">toFixed</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//除法函数，用来得到精确的除法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accDiv(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 除以 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accDiv</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t1=<span class=\"number\">0</span>,t2=<span class=\"number\">0</span>,r1,r2;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;t1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;t2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">with</span>(<span class=\"params\"><span class=\"built_in\">Math</span></span>)&#123;</span><br><span class=\"line\">    r1=<span class=\"title class_\">Number</span>(arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    r2=<span class=\"title class_\">Number</span>(arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (r1/r2)*<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,t2-t1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 div 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">div</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accDiv</span>(<span class=\"variable language_\">this</span>, arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//乘法函数，用来得到精确的乘法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accMul(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 乘以 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accMul</span>(<span class=\"params\">arg1,arg2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m=<span class=\"number\">0</span>,s1=arg1.<span class=\"title function_\">toString</span>(),s2=arg2.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;m+=s1.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;m+=s2.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"title class_\">Number</span>(s1.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))*<span class=\"title class_\">Number</span>(s2.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))/<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 mul 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mul</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accMul</span>(arg, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;br&gt;<span class=\"comment\">//验证一下：</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accAdd</span>(<span class=\"number\">1.79</span>, <span class=\"number\">0.12</span>));  <span class=\"comment\">//1.91</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accSub</span>(<span class=\"number\">2.01</span>, <span class=\"number\">0.12</span>));  <span class=\"comment\">//1.89</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accDiv</span>(<span class=\"number\">0.69</span>, <span class=\"number\">10</span>));    <span class=\"comment\">//0.069&lt;br&gt;console.log(accMul(1.01, 1.3));   //1.313　　</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><ul>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/ppforever/p/5011660.html\" >浅谈 JavaScript 浮点数及其运算 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.w3school.com.cn/js/js_numbers.asp\" >JavaScript 数字\n <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n"},{"title":"【一些有趣的问题】05，for..in 与 for..of","date":"2021-03-20T03:15:54.000Z","_content":"\n`以下语句会如何输出？`\n```javascript\nlet arr = [3, 5, 7];\narr.foo = \"hello\";\n// 此时 arr 对象的结构：[3,5,7,foo: 'hello']\n\nfor (let i in arr) {\n  console.log(i); // 输出 \"0\", \"1\", \"2\", \"foo\"\n}\n\nfor (let i of arr) {\n  console.log(i); // 输出 \"3\", \"5\", \"7\"\n}\n\n// 注意 for...of 的输出没有出现 \"hello\"\n\n```\n`for...in `\n- 循环一个指定的变量来循环一个对象所有可枚举的属性。JavaScript 会为每一个不同的属性执行指定的语句。\n- 深入一点\n\n`for...of `\n- 在可迭代对象（包括 Array、Map、Set、arguments 等等）上创建了一个循环，对值的每一个独特属性调用一次迭代。\n- 首先会在向访问对象请求一个迭代器对象，然后通过调用迭代器对象的 next() 方法来遍历所有返回值。\n\n`Symbol.iterator`\n-  为每一个对象定义了默认的迭代器。该迭代器可以被 for...of 循环使用。\n- 可以通过 Symbol.iterator 来访问可迭代对象的@@iterator 属性\n```javascript\nvar myArray = [1,2,3];\nvar it = myArray[Symbol.iterator]();\n```\n","source":"_posts/someInterestingQuestions05.md","raw":"---\ntitle: 【一些有趣的问题】05，for..in 与 for..of\ndate: 2021-03-20 11:15:54\ntags: [JS]\ncategories: [一些有趣的问题]\n---\n\n`以下语句会如何输出？`\n```javascript\nlet arr = [3, 5, 7];\narr.foo = \"hello\";\n// 此时 arr 对象的结构：[3,5,7,foo: 'hello']\n\nfor (let i in arr) {\n  console.log(i); // 输出 \"0\", \"1\", \"2\", \"foo\"\n}\n\nfor (let i of arr) {\n  console.log(i); // 输出 \"3\", \"5\", \"7\"\n}\n\n// 注意 for...of 的输出没有出现 \"hello\"\n\n```\n`for...in `\n- 循环一个指定的变量来循环一个对象所有可枚举的属性。JavaScript 会为每一个不同的属性执行指定的语句。\n- 深入一点\n\n`for...of `\n- 在可迭代对象（包括 Array、Map、Set、arguments 等等）上创建了一个循环，对值的每一个独特属性调用一次迭代。\n- 首先会在向访问对象请求一个迭代器对象，然后通过调用迭代器对象的 next() 方法来遍历所有返回值。\n\n`Symbol.iterator`\n-  为每一个对象定义了默认的迭代器。该迭代器可以被 for...of 循环使用。\n- 可以通过 Symbol.iterator 来访问可迭代对象的@@iterator 属性\n```javascript\nvar myArray = [1,2,3];\nvar it = myArray[Symbol.iterator]();\n```\n","slug":"someInterestingQuestions05","published":1,"updated":"2023-02-21T12:28:42.566Z","_id":"clee7ax1400067oh86dck0p8l","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\">arr.<span class=\"property\">foo</span> = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 此时 arr 对象的结构：[3,5,7,foo: &#x27;hello&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 输出 &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 输出 &quot;3&quot;, &quot;5&quot;, &quot;7&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 for...of 的输出没有出现 &quot;hello&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><code>for...in </code></p>\n<ul>\n<li>循环一个指定的变量来循环一个对象所有可枚举的属性。JavaScript 会为每一个不同的属性执行指定的语句。</li>\n<li>深入一点</li>\n</ul>\n<p><code>for...of </code></p>\n<ul>\n<li>在可迭代对象（包括 Array、Map、Set、arguments 等等）上创建了一个循环，对值的每一个独特属性调用一次迭代。</li>\n<li>首先会在向访问对象请求一个迭代器对象，然后通过调用迭代器对象的 next() 方法来遍历所有返回值。</li>\n</ul>\n<p><code>Symbol.iterator</code></p>\n<ul>\n<li>为每一个对象定义了默认的迭代器。该迭代器可以被 for…of 循环使用。</li>\n<li>可以通过 Symbol.iterator 来访问可迭代对象的@@iterator 属性<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myArray = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> it = myArray[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\">arr.<span class=\"property\">foo</span> = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 此时 arr 对象的结构：[3,5,7,foo: &#x27;hello&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 输出 &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 输出 &quot;3&quot;, &quot;5&quot;, &quot;7&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 for...of 的输出没有出现 &quot;hello&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>for...in </code></p>\n<ul>\n<li>循环一个指定的变量来循环一个对象所有可枚举的属性。JavaScript 会为每一个不同的属性执行指定的语句。</li>\n<li>深入一点</li>\n</ul>\n<p><code>for...of </code></p>\n<ul>\n<li>在可迭代对象（包括 Array、Map、Set、arguments 等等）上创建了一个循环，对值的每一个独特属性调用一次迭代。</li>\n<li>首先会在向访问对象请求一个迭代器对象，然后通过调用迭代器对象的 next() 方法来遍历所有返回值。</li>\n</ul>\n<p><code>Symbol.iterator</code></p>\n<ul>\n<li>为每一个对象定义了默认的迭代器。该迭代器可以被 for…of 循环使用。</li>\n<li>可以通过 Symbol.iterator 来访问可迭代对象的@@iterator 属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myArray = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> it = myArray[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"【一些有趣的问题】06，进制转换","date":"2021-03-27T06:15:54.000Z","_content":"\n`以下语句会如何输出？`\n```javascript\n022 - 017\n// 3，18 - 15 = 3\n\n018 - 045\n// -19，18 - 37 = -19\n```\n在 JS 中，在 Number 类型前加 0 会转换为 8 进制，如果原来的值位上有大于 8 的数，则不会进行转换。\n\n在 JS 中，有几种方法来进行进制转换，但只能通过 10 进制中转，即 10 进制转其他进制或者其他进制转 10 进制。\n```javascript\n// 0x 表示十六进制，但是 js 会强制转换为十进制来运算，0xa == 10\nvar a = 0xa;\n// 0 开头表示八进制，同样强制转换为十进制来运算 010 = 8\nvar b = 010;\n\n// Number.parseInt 方法把字符串（只能由字母和数字组成）由低进制转高进制，如二进制转八进制，但是八进制不能转二进制，radix 表示进制，取值 2~36，返回一个字符串。\nNumber.parseInt(string,radix)\nNumber.parseInt('0101',2) // 5\nNumber.parseInt('0101',8) // 65\n\n// Number.toString 方法将十进制数字转换为任意进制的字符串形式，同样，radix 表示进制，取值 2~36\nNumber.toString(radix)\n(10).toString(2) //\"1010\" 转 2 进制\n(10).toString(8) //\"12\" 转 8 进制\n(10).toString(16) //\"a\" 转 16 进制\n(1000).toString(36) //\"rs\" 转 36 进制\n```","source":"_posts/someInterestingQuestions06.md","raw":"---\ntitle: 【一些有趣的问题】06，进制转换\ndate: 2021-03-27 14:15:54\ntags: [JS]\ncategories: [一些有趣的问题]\n---\n\n`以下语句会如何输出？`\n```javascript\n022 - 017\n// 3，18 - 15 = 3\n\n018 - 045\n// -19，18 - 37 = -19\n```\n在 JS 中，在 Number 类型前加 0 会转换为 8 进制，如果原来的值位上有大于 8 的数，则不会进行转换。\n\n在 JS 中，有几种方法来进行进制转换，但只能通过 10 进制中转，即 10 进制转其他进制或者其他进制转 10 进制。\n```javascript\n// 0x 表示十六进制，但是 js 会强制转换为十进制来运算，0xa == 10\nvar a = 0xa;\n// 0 开头表示八进制，同样强制转换为十进制来运算 010 = 8\nvar b = 010;\n\n// Number.parseInt 方法把字符串（只能由字母和数字组成）由低进制转高进制，如二进制转八进制，但是八进制不能转二进制，radix 表示进制，取值 2~36，返回一个字符串。\nNumber.parseInt(string,radix)\nNumber.parseInt('0101',2) // 5\nNumber.parseInt('0101',8) // 65\n\n// Number.toString 方法将十进制数字转换为任意进制的字符串形式，同样，radix 表示进制，取值 2~36\nNumber.toString(radix)\n(10).toString(2) //\"1010\" 转 2 进制\n(10).toString(8) //\"12\" 转 8 进制\n(10).toString(16) //\"a\" 转 16 进制\n(1000).toString(36) //\"rs\" 转 36 进制\n```","slug":"someInterestingQuestions06","published":1,"updated":"2023-02-21T12:41:59.935Z","_id":"clee7ax1500087oh875pk76zq","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">022</span> - <span class=\"number\">017</span></span><br><span class=\"line\"><span class=\"comment\">// 3，18 - 15 = 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">018</span> - <span class=\"number\">045</span></span><br><span class=\"line\"><span class=\"comment\">// -19，18 - 37 = -19</span></span><br></pre></td></tr></table></figure></div>\n<p>在 JS 中，在 Number 类型前加 0 会转换为 8 进制，如果原来的值位上有大于 8 的数，则不会进行转换。</p>\n<p>在 JS 中，有几种方法来进行进制转换，但只能通过 10 进制中转，即 10 进制转其他进制或者其他进制转 10 进制。</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0x 表示十六进制，但是 js 会强制转换为十进制来运算，0xa == 10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0xa</span>;</span><br><span class=\"line\"><span class=\"comment\">// 0 开头表示八进制，同样强制转换为十进制来运算 010 = 8</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Number.parseInt 方法把字符串（只能由字母和数字组成）由低进制转高进制，如二进制转八进制，但是八进制不能转二进制，radix 表示进制，取值 2~36，返回一个字符串。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(string,radix)</span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;0101&#x27;</span>,<span class=\"number\">2</span>) <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;0101&#x27;</span>,<span class=\"number\">8</span>) <span class=\"comment\">// 65</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Number.toString 方法将十进制数字转换为任意进制的字符串形式，同样，radix 表示进制，取值 2~36</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"title function_\">toString</span>(radix)</span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>) <span class=\"comment\">//&quot;1010&quot; 转 2 进制</span></span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">8</span>) <span class=\"comment\">//&quot;12&quot; 转 8 进制</span></span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>) <span class=\"comment\">//&quot;a&quot; 转 16 进制</span></span><br><span class=\"line\">(<span class=\"number\">1000</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">36</span>) <span class=\"comment\">//&quot;rs&quot; 转 36 进制</span></span><br></pre></td></tr></table></figure></div>","site":{"data":{}},"excerpt":"","more":"<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">022</span> - <span class=\"number\">017</span></span><br><span class=\"line\"><span class=\"comment\">// 3，18 - 15 = 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">018</span> - <span class=\"number\">045</span></span><br><span class=\"line\"><span class=\"comment\">// -19，18 - 37 = -19</span></span><br></pre></td></tr></table></figure>\n<p>在 JS 中，在 Number 类型前加 0 会转换为 8 进制，如果原来的值位上有大于 8 的数，则不会进行转换。</p>\n<p>在 JS 中，有几种方法来进行进制转换，但只能通过 10 进制中转，即 10 进制转其他进制或者其他进制转 10 进制。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0x 表示十六进制，但是 js 会强制转换为十进制来运算，0xa == 10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0xa</span>;</span><br><span class=\"line\"><span class=\"comment\">// 0 开头表示八进制，同样强制转换为十进制来运算 010 = 8</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Number.parseInt 方法把字符串（只能由字母和数字组成）由低进制转高进制，如二进制转八进制，但是八进制不能转二进制，radix 表示进制，取值 2~36，返回一个字符串。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(string,radix)</span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;0101&#x27;</span>,<span class=\"number\">2</span>) <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;0101&#x27;</span>,<span class=\"number\">8</span>) <span class=\"comment\">// 65</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Number.toString 方法将十进制数字转换为任意进制的字符串形式，同样，radix 表示进制，取值 2~36</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"title function_\">toString</span>(radix)</span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>) <span class=\"comment\">//&quot;1010&quot; 转 2 进制</span></span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">8</span>) <span class=\"comment\">//&quot;12&quot; 转 8 进制</span></span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>) <span class=\"comment\">//&quot;a&quot; 转 16 进制</span></span><br><span class=\"line\">(<span class=\"number\">1000</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">36</span>) <span class=\"comment\">//&quot;rs&quot; 转 36 进制</span></span><br></pre></td></tr></table></figure>"},{"title":"【Vue3 源码学习】03，初始 mount() 方法","date":"2022-06-03T02:56:48.000Z","_content":"\n## 前言\n书接上回，在 runtime-core 包下的文件`/runtime-core/src/apiCreateApp.ts`中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，`mount()`就在其中。\n\n## 首先提几个问题\n1. 初次挂载时 mount() 方法做了些什么？ \n2. 回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？\n![s2-0](./vueSourceCodeStudy02/s0.png)\n\n## 初次挂载时 mount() 方法干了些什么？\n![s2-1](./vueSourceCodeStudy02/s2-1.png)\n\n首先进入 mount() 方法，它接收 3 个参数：`rootContainer`，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：\n```javascript\n// 可以看到我们只传了一个字符串，是一个 CSS 选择器。\ncreateApp({}).mount('#app')\n```\n\n再看方法体：\n![s2-2](./vueSourceCodeStudy02/s2-2.png)\n\n可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。\n\n让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在`/runtime-core/src/renderer.ts`目录下可以找到。\n![s2-3](./vueSourceCodeStudy02/s2-3.png)\n\n![s2-4](./vueSourceCodeStudy02/s2-4.png)\n\n接下来找到 render() 方法的方法体：\n![s2-5](./vueSourceCodeStudy02/s2-5.png)\n\n可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个`patch()`方法\n\n我们来看一下这个 patch() 方法中传了些什么：\n![s2-6](./vueSourceCodeStudy02/s2-6.png)\n\n可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向`div#app`，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：\n![s2-7](./vueSourceCodeStudy02/s2-7.png)\n\n之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：\n![s2-8](./vueSourceCodeStudy02/s2-8.png)\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据`type`和`shapeFlag`的值进行不同的操作：\n![s2-10](./vueSourceCodeStudy02/s2-10.png)\n\n此时 shapeFlag 的值为 4，进行位与运算值为 true。以下`位移枚举`可以学一下，它的好处是清晰、好计算并且可以进行多值判断。\n![s2-11](./vueSourceCodeStudy02/s2-11.png)\n\n初次挂载时执行`processComponent()`方法，进入方法体 processComponent()：\n![s2-12](./vueSourceCodeStudy02/s2-12.png)\n\n可以看到走进 else 代码块，触发方法`mountComponent()`，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个`setupRenderEffect()`方法，\n![s2-13](./vueSourceCodeStudy02/s2-13.png)\n\n这个方法创建了一个执行器 `effect`，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。\n\n## 总结\n\n总结一下，初次挂载时 mount() 方法执行流程大概这样：\n\nmount()-->createVNode()-->render()-->patch()-->processComponent()-->mountComponent()-->createComponentInstance-->setupRenderEffect()-->ReactiveEffect()-->update()-->effect.run()\n\n简洁一点就是：\n\nmount()-->render()-->patch()\n\n可以通过调用堆栈查看：\n![s2-14](./vueSourceCodeStudy02/s2-14.png)\n\n回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：\n![s2-15](./vueSourceCodeStudy02/s2-15.png)\n\n本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。\n\n若有错误请大佬指出，感激不尽。\n","source":"_posts/vueSourceCodeStudy03.md","raw":"---\ntitle: 【Vue3 源码学习】03，初始 mount() 方法\ndate: 2022-06-03 10:56:48\ntags: [vue]\ncategories: [源码]\n---\n\n## 前言\n书接上回，在 runtime-core 包下的文件`/runtime-core/src/apiCreateApp.ts`中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，`mount()`就在其中。\n\n## 首先提几个问题\n1. 初次挂载时 mount() 方法做了些什么？ \n2. 回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？\n![s2-0](./vueSourceCodeStudy02/s0.png)\n\n## 初次挂载时 mount() 方法干了些什么？\n![s2-1](./vueSourceCodeStudy02/s2-1.png)\n\n首先进入 mount() 方法，它接收 3 个参数：`rootContainer`，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：\n```javascript\n// 可以看到我们只传了一个字符串，是一个 CSS 选择器。\ncreateApp({}).mount('#app')\n```\n\n再看方法体：\n![s2-2](./vueSourceCodeStudy02/s2-2.png)\n\n可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。\n\n让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在`/runtime-core/src/renderer.ts`目录下可以找到。\n![s2-3](./vueSourceCodeStudy02/s2-3.png)\n\n![s2-4](./vueSourceCodeStudy02/s2-4.png)\n\n接下来找到 render() 方法的方法体：\n![s2-5](./vueSourceCodeStudy02/s2-5.png)\n\n可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个`patch()`方法\n\n我们来看一下这个 patch() 方法中传了些什么：\n![s2-6](./vueSourceCodeStudy02/s2-6.png)\n\n可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向`div#app`，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：\n![s2-7](./vueSourceCodeStudy02/s2-7.png)\n\n之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：\n![s2-8](./vueSourceCodeStudy02/s2-8.png)\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据`type`和`shapeFlag`的值进行不同的操作：\n![s2-10](./vueSourceCodeStudy02/s2-10.png)\n\n此时 shapeFlag 的值为 4，进行位与运算值为 true。以下`位移枚举`可以学一下，它的好处是清晰、好计算并且可以进行多值判断。\n![s2-11](./vueSourceCodeStudy02/s2-11.png)\n\n初次挂载时执行`processComponent()`方法，进入方法体 processComponent()：\n![s2-12](./vueSourceCodeStudy02/s2-12.png)\n\n可以看到走进 else 代码块，触发方法`mountComponent()`，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个`setupRenderEffect()`方法，\n![s2-13](./vueSourceCodeStudy02/s2-13.png)\n\n这个方法创建了一个执行器 `effect`，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。\n\n## 总结\n\n总结一下，初次挂载时 mount() 方法执行流程大概这样：\n\nmount()-->createVNode()-->render()-->patch()-->processComponent()-->mountComponent()-->createComponentInstance-->setupRenderEffect()-->ReactiveEffect()-->update()-->effect.run()\n\n简洁一点就是：\n\nmount()-->render()-->patch()\n\n可以通过调用堆栈查看：\n![s2-14](./vueSourceCodeStudy02/s2-14.png)\n\n回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：\n![s2-15](./vueSourceCodeStudy02/s2-15.png)\n\n本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。\n\n若有错误请大佬指出，感激不尽。\n","slug":"vueSourceCodeStudy03","published":1,"updated":"2023-02-28T09:47:50.134Z","_id":"clee7ax16000b7oh8esjzgw2l","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>书接上回，在 runtime-core 包下的文件<code>/runtime-core/src/apiCreateApp.ts</code>中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，<code>mount()</code>就在其中。</p>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ol>\n<li>初次挂载时 mount() 方法做了些什么？ </li>\n<li>回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？</li>\n</ol>\n<h2 id=\"初次挂载时-mount-方法干了些什么？\"><a href=\"#初次挂载时-mount-方法干了些什么？\" class=\"headerlink\" title=\"初次挂载时 mount() 方法干了些什么？\"></a>初次挂载时 mount() 方法干了些什么？</h2>\n\n<p>首先进入 mount() 方法，它接收 3 个参数：<code>rootContainer</code>，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以看到我们只传了一个字符串，是一个 CSS 选择器。</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;&#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>再看方法体：</p>\n\n\n<p>可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。</p>\n<p>让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在<code>/runtime-core/src/renderer.ts</code>目录下可以找到。</p>\n\n\n\n\n<p>接下来找到 render() 方法的方法体：</p>\n\n\n<p>可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个<code>patch()</code>方法</p>\n<p>我们来看一下这个 patch() 方法中传了些什么：</p>\n\n\n<p>可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向<code>div#app</code>，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：</p>\n\n\n<p>之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：</p>\n\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n<p>沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据<code>type</code>和<code>shapeFlag</code>的值进行不同的操作：</p>\n\n\n<p>此时 shapeFlag 的值为 4，进行位与运算值为 true。以下<code>位移枚举</code>可以学一下，它的好处是清晰、好计算并且可以进行多值判断。</p>\n\n\n<p>初次挂载时执行<code>processComponent()</code>方法，进入方法体 processComponent()：</p>\n\n\n<p>可以看到走进 else 代码块，触发方法<code>mountComponent()</code>，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个<code>setupRenderEffect()</code>方法，</p>\n\n\n<p>这个方法创建了一个执行器 <code>effect</code>，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下，初次挂载时 mount() 方法执行流程大概这样：</p>\n<p>mount()–&gt;createVNode()–&gt;render()–&gt;patch()–&gt;processComponent()–&gt;mountComponent()–&gt;createComponentInstance–&gt;setupRenderEffect()–&gt;ReactiveEffect()–&gt;update()–&gt;effect.run()</p>\n<p>简洁一点就是：</p>\n<p>mount()–&gt;render()–&gt;patch()</p>\n<p>可以通过调用堆栈查看：</p>\n\n\n<p>回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：</p>\n\n\n<p>本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。</p>\n<p>若有错误请大佬指出，感激不尽。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>书接上回，在 runtime-core 包下的文件<code>/runtime-core/src/apiCreateApp.ts</code>中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，<code>mount()</code>就在其中。</p>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ol>\n<li>初次挂载时 mount() 方法做了些什么？ </li>\n<li>回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？</li>\n</ol>\n<h2 id=\"初次挂载时-mount-方法干了些什么？\"><a href=\"#初次挂载时-mount-方法干了些什么？\" class=\"headerlink\" title=\"初次挂载时 mount() 方法干了些什么？\"></a>初次挂载时 mount() 方法干了些什么？</h2>\n\n<p>首先进入 mount() 方法，它接收 3 个参数：<code>rootContainer</code>，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以看到我们只传了一个字符串，是一个 CSS 选择器。</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;&#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>再看方法体：</p>\n\n\n<p>可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。</p>\n<p>让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在<code>/runtime-core/src/renderer.ts</code>目录下可以找到。</p>\n\n\n\n\n<p>接下来找到 render() 方法的方法体：</p>\n\n\n<p>可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个<code>patch()</code>方法</p>\n<p>我们来看一下这个 patch() 方法中传了些什么：</p>\n\n\n<p>可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向<code>div#app</code>，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：</p>\n\n\n<p>之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：</p>\n\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n<p>沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据<code>type</code>和<code>shapeFlag</code>的值进行不同的操作：</p>\n\n\n<p>此时 shapeFlag 的值为 4，进行位与运算值为 true。以下<code>位移枚举</code>可以学一下，它的好处是清晰、好计算并且可以进行多值判断。</p>\n\n\n<p>初次挂载时执行<code>processComponent()</code>方法，进入方法体 processComponent()：</p>\n\n\n<p>可以看到走进 else 代码块，触发方法<code>mountComponent()</code>，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个<code>setupRenderEffect()</code>方法，</p>\n\n\n<p>这个方法创建了一个执行器 <code>effect</code>，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下，初次挂载时 mount() 方法执行流程大概这样：</p>\n<p>mount()–&gt;createVNode()–&gt;render()–&gt;patch()–&gt;processComponent()–&gt;mountComponent()–&gt;createComponentInstance–&gt;setupRenderEffect()–&gt;ReactiveEffect()–&gt;update()–&gt;effect.run()</p>\n<p>简洁一点就是：</p>\n<p>mount()–&gt;render()–&gt;patch()</p>\n<p>可以通过调用堆栈查看：</p>\n\n\n<p>回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：</p>\n\n\n<p>本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。</p>\n<p>若有错误请大佬指出，感激不尽。</p>\n"},{"title":"【方法论】前端工程化的一些理解","date":"2022-07-27T18:30:57.000Z","_content":"# 前端工程化的一些理解\n![s0](MethodologyFrontendEngineering/s0.png)\n\n## 前言\n在项目开发中常常听到前端工程化，那么什么是前端工程化，其要义在于何处，我想是值得了解的问题。\n\n它有哪些目的，解决了哪些问题，又以何种方式实现，这些都是值得探究、值得思考的。\n## 什么是前端工程化？\n关于什么是前端工程化，这里先给出我的理解：\n- 狭义上的理解：将开发阶段的代码发布到生产环境，包含：构建，分支管理，自动化测试，部署\n- 广义上理解：前端工程化应该包含从编码开始到发布，运行和维护阶段\n\n简而言之，在前端规模越来越大，业务逻辑越来越复杂的今天，一切可以`提高效率、降低成本、质量保证`的手段都可以称得上是前端工程化。如果说软件工程是面向问题的（将软件开发流程中的共性抽离出来），把软件工程的思想带入到前端开发中，就是前端工程化。\n\n一个前端项目的开发流程可以概括为：\n\n> 需求分析-->`设计阶段`-->`开发阶段`(-->测试阶段-->部署阶段）-->项目维护\n\n也可以说，前端工程化主要发生在设计阶段和开发阶段，解决的是`开发阶段到项目维护阶段`的生产效率问题。\n\n## 前端工程化要解决哪些问题？\n在项目过程中，一些问题是共通的，在设计阶段，需要考虑：\n1. 怎样提高开发效率，降低开发成本？\n2. 怎样提高代码健壮性、降低维护难度？\n\n在开发阶段，需要考虑的问题有：\n1. 代码审查\n2. 压缩打包\n3. 单元测试\n4. 增量更新\n\n## 如何实现前端工程化？\n\n### 设计阶段\n根据前文，能够知道在设计阶段面临的一些问题，那么怎么解决呢？\n\n我们需要知道前端项目在设计阶段要做的一些事情：技术选型、确立规范、排期、分工。\n\n而技术选型和确立规范就是其中的重中之重。\n\n`技术选型`\n\n![s1](MethodologyFrontendEngineering/s1.png)\n无论是技术框架、编程语言、工具库、UI 库，都属于技术选型的范畴。\n\n一般要遵循的原则有 4 点：\n1. 可控性\n2. 稳定性\n3. 适用性\n4. 易用性\n\n一般来说，前端项目选择的框架是 Vue、React、Angular 的一种，根据项目规模和团队技术栈选择其他的工具库、UI 库。\n\n关于技术选型，可以看看这篇文章 [技术选型](https://zhuanlan.zhihu.com/p/346410244)\n\n`统一规范`\n\n![s2](MethodologyFrontendEngineering/s2.png)\n\n根据项目规模的不同，统一规范的重要性也不可一概而论，但总的来说，统一规范的重要性是随着项目复杂度的提升而提升的。\n\n有哪些地方需要统一规范呢？\n\n- 代码格式化：eslint、tslint\n- 代码提交规范：可以使用 git 的钩子函数自定义\n- 设计规范：由需求设计人员提供\n- 文档规范：注明公共 API、全局变量等\n- 一些约定：\n  - 目录结构约定：在什么地方做什么事\n  - 命名约定：变量、函数、css 类\n  - 版本管理\n  - 开发流程\n\n## 开发阶段\n### `开发`\n![s3](MethodologyFrontendEngineering/s3.png)\n\n在开发过程中，工程化主要在自建库、选择第三方库、搭建脚手架时发挥作用。\n\n自建库抽离公共函数，避免重复造轮子，应约定尽量使用自建库的方法。\n\n当自建库不能满足需求时，可以选择第三方库来弥补，第三方库应该关注安全性、稳定性、采取最小限度原则（即只使用必要的部分）。\n\n自定义工程脚手架也是非常重要的一部分，可以大大降低重复工作量，脚手架实践了`能够交给机器的事情就交给机器去做`这一思想。\n\n### `测试`\n![s4](MethodologyFrontendEngineering/s4.png)\n\n无论是什么项目，只要它仍在开发迭代，测试就是必要的一环。\n\n一个完整的项目开发流程图如下：\n![s4-1](MethodologyFrontendEngineering/s4-1.png)\n\n常用的测试分类有`单元测试`和`集成测试`，在开发过程中使用的是单元测试，那么什么是单元测试？\n> 单元测试（英语：Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。\n\n常见的单元测试工具有：Jest、Mocha 等。\n\n一些框架内也集成了单元测试工具，可以根据具体情况选择。\n\n### `部署`\n![s5](MethodologyFrontendEngineering/s5.png)\n\n在项目的部署阶段，我们聚焦于构建和部署。\n\n在构建时需要关注性能优化、自定义配置等，常用构建工具有 webpack、rollup、vite 等，他们各有特点，这里不加赘述。\n\n在部署时需要关注自动化、易用性等，常用的部署工具有 Jenkins。\n\n其他还有灰度和 CDN 等概念，灰度可以理解为青春使用版，即新版本发布时控制流量，易于回退。CDN 技术则是优化网络访问速度。\n\n## 总结\n\n前端工程化的要义在于：把能够交给机器的事情尽量交给机器去做。\n\n其重点在于`统一`，统一的代码规范、统一的命名约定、统一的技术栈、第三方库等等。\n\n而在实际项目开发过程中，前端工程化的实践既依赖设计师、架构师对于项目的先期构建，更强调开发团队间的意见交流。了解工程化概念，明晰其目的，才能避免重复造轮子，代码结构混杂不清等疏漏，提高代码复用性和健壮性。\n\n## 参考资料\n- [带你入门前端工程](https://woai3c.gitee.io/introduction-to-front-end-engineering/#%E7%AE%80%E4%BB%8B)\n- [浅谈什么是前端工程化\t](https://www.cnblogs.com/fsyz/p/8274727.html)\n- [大型项目前端架构浅谈](https://juejin.cn/post/6844903853859536903)","source":"_posts/MethodologyFrontendEngineering.md","raw":"---\ntitle: 【方法论】前端工程化的一些理解\ndate: 2022-07-28 02:30:57\ntags: [JS]\ncategories: [方法论]\n---\n# 前端工程化的一些理解\n![s0](MethodologyFrontendEngineering/s0.png)\n\n## 前言\n在项目开发中常常听到前端工程化，那么什么是前端工程化，其要义在于何处，我想是值得了解的问题。\n\n它有哪些目的，解决了哪些问题，又以何种方式实现，这些都是值得探究、值得思考的。\n## 什么是前端工程化？\n关于什么是前端工程化，这里先给出我的理解：\n- 狭义上的理解：将开发阶段的代码发布到生产环境，包含：构建，分支管理，自动化测试，部署\n- 广义上理解：前端工程化应该包含从编码开始到发布，运行和维护阶段\n\n简而言之，在前端规模越来越大，业务逻辑越来越复杂的今天，一切可以`提高效率、降低成本、质量保证`的手段都可以称得上是前端工程化。如果说软件工程是面向问题的（将软件开发流程中的共性抽离出来），把软件工程的思想带入到前端开发中，就是前端工程化。\n\n一个前端项目的开发流程可以概括为：\n\n> 需求分析-->`设计阶段`-->`开发阶段`(-->测试阶段-->部署阶段）-->项目维护\n\n也可以说，前端工程化主要发生在设计阶段和开发阶段，解决的是`开发阶段到项目维护阶段`的生产效率问题。\n\n## 前端工程化要解决哪些问题？\n在项目过程中，一些问题是共通的，在设计阶段，需要考虑：\n1. 怎样提高开发效率，降低开发成本？\n2. 怎样提高代码健壮性、降低维护难度？\n\n在开发阶段，需要考虑的问题有：\n1. 代码审查\n2. 压缩打包\n3. 单元测试\n4. 增量更新\n\n## 如何实现前端工程化？\n\n### 设计阶段\n根据前文，能够知道在设计阶段面临的一些问题，那么怎么解决呢？\n\n我们需要知道前端项目在设计阶段要做的一些事情：技术选型、确立规范、排期、分工。\n\n而技术选型和确立规范就是其中的重中之重。\n\n`技术选型`\n\n![s1](MethodologyFrontendEngineering/s1.png)\n无论是技术框架、编程语言、工具库、UI 库，都属于技术选型的范畴。\n\n一般要遵循的原则有 4 点：\n1. 可控性\n2. 稳定性\n3. 适用性\n4. 易用性\n\n一般来说，前端项目选择的框架是 Vue、React、Angular 的一种，根据项目规模和团队技术栈选择其他的工具库、UI 库。\n\n关于技术选型，可以看看这篇文章 [技术选型](https://zhuanlan.zhihu.com/p/346410244)\n\n`统一规范`\n\n![s2](MethodologyFrontendEngineering/s2.png)\n\n根据项目规模的不同，统一规范的重要性也不可一概而论，但总的来说，统一规范的重要性是随着项目复杂度的提升而提升的。\n\n有哪些地方需要统一规范呢？\n\n- 代码格式化：eslint、tslint\n- 代码提交规范：可以使用 git 的钩子函数自定义\n- 设计规范：由需求设计人员提供\n- 文档规范：注明公共 API、全局变量等\n- 一些约定：\n  - 目录结构约定：在什么地方做什么事\n  - 命名约定：变量、函数、css 类\n  - 版本管理\n  - 开发流程\n\n## 开发阶段\n### `开发`\n![s3](MethodologyFrontendEngineering/s3.png)\n\n在开发过程中，工程化主要在自建库、选择第三方库、搭建脚手架时发挥作用。\n\n自建库抽离公共函数，避免重复造轮子，应约定尽量使用自建库的方法。\n\n当自建库不能满足需求时，可以选择第三方库来弥补，第三方库应该关注安全性、稳定性、采取最小限度原则（即只使用必要的部分）。\n\n自定义工程脚手架也是非常重要的一部分，可以大大降低重复工作量，脚手架实践了`能够交给机器的事情就交给机器去做`这一思想。\n\n### `测试`\n![s4](MethodologyFrontendEngineering/s4.png)\n\n无论是什么项目，只要它仍在开发迭代，测试就是必要的一环。\n\n一个完整的项目开发流程图如下：\n![s4-1](MethodologyFrontendEngineering/s4-1.png)\n\n常用的测试分类有`单元测试`和`集成测试`，在开发过程中使用的是单元测试，那么什么是单元测试？\n> 单元测试（英语：Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。\n\n常见的单元测试工具有：Jest、Mocha 等。\n\n一些框架内也集成了单元测试工具，可以根据具体情况选择。\n\n### `部署`\n![s5](MethodologyFrontendEngineering/s5.png)\n\n在项目的部署阶段，我们聚焦于构建和部署。\n\n在构建时需要关注性能优化、自定义配置等，常用构建工具有 webpack、rollup、vite 等，他们各有特点，这里不加赘述。\n\n在部署时需要关注自动化、易用性等，常用的部署工具有 Jenkins。\n\n其他还有灰度和 CDN 等概念，灰度可以理解为青春使用版，即新版本发布时控制流量，易于回退。CDN 技术则是优化网络访问速度。\n\n## 总结\n\n前端工程化的要义在于：把能够交给机器的事情尽量交给机器去做。\n\n其重点在于`统一`，统一的代码规范、统一的命名约定、统一的技术栈、第三方库等等。\n\n而在实际项目开发过程中，前端工程化的实践既依赖设计师、架构师对于项目的先期构建，更强调开发团队间的意见交流。了解工程化概念，明晰其目的，才能避免重复造轮子，代码结构混杂不清等疏漏，提高代码复用性和健壮性。\n\n## 参考资料\n- [带你入门前端工程](https://woai3c.gitee.io/introduction-to-front-end-engineering/#%E7%AE%80%E4%BB%8B)\n- [浅谈什么是前端工程化\t](https://www.cnblogs.com/fsyz/p/8274727.html)\n- [大型项目前端架构浅谈](https://juejin.cn/post/6844903853859536903)","slug":"MethodologyFrontendEngineering","published":1,"updated":"2023-02-27T10:56:50.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clempgoye000088h89g4q7gcn","content":"<h1 id=\"前端工程化的一些理解\"><a href=\"#前端工程化的一些理解\" class=\"headerlink\" title=\"前端工程化的一些理解\"></a>前端工程化的一些理解</h1><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s0.png\"\n                      class=\"\" title=\"s0\"\n                >\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在项目开发中常常听到前端工程化，那么什么是前端工程化，其要义在于何处，我想是值得了解的问题。</p>\n<p>它有哪些目的，解决了哪些问题，又以何种方式实现，这些都是值得探究、值得思考的。</p>\n<h2 id=\"什么是前端工程化？\"><a href=\"#什么是前端工程化？\" class=\"headerlink\" title=\"什么是前端工程化？\"></a>什么是前端工程化？</h2><p>关于什么是前端工程化，这里先给出我的理解：</p>\n<ul>\n<li>狭义上的理解：将开发阶段的代码发布到生产环境，包含：构建，分支管理，自动化测试，部署</li>\n<li>广义上理解：前端工程化应该包含从编码开始到发布，运行和维护阶段</li>\n</ul>\n<p>简而言之，在前端规模越来越大，业务逻辑越来越复杂的今天，一切可以<code>提高效率、降低成本、质量保证</code>的手段都可以称得上是前端工程化。如果说软件工程是面向问题的（将软件开发流程中的共性抽离出来），把软件工程的思想带入到前端开发中，就是前端工程化。</p>\n<p>一个前端项目的开发流程可以概括为：</p>\n<blockquote>\n<p>需求分析–&gt;<code>设计阶段</code>–&gt;<code>开发阶段</code>(–&gt;测试阶段–&gt;部署阶段）–&gt;项目维护</p>\n</blockquote>\n<p>也可以说，前端工程化主要发生在设计阶段和开发阶段，解决的是<code>开发阶段到项目维护阶段</code>的生产效率问题。</p>\n<h2 id=\"前端工程化要解决哪些问题？\"><a href=\"#前端工程化要解决哪些问题？\" class=\"headerlink\" title=\"前端工程化要解决哪些问题？\"></a>前端工程化要解决哪些问题？</h2><p>在项目过程中，一些问题是共通的，在设计阶段，需要考虑：</p>\n<ol>\n<li>怎样提高开发效率，降低开发成本？</li>\n<li>怎样提高代码健壮性、降低维护难度？</li>\n</ol>\n<p>在开发阶段，需要考虑的问题有：</p>\n<ol>\n<li>代码审查</li>\n<li>压缩打包</li>\n<li>单元测试</li>\n<li>增量更新</li>\n</ol>\n<h2 id=\"如何实现前端工程化？\"><a href=\"#如何实现前端工程化？\" class=\"headerlink\" title=\"如何实现前端工程化？\"></a>如何实现前端工程化？</h2><h3 id=\"设计阶段\"><a href=\"#设计阶段\" class=\"headerlink\" title=\"设计阶段\"></a>设计阶段</h3><p>根据前文，能够知道在设计阶段面临的一些问题，那么怎么解决呢？</p>\n<p>我们需要知道前端项目在设计阶段要做的一些事情：技术选型、确立规范、排期、分工。</p>\n<p>而技术选型和确立规范就是其中的重中之重。</p>\n<p><code>技术选型</code></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s1.png\"\n                      class=\"\" title=\"s1\"\n                >\n<p>无论是技术框架、编程语言、工具库、UI 库，都属于技术选型的范畴。</p>\n<p>一般要遵循的原则有 4 点：</p>\n<ol>\n<li>可控性</li>\n<li>稳定性</li>\n<li>适用性</li>\n<li>易用性</li>\n</ol>\n<p>一般来说，前端项目选择的框架是 Vue、React、Angular 的一种，根据项目规模和团队技术栈选择其他的工具库、UI 库。</p>\n<p>关于技术选型，可以看看这篇文章 <a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/346410244\" >技术选型 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><code>统一规范</code></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s2.png\"\n                      class=\"\" title=\"s2\"\n                >\n\n<p>根据项目规模的不同，统一规范的重要性也不可一概而论，但总的来说，统一规范的重要性是随着项目复杂度的提升而提升的。</p>\n<p>有哪些地方需要统一规范呢？</p>\n<ul>\n<li>代码格式化：eslint、tslint</li>\n<li>代码提交规范：可以使用 git 的钩子函数自定义</li>\n<li>设计规范：由需求设计人员提供</li>\n<li>文档规范：注明公共 API、全局变量等</li>\n<li>一些约定：<ul>\n<li>目录结构约定：在什么地方做什么事</li>\n<li>命名约定：变量、函数、css 类</li>\n<li>版本管理</li>\n<li>开发流程</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"开发阶段\"><a href=\"#开发阶段\" class=\"headerlink\" title=\"开发阶段\"></a>开发阶段</h2><h3 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a><code>开发</code></h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s3.png\"\n                      class=\"\" title=\"s3\"\n                >\n\n<p>在开发过程中，工程化主要在自建库、选择第三方库、搭建脚手架时发挥作用。</p>\n<p>自建库抽离公共函数，避免重复造轮子，应约定尽量使用自建库的方法。</p>\n<p>当自建库不能满足需求时，可以选择第三方库来弥补，第三方库应该关注安全性、稳定性、采取最小限度原则（即只使用必要的部分）。</p>\n<p>自定义工程脚手架也是非常重要的一部分，可以大大降低重复工作量，脚手架实践了<code>能够交给机器的事情就交给机器去做</code>这一思想。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a><code>测试</code></h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s4.png\"\n                      class=\"\" title=\"s4\"\n                >\n\n<p>无论是什么项目，只要它仍在开发迭代，测试就是必要的一环。</p>\n<p>一个完整的项目开发流程图如下：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s4-1.png\"\n                      class=\"\" title=\"s4-1\"\n                >\n\n<p>常用的测试分类有<code>单元测试</code>和<code>集成测试</code>，在开发过程中使用的是单元测试，那么什么是单元测试？</p>\n<blockquote>\n<p>单元测试（英语：Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。</p>\n</blockquote>\n<p>常见的单元测试工具有：Jest、Mocha 等。</p>\n<p>一些框架内也集成了单元测试工具，可以根据具体情况选择。</p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a><code>部署</code></h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s5.png\"\n                      class=\"\" title=\"s5\"\n                >\n\n<p>在项目的部署阶段，我们聚焦于构建和部署。</p>\n<p>在构建时需要关注性能优化、自定义配置等，常用构建工具有 webpack、rollup、vite 等，他们各有特点，这里不加赘述。</p>\n<p>在部署时需要关注自动化、易用性等，常用的部署工具有 Jenkins。</p>\n<p>其他还有灰度和 CDN 等概念，灰度可以理解为青春使用版，即新版本发布时控制流量，易于回退。CDN 技术则是优化网络访问速度。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>前端工程化的要义在于：把能够交给机器的事情尽量交给机器去做。</p>\n<p>其重点在于<code>统一</code>，统一的代码规范、统一的命名约定、统一的技术栈、第三方库等等。</p>\n<p>而在实际项目开发过程中，前端工程化的实践既依赖设计师、架构师对于项目的先期构建，更强调开发团队间的意见交流。了解工程化概念，明晰其目的，才能避免重复造轮子，代码结构混杂不清等疏漏，提高代码复用性和健壮性。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a class=\"link\"   href=\"https://woai3c.gitee.io/introduction-to-front-end-engineering/#%E7%AE%80%E4%BB%8B\" >带你入门前端工程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/fsyz/p/8274727.html\" >浅谈什么是前端工程化\t <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://juejin.cn/post/6844903853859536903\" >大型项目前端架构浅谈 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端工程化的一些理解\"><a href=\"#前端工程化的一些理解\" class=\"headerlink\" title=\"前端工程化的一些理解\"></a>前端工程化的一些理解</h1><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s0.png\"\n                      class=\"\" title=\"s0\"\n                >\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在项目开发中常常听到前端工程化，那么什么是前端工程化，其要义在于何处，我想是值得了解的问题。</p>\n<p>它有哪些目的，解决了哪些问题，又以何种方式实现，这些都是值得探究、值得思考的。</p>\n<h2 id=\"什么是前端工程化？\"><a href=\"#什么是前端工程化？\" class=\"headerlink\" title=\"什么是前端工程化？\"></a>什么是前端工程化？</h2><p>关于什么是前端工程化，这里先给出我的理解：</p>\n<ul>\n<li>狭义上的理解：将开发阶段的代码发布到生产环境，包含：构建，分支管理，自动化测试，部署</li>\n<li>广义上理解：前端工程化应该包含从编码开始到发布，运行和维护阶段</li>\n</ul>\n<p>简而言之，在前端规模越来越大，业务逻辑越来越复杂的今天，一切可以<code>提高效率、降低成本、质量保证</code>的手段都可以称得上是前端工程化。如果说软件工程是面向问题的（将软件开发流程中的共性抽离出来），把软件工程的思想带入到前端开发中，就是前端工程化。</p>\n<p>一个前端项目的开发流程可以概括为：</p>\n<blockquote>\n<p>需求分析–&gt;<code>设计阶段</code>–&gt;<code>开发阶段</code>(–&gt;测试阶段–&gt;部署阶段）–&gt;项目维护</p>\n</blockquote>\n<p>也可以说，前端工程化主要发生在设计阶段和开发阶段，解决的是<code>开发阶段到项目维护阶段</code>的生产效率问题。</p>\n<h2 id=\"前端工程化要解决哪些问题？\"><a href=\"#前端工程化要解决哪些问题？\" class=\"headerlink\" title=\"前端工程化要解决哪些问题？\"></a>前端工程化要解决哪些问题？</h2><p>在项目过程中，一些问题是共通的，在设计阶段，需要考虑：</p>\n<ol>\n<li>怎样提高开发效率，降低开发成本？</li>\n<li>怎样提高代码健壮性、降低维护难度？</li>\n</ol>\n<p>在开发阶段，需要考虑的问题有：</p>\n<ol>\n<li>代码审查</li>\n<li>压缩打包</li>\n<li>单元测试</li>\n<li>增量更新</li>\n</ol>\n<h2 id=\"如何实现前端工程化？\"><a href=\"#如何实现前端工程化？\" class=\"headerlink\" title=\"如何实现前端工程化？\"></a>如何实现前端工程化？</h2><h3 id=\"设计阶段\"><a href=\"#设计阶段\" class=\"headerlink\" title=\"设计阶段\"></a>设计阶段</h3><p>根据前文，能够知道在设计阶段面临的一些问题，那么怎么解决呢？</p>\n<p>我们需要知道前端项目在设计阶段要做的一些事情：技术选型、确立规范、排期、分工。</p>\n<p>而技术选型和确立规范就是其中的重中之重。</p>\n<p><code>技术选型</code></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s1.png\"\n                      class=\"\" title=\"s1\"\n                >\n<p>无论是技术框架、编程语言、工具库、UI 库，都属于技术选型的范畴。</p>\n<p>一般要遵循的原则有 4 点：</p>\n<ol>\n<li>可控性</li>\n<li>稳定性</li>\n<li>适用性</li>\n<li>易用性</li>\n</ol>\n<p>一般来说，前端项目选择的框架是 Vue、React、Angular 的一种，根据项目规模和团队技术栈选择其他的工具库、UI 库。</p>\n<p>关于技术选型，可以看看这篇文章 <a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/346410244\" >技术选型 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><code>统一规范</code></p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s2.png\"\n                      class=\"\" title=\"s2\"\n                >\n\n<p>根据项目规模的不同，统一规范的重要性也不可一概而论，但总的来说，统一规范的重要性是随着项目复杂度的提升而提升的。</p>\n<p>有哪些地方需要统一规范呢？</p>\n<ul>\n<li>代码格式化：eslint、tslint</li>\n<li>代码提交规范：可以使用 git 的钩子函数自定义</li>\n<li>设计规范：由需求设计人员提供</li>\n<li>文档规范：注明公共 API、全局变量等</li>\n<li>一些约定：<ul>\n<li>目录结构约定：在什么地方做什么事</li>\n<li>命名约定：变量、函数、css 类</li>\n<li>版本管理</li>\n<li>开发流程</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"开发阶段\"><a href=\"#开发阶段\" class=\"headerlink\" title=\"开发阶段\"></a>开发阶段</h2><h3 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a><code>开发</code></h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s3.png\"\n                      class=\"\" title=\"s3\"\n                >\n\n<p>在开发过程中，工程化主要在自建库、选择第三方库、搭建脚手架时发挥作用。</p>\n<p>自建库抽离公共函数，避免重复造轮子，应约定尽量使用自建库的方法。</p>\n<p>当自建库不能满足需求时，可以选择第三方库来弥补，第三方库应该关注安全性、稳定性、采取最小限度原则（即只使用必要的部分）。</p>\n<p>自定义工程脚手架也是非常重要的一部分，可以大大降低重复工作量，脚手架实践了<code>能够交给机器的事情就交给机器去做</code>这一思想。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a><code>测试</code></h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s4.png\"\n                      class=\"\" title=\"s4\"\n                >\n\n<p>无论是什么项目，只要它仍在开发迭代，测试就是必要的一环。</p>\n<p>一个完整的项目开发流程图如下：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s4-1.png\"\n                      class=\"\" title=\"s4-1\"\n                >\n\n<p>常用的测试分类有<code>单元测试</code>和<code>集成测试</code>，在开发过程中使用的是单元测试，那么什么是单元测试？</p>\n<blockquote>\n<p>单元测试（英语：Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。</p>\n</blockquote>\n<p>常见的单元测试工具有：Jest、Mocha 等。</p>\n<p>一些框架内也集成了单元测试工具，可以根据具体情况选择。</p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a><code>部署</code></h3><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/07/28/MethodologyFrontendEngineering/s5.png\"\n                      class=\"\" title=\"s5\"\n                >\n\n<p>在项目的部署阶段，我们聚焦于构建和部署。</p>\n<p>在构建时需要关注性能优化、自定义配置等，常用构建工具有 webpack、rollup、vite 等，他们各有特点，这里不加赘述。</p>\n<p>在部署时需要关注自动化、易用性等，常用的部署工具有 Jenkins。</p>\n<p>其他还有灰度和 CDN 等概念，灰度可以理解为青春使用版，即新版本发布时控制流量，易于回退。CDN 技术则是优化网络访问速度。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>前端工程化的要义在于：把能够交给机器的事情尽量交给机器去做。</p>\n<p>其重点在于<code>统一</code>，统一的代码规范、统一的命名约定、统一的技术栈、第三方库等等。</p>\n<p>而在实际项目开发过程中，前端工程化的实践既依赖设计师、架构师对于项目的先期构建，更强调开发团队间的意见交流。了解工程化概念，明晰其目的，才能避免重复造轮子，代码结构混杂不清等疏漏，提高代码复用性和健壮性。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a class=\"link\"   href=\"https://woai3c.gitee.io/introduction-to-front-end-engineering/#%E7%AE%80%E4%BB%8B\" >带你入门前端工程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/fsyz/p/8274727.html\" >浅谈什么是前端工程化\t <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://juejin.cn/post/6844903853859536903\" >大型项目前端架构浅谈 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n"},{"title":"【方法论】JS 模块化梳理","date":"2022-03-09T03:39:39.000Z","_content":"\n## 前言\n\n模块化是编程中绕不过去的一环，可以说在我们的开发流程中，每时每刻都在使用着模块化，这无疑是一个非常重要的知识点。本文只讨论 JS 模块化，旨在加强对 JS 模块化的认识。主要涉及以下几点：\n-   JS 模块化的前世今生（为什么要模块化）\n-   JS 模块化的本质（如何实现模块化）\n\n## 一、JS 模块化的前世今生\n\n### 无模块化\n大家都知道模块化是复杂项目中必不可少的一环，良好的模块化能让项目结构更加清晰，提高代码复用性，逻辑与功能分离，加强可维护性。但在一开始，Javascript 中是不存在模块化的，它只是一门玩具语言，为网页添加一点特效而已。功能简单，用法单一。\n\n此时的 js 代码的书写方式是，从上到下，简单明了，直到`ajax`出现。\n\n### 模块化萌芽\nGoogle 将 ajax 概念发扬光大，在 Gmail 和 Google 地球等网页应用中大量使用了 ajax 技术，此时人们才惊觉利用 javascript 能够在网页中做到什么。于是越来越多的大型 web 项目开始出现，随之而来的是越来越复杂的业务逻辑与项目结构。问题不可避免的出现了。\n\n1. `全局变量污染`\n因为大家写的代码都在同一个全局作用域中，一不小心就可能声明一个已经存在的全局变量，往往就会发生难以预测的错误，这里举一个例子：\n```html\n<!-- 这是我写的 -->\n<script src=\"a.js\"></script>\n<script src=\"b.js\"></script>\n<!-- 这是同事写的 -->\n<script src=\"c.js\"></script>\n```\n\n```javascript\n// a.js\nvar name = '这里请不要改'\n\n// c.js\nfunction name(){\n\t...\n}\n```\n上面有 3 个脚本，a.js、b.js 是我写的，c.js 是同事写的，我定义了一个全局变量 name，同事不知道，他定义了一个全局方法 name()，于是我俩都得懵逼。\n\n*解决方案*\n\n解决方法之一是使用自执行函数包裹：\n```javascript\nmyModule = function(){\n\tvar id = 'user_id'\n\t...\n}()\n```\n这种方式解决了全局变量污染的问题，但仍暴露了一个全局函数在全局，仍可能存在命名冲突，并且有时需定义许多个这种类型的函数，不够优雅。\n\n2. `函数命名冲突`\n我们经常将一些功能性的函数抽离出来，放在同一个功能文件中，例如 utils.js 文件下放了一个 format 方法，这时同事需要一个不同的 format 方法，他就只能新建一个 format2 或者其他名字的方法，类似的事情很多。\n\n*解决方案*\n\n解决方法之一是使用命名空间，构造类似 java 的方式，于是代码变成了这样：\n```javascript\nobj.MyNameSpace.Utils.format()\n```\n这种类型的代码确实有用，但大大增加了书写的负担，你只想调用一个方法，却不得不写一长串的前缀。\n\n3. `文件依赖混乱`\n文件的依赖往往是无法避免的，例如实现一个 dialog 组件，它调用了一些 utils.js 文件里的方法，那么在引入`<script src=\"dialog\">`之前，需要先引入`<script src=\"utils\">`，当类似的情况越来越多时，依赖就难免混杂，从而增加维护难度。\n\n*解决方案*\n\n这是 Yahoo! 的 YUI3 框架解决方案，通过 requires 一个依赖数组来指定依赖：\n```javascript\nYUI.add('my-module', function (Y) {\n  // ...\n}, '0.0.1', {\n    requires: ['node', 'event']\n});\n```\n这种类型的代码确实解决了依赖混乱的问题，但当一个文件依赖增多时，这种配置型的代码就会变得复杂而且难看。\n\n在这个时期，不同的 web 团队为了解决项目中遇到的这类难题提出了自己的解决方案，但没有哪种解决方案可以解决所有的问题。\n\n### 几种模块化规范\n\n从以上的例子中可以观察到一些模块化所面临的难题：\n1. 如何安全的包装一个模块（不污染模块外的代码）\n2. 如何定义模块的唯一标识（解决命名冲突）\n3. 如何优雅的暴露模块（不增加复杂依赖）\n4. 模块间互相引用的循环依赖问题\n\n在 nodeJS 出现后，Javascript 可以用来编写服务端程序，这时 Javascript 没有模块化的缺点变得更加令人难以忍受，nodeJS 社区开始制定 JS 模块化规范。[Modules/1.0 规范]([Modules/1.0 - CommonJS Spec Wiki](https://wiki.commonjs.org/wiki/Modules/1.0))，首次定义了一个模块应该如何编写：\n>1. 模块的标识应遵循的规则（书写规范）\n> 2. 定义全局函数 require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的 API\n> 3. 如果被 require 函数引入的模块中也包含依赖，那么依次加载这些依赖\n> 4. 如果引入模块失败，那么 require 函数应该报一个异常\n> 5. 模块通过变量 exports 来向往暴漏 API，exports 只能是一个对象，暴漏的 API 须作为此对象的属性。\n\n一开始实现 Modules/1.0 规范的是 ServerJS（CommonJS 改名之前的叫法），它的写法如下：\n```javascript\n// math.js\nexports.add = function(){\n\tvar sum = 0,i = 0, args = arguments;\n\twhile(i < 1){\n\t\tsum += args[i++];\n\t}\n\treturn sum;\n};\n\n// increment.js\nvar add = require('math').add;\nexports.increment = function(val){\n\treturn add(val,1);\n}\n\n// program.js\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); //2\n```\n相比于之前的阶段，此时的代码更加简洁明了，但它只能在服务端运行而难以向浏览器端推广，原因如下：\n1. 外层没有 function 包裹，变量直接暴露在全局（如上 increment.js 中的 add 方法）\n2. 资源加载方式不同，在服务端，require 一个模块可以直接从内存中读取，消耗时间很小，但在浏览器端，require 一个模块需要向服务器发起一个 http 请求，下载完成后才能运行模块中的代码，也就是说 require 之后的代码必须等到 require 完成后才能执行。\n因为这些问题，社区中的主张分裂为 3 种，分别是\n- Modules/1.x 派\n- Modules/Async 派\n- Modules/2.0 派\n\n`Modules/1.x,CommonJS,browserify`\n这一派人认为既然 ServerJS 能够在服务端运行良好，只需要在现有基础上进行改进就能适应浏览器端的需求，浏览器端需要 function 包裹（为了保护变量）、需要异步加载，那么就使用一种工具将现有模块转化为适合浏览器端的代码，基于这种想法有基于这个主张，制定了 [Modules/Transport 规范](https://wiki.commonjs.org/wiki/Modules/Transport)，`browserify`是这种规范的一种实现，它是一种浏览器端的打包工具，能够将 nodeJS 模块转化为浏览器端可用的模块。\n\n`Modules/Async,AMD,RequireJS`\n这一派人认为浏览器端与服务端差别巨大，不能沿用原有模块标准。既然浏览器端需要异步加载代码，就通过回调的形式设计规范。其原理是：在模块定义时就指明并加载依赖，当依赖加载完毕后再执行回调中的本模块。因为这种异步的特性设计的规范名为 [AMD（Asynchronous Module Definition）](https://github.com/amdjs/amdjs-api/wiki/AMD-（中文版）)，根据 AMD 规范出现了`RequireJS`的实现，它的写法如下：\n```javascript\ndefine(id?, dependencies?, factory);\n\ndefine('increment',['math','other'],function(math){\n\t// 此时 math 和 other 模块内的代码已经执行完毕\n\tfunction increment(val){\n\t\treturn math.add(val,1)\n\t}\n\t// 即使 other 没有被使用到，other 还是被提前执行了\n\tif(false){\n\t\tother.doSomething();\n\t}\n})\n```\n\n`Modules/2.0 CMD Sea.js`\n这一派人有点类似中间派，既不想丢弃旧的规范，也不像 AMD 那样推倒重来，最终他们制定了 [Modules/Wrappings 规范]([http://wiki.commonjs.org/wiki/Modules/Wrappings](http://wiki.commonjs.org/wiki/Modules/Wrappings)),`SeaJS`是它的一个实现。写法如下：\n```javascript\ndefine(factory);\n\ndefine(function(require,exports,module){\n\t// 就近原则，哪里使用哪里声明\n\tvar math = require('math');\n\treturn{\n\t\tincrement:function(val){\n\t\t\treturn math.add(val,1);\n\t\t}\n\t}\n}\n```\n可以看到，它的写法和 RequireJS 很像，那么不同之处在哪里呢？RequireJS 会在依赖加载的第一时间加载并执行依赖内的代码，然后再执行回调内的模块代码；而 SeaJS 会在声明依赖之后才会执行依赖内的代码。总的来说就是：`AMD 推崇依赖前置、提前执行，CMD 推崇依赖就近、延迟执行。`\n\n`ES6 Module`\n从 ES6 开始，Javascript 开始有了标准层面的模块化，旨在成为浏览器端和服务器端的通用模块化方案。它的写法很简单，具体如下：\n```javascript\n// math.js\nfunction add(){\n...\n}\nexport {add};\n\n//increment.js\nimport {add} from './math';\nfunction increment(val){\n\treturn add(val,1);\n}\n```\n那么它和上面提到的几种模块化方案有哪些不同呢？\n1. 动态只读引用\n> ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令`import`，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的`import`有点像 Unix 系统的“符号连接”，原始值变了，`import`加载的值也会跟着变。因此\n2. 编译时输出\n> ES6 模块不是对象，而是通过 `export` 命令显式指定输出的代码，`import`时采用静态命令的形式。即在`import`时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。模块内部引用的变化，会反应在外部。\n\n### 总结\n1.  AMD/CMD/CommonJs 是 js 模块化开发的规范，对应的实现是 require.js/sea.js/Node.js，ES Module 是 ES6 在语言规范上的模块化实现。\n2. CommonJS 主要针对服务端，AMD/CMD/ES Module 主要针对浏览器端，容易混淆的是 AMD/CMD。针对服务器端和针对浏览器端有什么本质的区别呢？服务器端一般采用同步加载文件，也就是说需要某个模块，服务器端便停下来，等待它加载再执行，因为这部分很快。而浏览器端采用异步加载，因为需要发送 http 请求，这就需要一个预处理，提前将所需要的模块文件并行加载好。\n3. AMD/CMD 的区别：虽然都是并行加载 js 文件，但还是有所区别，AMD 是预加载，在并行加载 js 文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）；而 CMD 是懒加载，虽然会一开始就并行加载 js 文件，但是不会执行，而是在需要的时候才执行。\n4. AMD/CMD 的优缺点：JS 引擎是单线程的，单位时间内只能执行单个任务，所以在加载多个大文件时，会阻塞脚本执行。AMD 会在文件全部加载完毕后才执行代码，CMD 则会遇见依赖再加载代码，在此种情况 CMD 会更快，其他情形则相差不多。\n5. \n## 二、模块化的本质\n\n> 模块化的本质在于外部只能访问模块暴露出来的属性和方法，可以通过闭包的特性实现。\n\n```javascript\n// 原生模块模式\nfunction moduleA() {\n    var something = \"something\";\n    var another = \"another\";\n    function doSomething() {\n        console.log(something);\n    }\n\n    \n    function doAnother() {\n        console.log(another);\n    }\n    return {\n        doSomething: doSomething,\n        doAnother: doAnother\n    };\n}\n// 调用模块内方法\nvar foo = moduleA();\nfoo.doSomething(); // something\nfoo.another; // undefined\n\n// jQuery 类型的模块\n// var $ = window.jQuery()\n```\n在这里通过调用 moduleA() 这个函数来创建模块实例 foo，通过这个模块实例可以调用模块内暴露的变量和方法，但仍存在问题，在于 moduleA 是一个全局函数，可能会造成函数名污染。也可以使用 IIFE 的方式创建：\n```javascript\n// IIFE\nvar foo = (function(){\n\tvar something = \"something\";\n\tvar another = \"another\";\n\tfunction doSomething(){...}\n\tfunction doAnother(){...}\n\treturn {\n\t\tdoSomething: doSomething,\n\t\tdoAnother: doAnother\n\t};\n})()\n```\n这种形式避免了函数名冲突，并且实现了单例模式。\n\n大多数模块加载器本质上就是将这种模块定义封装进一个 API，下面给出进一步实现：\n```javascript\nvar moduleCreater = (function Manager(){\n\tvar modules = {};\n\t// 通过 define 方法定义模块\n\tfunction define(id,deps,impl){\n\t\tfor(let i = 0;i < deps.length;i++){\n\t\t\t// 在这里解包依赖数组\n\t\t\tdeps[i] = modules[deps[i]];\n\t\t}\n\t\tmodules[id] = impl.apply(imply,deps);\n\t}\n\tfunction get(id){\n\t\treturn modules[id];\n\t}\n\treturn {\n\t\tdefine: define,\n\t\tget: get\n\t}\n})()\n```\n## 参考资料\n\t\n- 《你不知道的 Javascript》（上卷）\n- [js 模块化历程](https://www.cnblogs.com/lvdabao/p/js-modules-develop.html)\n- [js 模块化编程之彻底弄懂 CommonJS 和 AMD/CMD！](https://www.cnblogs.com/moxiaowohuwei/p/8692359.html)\n- [前端模块化开发那点历史 · Issue #588 · seajs/seajs (github.com)](https://github.com/seajs/seajs/issues/588)\n- [从 CommonJS 到 Sea.js · Issue #269 · seajs/seajs (github.com)](https://github.com/seajs/seajs/issues/269)","source":"_posts/MethodologyFrontendJSModularity .md","raw":"---\ntitle: 【方法论】JS 模块化梳理\ndate: 2022-03-09 11:39:39\ntags: [JS]\ncategories: [方法论]\n---\n\n## 前言\n\n模块化是编程中绕不过去的一环，可以说在我们的开发流程中，每时每刻都在使用着模块化，这无疑是一个非常重要的知识点。本文只讨论 JS 模块化，旨在加强对 JS 模块化的认识。主要涉及以下几点：\n-   JS 模块化的前世今生（为什么要模块化）\n-   JS 模块化的本质（如何实现模块化）\n\n## 一、JS 模块化的前世今生\n\n### 无模块化\n大家都知道模块化是复杂项目中必不可少的一环，良好的模块化能让项目结构更加清晰，提高代码复用性，逻辑与功能分离，加强可维护性。但在一开始，Javascript 中是不存在模块化的，它只是一门玩具语言，为网页添加一点特效而已。功能简单，用法单一。\n\n此时的 js 代码的书写方式是，从上到下，简单明了，直到`ajax`出现。\n\n### 模块化萌芽\nGoogle 将 ajax 概念发扬光大，在 Gmail 和 Google 地球等网页应用中大量使用了 ajax 技术，此时人们才惊觉利用 javascript 能够在网页中做到什么。于是越来越多的大型 web 项目开始出现，随之而来的是越来越复杂的业务逻辑与项目结构。问题不可避免的出现了。\n\n1. `全局变量污染`\n因为大家写的代码都在同一个全局作用域中，一不小心就可能声明一个已经存在的全局变量，往往就会发生难以预测的错误，这里举一个例子：\n```html\n<!-- 这是我写的 -->\n<script src=\"a.js\"></script>\n<script src=\"b.js\"></script>\n<!-- 这是同事写的 -->\n<script src=\"c.js\"></script>\n```\n\n```javascript\n// a.js\nvar name = '这里请不要改'\n\n// c.js\nfunction name(){\n\t...\n}\n```\n上面有 3 个脚本，a.js、b.js 是我写的，c.js 是同事写的，我定义了一个全局变量 name，同事不知道，他定义了一个全局方法 name()，于是我俩都得懵逼。\n\n*解决方案*\n\n解决方法之一是使用自执行函数包裹：\n```javascript\nmyModule = function(){\n\tvar id = 'user_id'\n\t...\n}()\n```\n这种方式解决了全局变量污染的问题，但仍暴露了一个全局函数在全局，仍可能存在命名冲突，并且有时需定义许多个这种类型的函数，不够优雅。\n\n2. `函数命名冲突`\n我们经常将一些功能性的函数抽离出来，放在同一个功能文件中，例如 utils.js 文件下放了一个 format 方法，这时同事需要一个不同的 format 方法，他就只能新建一个 format2 或者其他名字的方法，类似的事情很多。\n\n*解决方案*\n\n解决方法之一是使用命名空间，构造类似 java 的方式，于是代码变成了这样：\n```javascript\nobj.MyNameSpace.Utils.format()\n```\n这种类型的代码确实有用，但大大增加了书写的负担，你只想调用一个方法，却不得不写一长串的前缀。\n\n3. `文件依赖混乱`\n文件的依赖往往是无法避免的，例如实现一个 dialog 组件，它调用了一些 utils.js 文件里的方法，那么在引入`<script src=\"dialog\">`之前，需要先引入`<script src=\"utils\">`，当类似的情况越来越多时，依赖就难免混杂，从而增加维护难度。\n\n*解决方案*\n\n这是 Yahoo! 的 YUI3 框架解决方案，通过 requires 一个依赖数组来指定依赖：\n```javascript\nYUI.add('my-module', function (Y) {\n  // ...\n}, '0.0.1', {\n    requires: ['node', 'event']\n});\n```\n这种类型的代码确实解决了依赖混乱的问题，但当一个文件依赖增多时，这种配置型的代码就会变得复杂而且难看。\n\n在这个时期，不同的 web 团队为了解决项目中遇到的这类难题提出了自己的解决方案，但没有哪种解决方案可以解决所有的问题。\n\n### 几种模块化规范\n\n从以上的例子中可以观察到一些模块化所面临的难题：\n1. 如何安全的包装一个模块（不污染模块外的代码）\n2. 如何定义模块的唯一标识（解决命名冲突）\n3. 如何优雅的暴露模块（不增加复杂依赖）\n4. 模块间互相引用的循环依赖问题\n\n在 nodeJS 出现后，Javascript 可以用来编写服务端程序，这时 Javascript 没有模块化的缺点变得更加令人难以忍受，nodeJS 社区开始制定 JS 模块化规范。[Modules/1.0 规范]([Modules/1.0 - CommonJS Spec Wiki](https://wiki.commonjs.org/wiki/Modules/1.0))，首次定义了一个模块应该如何编写：\n>1. 模块的标识应遵循的规则（书写规范）\n> 2. 定义全局函数 require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的 API\n> 3. 如果被 require 函数引入的模块中也包含依赖，那么依次加载这些依赖\n> 4. 如果引入模块失败，那么 require 函数应该报一个异常\n> 5. 模块通过变量 exports 来向往暴漏 API，exports 只能是一个对象，暴漏的 API 须作为此对象的属性。\n\n一开始实现 Modules/1.0 规范的是 ServerJS（CommonJS 改名之前的叫法），它的写法如下：\n```javascript\n// math.js\nexports.add = function(){\n\tvar sum = 0,i = 0, args = arguments;\n\twhile(i < 1){\n\t\tsum += args[i++];\n\t}\n\treturn sum;\n};\n\n// increment.js\nvar add = require('math').add;\nexports.increment = function(val){\n\treturn add(val,1);\n}\n\n// program.js\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); //2\n```\n相比于之前的阶段，此时的代码更加简洁明了，但它只能在服务端运行而难以向浏览器端推广，原因如下：\n1. 外层没有 function 包裹，变量直接暴露在全局（如上 increment.js 中的 add 方法）\n2. 资源加载方式不同，在服务端，require 一个模块可以直接从内存中读取，消耗时间很小，但在浏览器端，require 一个模块需要向服务器发起一个 http 请求，下载完成后才能运行模块中的代码，也就是说 require 之后的代码必须等到 require 完成后才能执行。\n因为这些问题，社区中的主张分裂为 3 种，分别是\n- Modules/1.x 派\n- Modules/Async 派\n- Modules/2.0 派\n\n`Modules/1.x,CommonJS,browserify`\n这一派人认为既然 ServerJS 能够在服务端运行良好，只需要在现有基础上进行改进就能适应浏览器端的需求，浏览器端需要 function 包裹（为了保护变量）、需要异步加载，那么就使用一种工具将现有模块转化为适合浏览器端的代码，基于这种想法有基于这个主张，制定了 [Modules/Transport 规范](https://wiki.commonjs.org/wiki/Modules/Transport)，`browserify`是这种规范的一种实现，它是一种浏览器端的打包工具，能够将 nodeJS 模块转化为浏览器端可用的模块。\n\n`Modules/Async,AMD,RequireJS`\n这一派人认为浏览器端与服务端差别巨大，不能沿用原有模块标准。既然浏览器端需要异步加载代码，就通过回调的形式设计规范。其原理是：在模块定义时就指明并加载依赖，当依赖加载完毕后再执行回调中的本模块。因为这种异步的特性设计的规范名为 [AMD（Asynchronous Module Definition）](https://github.com/amdjs/amdjs-api/wiki/AMD-（中文版）)，根据 AMD 规范出现了`RequireJS`的实现，它的写法如下：\n```javascript\ndefine(id?, dependencies?, factory);\n\ndefine('increment',['math','other'],function(math){\n\t// 此时 math 和 other 模块内的代码已经执行完毕\n\tfunction increment(val){\n\t\treturn math.add(val,1)\n\t}\n\t// 即使 other 没有被使用到，other 还是被提前执行了\n\tif(false){\n\t\tother.doSomething();\n\t}\n})\n```\n\n`Modules/2.0 CMD Sea.js`\n这一派人有点类似中间派，既不想丢弃旧的规范，也不像 AMD 那样推倒重来，最终他们制定了 [Modules/Wrappings 规范]([http://wiki.commonjs.org/wiki/Modules/Wrappings](http://wiki.commonjs.org/wiki/Modules/Wrappings)),`SeaJS`是它的一个实现。写法如下：\n```javascript\ndefine(factory);\n\ndefine(function(require,exports,module){\n\t// 就近原则，哪里使用哪里声明\n\tvar math = require('math');\n\treturn{\n\t\tincrement:function(val){\n\t\t\treturn math.add(val,1);\n\t\t}\n\t}\n}\n```\n可以看到，它的写法和 RequireJS 很像，那么不同之处在哪里呢？RequireJS 会在依赖加载的第一时间加载并执行依赖内的代码，然后再执行回调内的模块代码；而 SeaJS 会在声明依赖之后才会执行依赖内的代码。总的来说就是：`AMD 推崇依赖前置、提前执行，CMD 推崇依赖就近、延迟执行。`\n\n`ES6 Module`\n从 ES6 开始，Javascript 开始有了标准层面的模块化，旨在成为浏览器端和服务器端的通用模块化方案。它的写法很简单，具体如下：\n```javascript\n// math.js\nfunction add(){\n...\n}\nexport {add};\n\n//increment.js\nimport {add} from './math';\nfunction increment(val){\n\treturn add(val,1);\n}\n```\n那么它和上面提到的几种模块化方案有哪些不同呢？\n1. 动态只读引用\n> ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令`import`，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的`import`有点像 Unix 系统的“符号连接”，原始值变了，`import`加载的值也会跟着变。因此\n2. 编译时输出\n> ES6 模块不是对象，而是通过 `export` 命令显式指定输出的代码，`import`时采用静态命令的形式。即在`import`时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。模块内部引用的变化，会反应在外部。\n\n### 总结\n1.  AMD/CMD/CommonJs 是 js 模块化开发的规范，对应的实现是 require.js/sea.js/Node.js，ES Module 是 ES6 在语言规范上的模块化实现。\n2. CommonJS 主要针对服务端，AMD/CMD/ES Module 主要针对浏览器端，容易混淆的是 AMD/CMD。针对服务器端和针对浏览器端有什么本质的区别呢？服务器端一般采用同步加载文件，也就是说需要某个模块，服务器端便停下来，等待它加载再执行，因为这部分很快。而浏览器端采用异步加载，因为需要发送 http 请求，这就需要一个预处理，提前将所需要的模块文件并行加载好。\n3. AMD/CMD 的区别：虽然都是并行加载 js 文件，但还是有所区别，AMD 是预加载，在并行加载 js 文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）；而 CMD 是懒加载，虽然会一开始就并行加载 js 文件，但是不会执行，而是在需要的时候才执行。\n4. AMD/CMD 的优缺点：JS 引擎是单线程的，单位时间内只能执行单个任务，所以在加载多个大文件时，会阻塞脚本执行。AMD 会在文件全部加载完毕后才执行代码，CMD 则会遇见依赖再加载代码，在此种情况 CMD 会更快，其他情形则相差不多。\n5. \n## 二、模块化的本质\n\n> 模块化的本质在于外部只能访问模块暴露出来的属性和方法，可以通过闭包的特性实现。\n\n```javascript\n// 原生模块模式\nfunction moduleA() {\n    var something = \"something\";\n    var another = \"another\";\n    function doSomething() {\n        console.log(something);\n    }\n\n    \n    function doAnother() {\n        console.log(another);\n    }\n    return {\n        doSomething: doSomething,\n        doAnother: doAnother\n    };\n}\n// 调用模块内方法\nvar foo = moduleA();\nfoo.doSomething(); // something\nfoo.another; // undefined\n\n// jQuery 类型的模块\n// var $ = window.jQuery()\n```\n在这里通过调用 moduleA() 这个函数来创建模块实例 foo，通过这个模块实例可以调用模块内暴露的变量和方法，但仍存在问题，在于 moduleA 是一个全局函数，可能会造成函数名污染。也可以使用 IIFE 的方式创建：\n```javascript\n// IIFE\nvar foo = (function(){\n\tvar something = \"something\";\n\tvar another = \"another\";\n\tfunction doSomething(){...}\n\tfunction doAnother(){...}\n\treturn {\n\t\tdoSomething: doSomething,\n\t\tdoAnother: doAnother\n\t};\n})()\n```\n这种形式避免了函数名冲突，并且实现了单例模式。\n\n大多数模块加载器本质上就是将这种模块定义封装进一个 API，下面给出进一步实现：\n```javascript\nvar moduleCreater = (function Manager(){\n\tvar modules = {};\n\t// 通过 define 方法定义模块\n\tfunction define(id,deps,impl){\n\t\tfor(let i = 0;i < deps.length;i++){\n\t\t\t// 在这里解包依赖数组\n\t\t\tdeps[i] = modules[deps[i]];\n\t\t}\n\t\tmodules[id] = impl.apply(imply,deps);\n\t}\n\tfunction get(id){\n\t\treturn modules[id];\n\t}\n\treturn {\n\t\tdefine: define,\n\t\tget: get\n\t}\n})()\n```\n## 参考资料\n\t\n- 《你不知道的 Javascript》（上卷）\n- [js 模块化历程](https://www.cnblogs.com/lvdabao/p/js-modules-develop.html)\n- [js 模块化编程之彻底弄懂 CommonJS 和 AMD/CMD！](https://www.cnblogs.com/moxiaowohuwei/p/8692359.html)\n- [前端模块化开发那点历史 · Issue #588 · seajs/seajs (github.com)](https://github.com/seajs/seajs/issues/588)\n- [从 CommonJS 到 Sea.js · Issue #269 · seajs/seajs (github.com)](https://github.com/seajs/seajs/issues/269)","slug":"MethodologyFrontendJSModularity ","published":1,"updated":"2023-02-21T12:28:06.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clempgoyh000188h8bzwxan0m","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模块化是编程中绕不过去的一环，可以说在我们的开发流程中，每时每刻都在使用着模块化，这无疑是一个非常重要的知识点。本文只讨论 JS 模块化，旨在加强对 JS 模块化的认识。主要涉及以下几点：</p>\n<ul>\n<li>JS 模块化的前世今生（为什么要模块化）</li>\n<li>JS 模块化的本质（如何实现模块化）</li>\n</ul>\n<h2 id=\"一、JS-模块化的前世今生\"><a href=\"#一、JS-模块化的前世今生\" class=\"headerlink\" title=\"一、JS 模块化的前世今生\"></a>一、JS 模块化的前世今生</h2><h3 id=\"无模块化\"><a href=\"#无模块化\" class=\"headerlink\" title=\"无模块化\"></a>无模块化</h3><p>大家都知道模块化是复杂项目中必不可少的一环，良好的模块化能让项目结构更加清晰，提高代码复用性，逻辑与功能分离，加强可维护性。但在一开始，Javascript 中是不存在模块化的，它只是一门玩具语言，为网页添加一点特效而已。功能简单，用法单一。</p>\n<p>此时的 js 代码的书写方式是，从上到下，简单明了，直到<code>ajax</code>出现。</p>\n<h3 id=\"模块化萌芽\"><a href=\"#模块化萌芽\" class=\"headerlink\" title=\"模块化萌芽\"></a>模块化萌芽</h3><p>Google 将 ajax 概念发扬光大，在 Gmail 和 Google 地球等网页应用中大量使用了 ajax 技术，此时人们才惊觉利用 javascript 能够在网页中做到什么。于是越来越多的大型 web 项目开始出现，随之而来的是越来越复杂的业务逻辑与项目结构。问题不可避免的出现了。</p>\n<ol>\n<li><code>全局变量污染</code><br>因为大家写的代码都在同一个全局作用域中，一不小心就可能声明一个已经存在的全局变量，往往就会发生难以预测的错误，这里举一个例子：<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是我写的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;a.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;b.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是同事写的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;c.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;这里请不要改&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// c.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>上面有 3 个脚本，a.js、b.js 是我写的，c.js 是同事写的，我定义了一个全局变量 name，同事不知道，他定义了一个全局方法 name()，于是我俩都得懵逼。</p>\n<p><em>解决方案</em></p>\n<p>解决方法之一是使用自执行函数包裹：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModule = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;user_id&#x27;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure></div>\n<p>这种方式解决了全局变量污染的问题，但仍暴露了一个全局函数在全局，仍可能存在命名冲突，并且有时需定义许多个这种类型的函数，不够优雅。</p>\n<ol start=\"2\">\n<li><code>函数命名冲突</code><br>我们经常将一些功能性的函数抽离出来，放在同一个功能文件中，例如 utils.js 文件下放了一个 format 方法，这时同事需要一个不同的 format 方法，他就只能新建一个 format2 或者其他名字的方法，类似的事情很多。</li>\n</ol>\n<p><em>解决方案</em></p>\n<p>解决方法之一是使用命名空间，构造类似 java 的方式，于是代码变成了这样：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.<span class=\"property\">MyNameSpace</span>.<span class=\"property\">Utils</span>.<span class=\"title function_\">format</span>()</span><br></pre></td></tr></table></figure></div>\n<p>这种类型的代码确实有用，但大大增加了书写的负担，你只想调用一个方法，却不得不写一长串的前缀。</p>\n<ol start=\"3\">\n<li><code>文件依赖混乱</code><br>文件的依赖往往是无法避免的，例如实现一个 dialog 组件，它调用了一些 utils.js 文件里的方法，那么在引入<code>&lt;script src=&quot;dialog&quot;&gt;</code>之前，需要先引入<code>&lt;script src=&quot;utils&quot;&gt;</code>，当类似的情况越来越多时，依赖就难免混杂，从而增加维护难度。</li>\n</ol>\n<p><em>解决方案</em></p>\n<p>这是 Yahoo! 的 YUI3 框架解决方案，通过 requires 一个依赖数组来指定依赖：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">YUI</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;my-module&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">Y</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"string\">&#x27;0.0.1&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">requires</span>: [<span class=\"string\">&#x27;node&#x27;</span>, <span class=\"string\">&#x27;event&#x27;</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n<p>这种类型的代码确实解决了依赖混乱的问题，但当一个文件依赖增多时，这种配置型的代码就会变得复杂而且难看。</p>\n<p>在这个时期，不同的 web 团队为了解决项目中遇到的这类难题提出了自己的解决方案，但没有哪种解决方案可以解决所有的问题。</p>\n<h3 id=\"几种模块化规范\"><a href=\"#几种模块化规范\" class=\"headerlink\" title=\"几种模块化规范\"></a>几种模块化规范</h3><p>从以上的例子中可以观察到一些模块化所面临的难题：</p>\n<ol>\n<li>如何安全的包装一个模块（不污染模块外的代码）</li>\n<li>如何定义模块的唯一标识（解决命名冲突）</li>\n<li>如何优雅的暴露模块（不增加复杂依赖）</li>\n<li>模块间互相引用的循环依赖问题</li>\n</ol>\n<p>在 nodeJS 出现后，Javascript 可以用来编写服务端程序，这时 Javascript 没有模块化的缺点变得更加令人难以忍受，nodeJS 社区开始制定 JS 模块化规范。[Modules&#x2F;1.0 规范](<a class=\"link\"   href=\"https://wiki.commonjs.org/wiki/Modules/1.0\" >Modules&#x2F;1.0 - CommonJS Spec Wiki <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>)，首次定义了一个模块应该如何编写：</p>\n<blockquote>\n<ol>\n<li>模块的标识应遵循的规则（书写规范）</li>\n<li>定义全局函数 require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的 API</li>\n<li>如果被 require 函数引入的模块中也包含依赖，那么依次加载这些依赖</li>\n<li>如果引入模块失败，那么 require 函数应该报一个异常</li>\n<li>模块通过变量 exports 来向往暴漏 API，exports 只能是一个对象，暴漏的 API 须作为此对象的属性。</li>\n</ol>\n</blockquote>\n<p>一开始实现 Modules&#x2F;1.0 规范的是 ServerJS（CommonJS 改名之前的叫法），它的写法如下：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>, args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tsum += args[i++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// increment.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>).<span class=\"property\">add</span>;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">increment</span> = <span class=\"keyword\">function</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// program.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inc = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;increment&#x27;</span>).<span class=\"property\">increment</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title function_\">inc</span>(a); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure></div>\n<p>相比于之前的阶段，此时的代码更加简洁明了，但它只能在服务端运行而难以向浏览器端推广，原因如下：</p>\n<ol>\n<li>外层没有 function 包裹，变量直接暴露在全局（如上 increment.js 中的 add 方法）</li>\n<li>资源加载方式不同，在服务端，require 一个模块可以直接从内存中读取，消耗时间很小，但在浏览器端，require 一个模块需要向服务器发起一个 http 请求，下载完成后才能运行模块中的代码，也就是说 require 之后的代码必须等到 require 完成后才能执行。<br>因为这些问题，社区中的主张分裂为 3 种，分别是</li>\n</ol>\n<ul>\n<li>Modules&#x2F;1.x 派</li>\n<li>Modules&#x2F;Async 派</li>\n<li>Modules&#x2F;2.0 派</li>\n</ul>\n<p><code>Modules/1.x,CommonJS,browserify</code><br>这一派人认为既然 ServerJS 能够在服务端运行良好，只需要在现有基础上进行改进就能适应浏览器端的需求，浏览器端需要 function 包裹（为了保护变量）、需要异步加载，那么就使用一种工具将现有模块转化为适合浏览器端的代码，基于这种想法有基于这个主张，制定了 <a class=\"link\"   href=\"https://wiki.commonjs.org/wiki/Modules/Transport\" >Modules&#x2F;Transport 规范 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，<code>browserify</code>是这种规范的一种实现，它是一种浏览器端的打包工具，能够将 nodeJS 模块转化为浏览器端可用的模块。</p>\n<p><code>Modules/Async,AMD,RequireJS</code><br>这一派人认为浏览器端与服务端差别巨大，不能沿用原有模块标准。既然浏览器端需要异步加载代码，就通过回调的形式设计规范。其原理是：在模块定义时就指明并加载依赖，当依赖加载完毕后再执行回调中的本模块。因为这种异步的特性设计的规范名为 <a class=\"link\"   href=\"https://github.com/amdjs/amdjs-api/wiki/AMD-%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89\" >AMD（Asynchronous Module Definition） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，根据 AMD 规范出现了<code>RequireJS</code>的实现，它的写法如下：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(id?, dependencies?, factory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"string\">&#x27;increment&#x27;</span>,[<span class=\"string\">&#x27;math&#x27;</span>,<span class=\"string\">&#x27;other&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">math</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 此时 math 和 other 模块内的代码已经执行完毕</span></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> math.<span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 即使 other 没有被使用到，other 还是被提前执行了</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">\t\tother.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n\n<p><code>Modules/2.0 CMD Sea.js</code><br>这一派人有点类似中间派，既不想丢弃旧的规范，也不像 AMD 那样推倒重来，最终他们制定了 <a href=\"%5Bhttp://wiki.commonjs.org/wiki/Modules/Wrappings%5D(http://wiki.commonjs.org/wiki/Modules/Wrappings)\">Modules&#x2F;Wrappings 规范</a>,<code>SeaJS</code>是它的一个实现。写法如下：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(factory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>,<span class=\"built_in\">exports</span>,<span class=\"variable language_\">module</span></span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 就近原则，哪里使用哪里声明</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">increment</span>:<span class=\"keyword\">function</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> math.<span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>可以看到，它的写法和 RequireJS 很像，那么不同之处在哪里呢？RequireJS 会在依赖加载的第一时间加载并执行依赖内的代码，然后再执行回调内的模块代码；而 SeaJS 会在声明依赖之后才会执行依赖内的代码。总的来说就是：<code>AMD 推崇依赖前置、提前执行，CMD 推崇依赖就近、延迟执行。</code></p>\n<p><code>ES6 Module</code><br>从 ES6 开始，Javascript 开始有了标准层面的模块化，旨在成为浏览器端和服务器端的通用模块化方案。它的写法很简单，具体如下：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//increment.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./math&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>那么它和上面提到的几种模块化方案有哪些不同呢？</p>\n<ol>\n<li>动态只读引用<blockquote>\n<p>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此</p>\n</blockquote>\n</li>\n<li>编译时输出<blockquote>\n<p>ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。模块内部引用的变化，会反应在外部。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>AMD&#x2F;CMD&#x2F;CommonJs 是 js 模块化开发的规范，对应的实现是 require.js&#x2F;sea.js&#x2F;Node.js，ES Module 是 ES6 在语言规范上的模块化实现。</li>\n<li>CommonJS 主要针对服务端，AMD&#x2F;CMD&#x2F;ES Module 主要针对浏览器端，容易混淆的是 AMD&#x2F;CMD。针对服务器端和针对浏览器端有什么本质的区别呢？服务器端一般采用同步加载文件，也就是说需要某个模块，服务器端便停下来，等待它加载再执行，因为这部分很快。而浏览器端采用异步加载，因为需要发送 http 请求，这就需要一个预处理，提前将所需要的模块文件并行加载好。</li>\n<li>AMD&#x2F;CMD 的区别：虽然都是并行加载 js 文件，但还是有所区别，AMD 是预加载，在并行加载 js 文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）；而 CMD 是懒加载，虽然会一开始就并行加载 js 文件，但是不会执行，而是在需要的时候才执行。</li>\n<li>AMD&#x2F;CMD 的优缺点：JS 引擎是单线程的，单位时间内只能执行单个任务，所以在加载多个大文件时，会阻塞脚本执行。AMD 会在文件全部加载完毕后才执行代码，CMD 则会遇见依赖再加载代码，在此种情况 CMD 会更快，其他情形则相差不多。</li>\n<li></li>\n</ol>\n<h2 id=\"二、模块化的本质\"><a href=\"#二、模块化的本质\" class=\"headerlink\" title=\"二、模块化的本质\"></a>二、模块化的本质</h2><blockquote>\n<p>模块化的本质在于外部只能访问模块暴露出来的属性和方法，可以通过闭包的特性实现。</p>\n</blockquote>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原生模块模式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">moduleA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> something = <span class=\"string\">&quot;something&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> another = <span class=\"string\">&quot;another&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(something);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doAnother</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(another);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">doSomething</span>: doSomething,</span><br><span class=\"line\">        <span class=\"attr\">doAnother</span>: doAnother</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用模块内方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"title function_\">moduleA</span>();</span><br><span class=\"line\">foo.<span class=\"title function_\">doSomething</span>(); <span class=\"comment\">// something</span></span><br><span class=\"line\">foo.<span class=\"property\">another</span>; <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jQuery 类型的模块</span></span><br><span class=\"line\"><span class=\"comment\">// var $ = window.jQuery()</span></span><br></pre></td></tr></table></figure></div>\n<p>在这里通过调用 moduleA() 这个函数来创建模块实例 foo，通过这个模块实例可以调用模块内暴露的变量和方法，但仍存在问题，在于 moduleA 是一个全局函数，可能会造成函数名污染。也可以使用 IIFE 的方式创建：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> something = <span class=\"string\">&quot;something&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> another = <span class=\"string\">&quot;another&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">doAnother</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">doSomething</span>: doSomething,</span><br><span class=\"line\">\t\t<span class=\"attr\">doAnother</span>: doAnother</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></div>\n<p>这种形式避免了函数名冲突，并且实现了单例模式。</p>\n<p>大多数模块加载器本质上就是将这种模块定义封装进一个 API，下面给出进一步实现：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> moduleCreater = (<span class=\"keyword\">function</span> <span class=\"title function_\">Manager</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> modules = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过 define 方法定义模块</span></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">define</span>(<span class=\"params\">id,deps,impl</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; deps.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 在这里解包依赖数组</span></span><br><span class=\"line\">\t\t\tdeps[i] = modules[deps[i]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmodules[id] = impl.<span class=\"title function_\">apply</span>(imply,deps);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">get</span>(<span class=\"params\">id</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> modules[id];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">define</span>: define,</span><br><span class=\"line\">\t\t<span class=\"attr\">get</span>: get</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>《你不知道的 Javascript》（上卷）</li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/lvdabao/p/js-modules-develop.html\" >js 模块化历程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/moxiaowohuwei/p/8692359.html\" >js 模块化编程之彻底弄懂 CommonJS 和 AMD&#x2F;CMD！ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/seajs/seajs/issues/588\" >前端模块化开发那点历史 · Issue #588 · seajs&#x2F;seajs (github.com) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/seajs/seajs/issues/269\" >从 CommonJS 到 Sea.js · Issue #269 · seajs&#x2F;seajs (github.com) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模块化是编程中绕不过去的一环，可以说在我们的开发流程中，每时每刻都在使用着模块化，这无疑是一个非常重要的知识点。本文只讨论 JS 模块化，旨在加强对 JS 模块化的认识。主要涉及以下几点：</p>\n<ul>\n<li>JS 模块化的前世今生（为什么要模块化）</li>\n<li>JS 模块化的本质（如何实现模块化）</li>\n</ul>\n<h2 id=\"一、JS-模块化的前世今生\"><a href=\"#一、JS-模块化的前世今生\" class=\"headerlink\" title=\"一、JS 模块化的前世今生\"></a>一、JS 模块化的前世今生</h2><h3 id=\"无模块化\"><a href=\"#无模块化\" class=\"headerlink\" title=\"无模块化\"></a>无模块化</h3><p>大家都知道模块化是复杂项目中必不可少的一环，良好的模块化能让项目结构更加清晰，提高代码复用性，逻辑与功能分离，加强可维护性。但在一开始，Javascript 中是不存在模块化的，它只是一门玩具语言，为网页添加一点特效而已。功能简单，用法单一。</p>\n<p>此时的 js 代码的书写方式是，从上到下，简单明了，直到<code>ajax</code>出现。</p>\n<h3 id=\"模块化萌芽\"><a href=\"#模块化萌芽\" class=\"headerlink\" title=\"模块化萌芽\"></a>模块化萌芽</h3><p>Google 将 ajax 概念发扬光大，在 Gmail 和 Google 地球等网页应用中大量使用了 ajax 技术，此时人们才惊觉利用 javascript 能够在网页中做到什么。于是越来越多的大型 web 项目开始出现，随之而来的是越来越复杂的业务逻辑与项目结构。问题不可避免的出现了。</p>\n<ol>\n<li><code>全局变量污染</code><br>因为大家写的代码都在同一个全局作用域中，一不小心就可能声明一个已经存在的全局变量，往往就会发生难以预测的错误，这里举一个例子：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是我写的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;a.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;b.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是同事写的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;c.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;这里请不要改&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// c.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面有 3 个脚本，a.js、b.js 是我写的，c.js 是同事写的，我定义了一个全局变量 name，同事不知道，他定义了一个全局方法 name()，于是我俩都得懵逼。</p>\n<p><em>解决方案</em></p>\n<p>解决方法之一是使用自执行函数包裹：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModule = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;user_id&#x27;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>这种方式解决了全局变量污染的问题，但仍暴露了一个全局函数在全局，仍可能存在命名冲突，并且有时需定义许多个这种类型的函数，不够优雅。</p>\n<ol start=\"2\">\n<li><code>函数命名冲突</code><br>我们经常将一些功能性的函数抽离出来，放在同一个功能文件中，例如 utils.js 文件下放了一个 format 方法，这时同事需要一个不同的 format 方法，他就只能新建一个 format2 或者其他名字的方法，类似的事情很多。</li>\n</ol>\n<p><em>解决方案</em></p>\n<p>解决方法之一是使用命名空间，构造类似 java 的方式，于是代码变成了这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.<span class=\"property\">MyNameSpace</span>.<span class=\"property\">Utils</span>.<span class=\"title function_\">format</span>()</span><br></pre></td></tr></table></figure>\n<p>这种类型的代码确实有用，但大大增加了书写的负担，你只想调用一个方法，却不得不写一长串的前缀。</p>\n<ol start=\"3\">\n<li><code>文件依赖混乱</code><br>文件的依赖往往是无法避免的，例如实现一个 dialog 组件，它调用了一些 utils.js 文件里的方法，那么在引入<code>&lt;script src=&quot;dialog&quot;&gt;</code>之前，需要先引入<code>&lt;script src=&quot;utils&quot;&gt;</code>，当类似的情况越来越多时，依赖就难免混杂，从而增加维护难度。</li>\n</ol>\n<p><em>解决方案</em></p>\n<p>这是 Yahoo! 的 YUI3 框架解决方案，通过 requires 一个依赖数组来指定依赖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">YUI</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;my-module&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">Y</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"string\">&#x27;0.0.1&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">requires</span>: [<span class=\"string\">&#x27;node&#x27;</span>, <span class=\"string\">&#x27;event&#x27;</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这种类型的代码确实解决了依赖混乱的问题，但当一个文件依赖增多时，这种配置型的代码就会变得复杂而且难看。</p>\n<p>在这个时期，不同的 web 团队为了解决项目中遇到的这类难题提出了自己的解决方案，但没有哪种解决方案可以解决所有的问题。</p>\n<h3 id=\"几种模块化规范\"><a href=\"#几种模块化规范\" class=\"headerlink\" title=\"几种模块化规范\"></a>几种模块化规范</h3><p>从以上的例子中可以观察到一些模块化所面临的难题：</p>\n<ol>\n<li>如何安全的包装一个模块（不污染模块外的代码）</li>\n<li>如何定义模块的唯一标识（解决命名冲突）</li>\n<li>如何优雅的暴露模块（不增加复杂依赖）</li>\n<li>模块间互相引用的循环依赖问题</li>\n</ol>\n<p>在 nodeJS 出现后，Javascript 可以用来编写服务端程序，这时 Javascript 没有模块化的缺点变得更加令人难以忍受，nodeJS 社区开始制定 JS 模块化规范。[Modules&#x2F;1.0 规范](<a class=\"link\"   href=\"https://wiki.commonjs.org/wiki/Modules/1.0\" >Modules&#x2F;1.0 - CommonJS Spec Wiki <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>)，首次定义了一个模块应该如何编写：</p>\n<blockquote>\n<ol>\n<li>模块的标识应遵循的规则（书写规范）</li>\n<li>定义全局函数 require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的 API</li>\n<li>如果被 require 函数引入的模块中也包含依赖，那么依次加载这些依赖</li>\n<li>如果引入模块失败，那么 require 函数应该报一个异常</li>\n<li>模块通过变量 exports 来向往暴漏 API，exports 只能是一个对象，暴漏的 API 须作为此对象的属性。</li>\n</ol>\n</blockquote>\n<p>一开始实现 Modules&#x2F;1.0 规范的是 ServerJS（CommonJS 改名之前的叫法），它的写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>, args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tsum += args[i++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// increment.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>).<span class=\"property\">add</span>;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">increment</span> = <span class=\"keyword\">function</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// program.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inc = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;increment&#x27;</span>).<span class=\"property\">increment</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title function_\">inc</span>(a); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>相比于之前的阶段，此时的代码更加简洁明了，但它只能在服务端运行而难以向浏览器端推广，原因如下：</p>\n<ol>\n<li>外层没有 function 包裹，变量直接暴露在全局（如上 increment.js 中的 add 方法）</li>\n<li>资源加载方式不同，在服务端，require 一个模块可以直接从内存中读取，消耗时间很小，但在浏览器端，require 一个模块需要向服务器发起一个 http 请求，下载完成后才能运行模块中的代码，也就是说 require 之后的代码必须等到 require 完成后才能执行。<br>因为这些问题，社区中的主张分裂为 3 种，分别是</li>\n</ol>\n<ul>\n<li>Modules&#x2F;1.x 派</li>\n<li>Modules&#x2F;Async 派</li>\n<li>Modules&#x2F;2.0 派</li>\n</ul>\n<p><code>Modules/1.x,CommonJS,browserify</code><br>这一派人认为既然 ServerJS 能够在服务端运行良好，只需要在现有基础上进行改进就能适应浏览器端的需求，浏览器端需要 function 包裹（为了保护变量）、需要异步加载，那么就使用一种工具将现有模块转化为适合浏览器端的代码，基于这种想法有基于这个主张，制定了 <a class=\"link\"   href=\"https://wiki.commonjs.org/wiki/Modules/Transport\" >Modules&#x2F;Transport 规范 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，<code>browserify</code>是这种规范的一种实现，它是一种浏览器端的打包工具，能够将 nodeJS 模块转化为浏览器端可用的模块。</p>\n<p><code>Modules/Async,AMD,RequireJS</code><br>这一派人认为浏览器端与服务端差别巨大，不能沿用原有模块标准。既然浏览器端需要异步加载代码，就通过回调的形式设计规范。其原理是：在模块定义时就指明并加载依赖，当依赖加载完毕后再执行回调中的本模块。因为这种异步的特性设计的规范名为 <a class=\"link\"   href=\"https://github.com/amdjs/amdjs-api/wiki/AMD-%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89\" >AMD（Asynchronous Module Definition） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，根据 AMD 规范出现了<code>RequireJS</code>的实现，它的写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(id?, dependencies?, factory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"string\">&#x27;increment&#x27;</span>,[<span class=\"string\">&#x27;math&#x27;</span>,<span class=\"string\">&#x27;other&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">math</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 此时 math 和 other 模块内的代码已经执行完毕</span></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> math.<span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 即使 other 没有被使用到，other 还是被提前执行了</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">\t\tother.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>Modules/2.0 CMD Sea.js</code><br>这一派人有点类似中间派，既不想丢弃旧的规范，也不像 AMD 那样推倒重来，最终他们制定了 <a href=\"%5Bhttp://wiki.commonjs.org/wiki/Modules/Wrappings%5D(http://wiki.commonjs.org/wiki/Modules/Wrappings)\">Modules&#x2F;Wrappings 规范</a>,<code>SeaJS</code>是它的一个实现。写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(factory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>,<span class=\"built_in\">exports</span>,<span class=\"variable language_\">module</span></span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 就近原则，哪里使用哪里声明</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">increment</span>:<span class=\"keyword\">function</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> math.<span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，它的写法和 RequireJS 很像，那么不同之处在哪里呢？RequireJS 会在依赖加载的第一时间加载并执行依赖内的代码，然后再执行回调内的模块代码；而 SeaJS 会在声明依赖之后才会执行依赖内的代码。总的来说就是：<code>AMD 推崇依赖前置、提前执行，CMD 推崇依赖就近、延迟执行。</code></p>\n<p><code>ES6 Module</code><br>从 ES6 开始，Javascript 开始有了标准层面的模块化，旨在成为浏览器端和服务器端的通用模块化方案。它的写法很简单，具体如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//increment.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./math&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么它和上面提到的几种模块化方案有哪些不同呢？</p>\n<ol>\n<li>动态只读引用<blockquote>\n<p>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此</p>\n</blockquote>\n</li>\n<li>编译时输出<blockquote>\n<p>ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。模块内部引用的变化，会反应在外部。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>AMD&#x2F;CMD&#x2F;CommonJs 是 js 模块化开发的规范，对应的实现是 require.js&#x2F;sea.js&#x2F;Node.js，ES Module 是 ES6 在语言规范上的模块化实现。</li>\n<li>CommonJS 主要针对服务端，AMD&#x2F;CMD&#x2F;ES Module 主要针对浏览器端，容易混淆的是 AMD&#x2F;CMD。针对服务器端和针对浏览器端有什么本质的区别呢？服务器端一般采用同步加载文件，也就是说需要某个模块，服务器端便停下来，等待它加载再执行，因为这部分很快。而浏览器端采用异步加载，因为需要发送 http 请求，这就需要一个预处理，提前将所需要的模块文件并行加载好。</li>\n<li>AMD&#x2F;CMD 的区别：虽然都是并行加载 js 文件，但还是有所区别，AMD 是预加载，在并行加载 js 文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）；而 CMD 是懒加载，虽然会一开始就并行加载 js 文件，但是不会执行，而是在需要的时候才执行。</li>\n<li>AMD&#x2F;CMD 的优缺点：JS 引擎是单线程的，单位时间内只能执行单个任务，所以在加载多个大文件时，会阻塞脚本执行。AMD 会在文件全部加载完毕后才执行代码，CMD 则会遇见依赖再加载代码，在此种情况 CMD 会更快，其他情形则相差不多。</li>\n<li></li>\n</ol>\n<h2 id=\"二、模块化的本质\"><a href=\"#二、模块化的本质\" class=\"headerlink\" title=\"二、模块化的本质\"></a>二、模块化的本质</h2><blockquote>\n<p>模块化的本质在于外部只能访问模块暴露出来的属性和方法，可以通过闭包的特性实现。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原生模块模式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">moduleA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> something = <span class=\"string\">&quot;something&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> another = <span class=\"string\">&quot;another&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(something);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doAnother</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(another);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">doSomething</span>: doSomething,</span><br><span class=\"line\">        <span class=\"attr\">doAnother</span>: doAnother</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用模块内方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"title function_\">moduleA</span>();</span><br><span class=\"line\">foo.<span class=\"title function_\">doSomething</span>(); <span class=\"comment\">// something</span></span><br><span class=\"line\">foo.<span class=\"property\">another</span>; <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jQuery 类型的模块</span></span><br><span class=\"line\"><span class=\"comment\">// var $ = window.jQuery()</span></span><br></pre></td></tr></table></figure>\n<p>在这里通过调用 moduleA() 这个函数来创建模块实例 foo，通过这个模块实例可以调用模块内暴露的变量和方法，但仍存在问题，在于 moduleA 是一个全局函数，可能会造成函数名污染。也可以使用 IIFE 的方式创建：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> something = <span class=\"string\">&quot;something&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> another = <span class=\"string\">&quot;another&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">doAnother</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">doSomething</span>: doSomething,</span><br><span class=\"line\">\t\t<span class=\"attr\">doAnother</span>: doAnother</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>这种形式避免了函数名冲突，并且实现了单例模式。</p>\n<p>大多数模块加载器本质上就是将这种模块定义封装进一个 API，下面给出进一步实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> moduleCreater = (<span class=\"keyword\">function</span> <span class=\"title function_\">Manager</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> modules = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过 define 方法定义模块</span></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">define</span>(<span class=\"params\">id,deps,impl</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; deps.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 在这里解包依赖数组</span></span><br><span class=\"line\">\t\t\tdeps[i] = modules[deps[i]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmodules[id] = impl.<span class=\"title function_\">apply</span>(imply,deps);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">get</span>(<span class=\"params\">id</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> modules[id];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">define</span>: define,</span><br><span class=\"line\">\t\t<span class=\"attr\">get</span>: get</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>《你不知道的 Javascript》（上卷）</li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/lvdabao/p/js-modules-develop.html\" >js 模块化历程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/moxiaowohuwei/p/8692359.html\" >js 模块化编程之彻底弄懂 CommonJS 和 AMD&#x2F;CMD！ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/seajs/seajs/issues/588\" >前端模块化开发那点历史 · Issue #588 · seajs&#x2F;seajs (github.com) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/seajs/seajs/issues/269\" >从 CommonJS 到 Sea.js · Issue #269 · seajs&#x2F;seajs (github.com) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n"},{"title":"【方法论】前端发展历程梳理","date":"2022-03-20T07:49:39.000Z","_content":"\n## 前言\n\n了解前端的发展历史有助于从一个全局的视角来重新认知前端技术，脱离单独某一种视角的窠臼。\n\n- `Node.js`的出现意味着什么？\n- 为什么要从`jquery`转入三大框架？\n- 既然已经有了`javascript`为什么还要使用`babel`来转化？\n- `CommonJS`、`AMD`、`CMD`、`ESModule`又是什么？\n\n类似的问题不胜枚举，而这篇文章有助于解决此类问题。\n\n## 1. 需求驱动和问题驱动\n\n一种技术能够出现并且不断的发展，一定具有某种内在的驱动力，我认为这种驱动力存在两种：\n1. 需求驱动\n2. 问题驱动\n\n需求驱动顾名思义就是当前的技术工具支持不了新的需求，所以推动了新技术的产生。而问题驱动则是实现某种需求的过程中产生了困难，老旧的技术工具解决不了或者解决起来很麻烦困难，所以推动了新技术的产生。\n\n## 2. 前端大事件的时间节点\n\n| 时间               | 事件                                                                                                                                                                                                                                                                |\n| :----------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `web1.0 1991~2004` | 只读网络，网站提供内容，用户阅读内容                                                                                                                                                                                                                                |\n| 1989 年             | `HTML`由 Web 的发明者 Tim Berners-Lee 创立，这也是前端的起始                                                                                                                                                                                                            |\n| 1994 年             | 世界上的第一款浏览器`NCSAMosaic`由 Netscape（网景）公司开发，同年`W3C`（世界万维网联盟）成立                                                                                                                                                                          |\n| 1995 年             | `JavaScript`由网景公司的 Brendan Eich 设计                                                                                                                                                                                                                            |\n| 1996 年             | W3C 发布了`CSS1`标准，从此前端有了样式规范                                                                                                                                                                                                                           |\n| 1997 年             | `ECMAScript1`由 ECMA 国际正式发布，从此 Javascript 有了自己的标准，同年 W3C 发布了`HTML4.0`标准，这是使用时间最长的一个版本                                                                                                                                               |\n| 1998 年             | W3C 发布了`XML（可扩展标记语言）`标准，同年`Ajax`（异步 Javascript 和 XML）技术开始得到应用                                                                                                                                                                               |\n| 2001 年             | Douglas Crockford 开始推广使用`JSON`数据格式，它比 XML 更加简洁清晰                                                                                                                                                                                                    |\n| `web2.0 2004~至今` | 交互网络，用户产生内容，通过网站与他人交互                                                                                                                                                                                                                          |\n| 2006 年             | John Resig 发布了`JQuery`的第一个版本，这是迄今为止最成功的 JS 库，同年 W3C 正式发布`XMLHttpRequest`标准，为以后的 Ajax 爆发提供技术基础。                                                                                                                                 |\n| 2008 年             | Google 开源了高性能的 Javascript 引擎`V8`                                                                                                                                                                                                                              |\n| 2009 年             | Ryan Dahl 开发了基于 V8 引擎的`NodeJS`运行时环境，从此 javascript 可以运行在服务端；同年`ECMAScript5`发布，这是使用时间最长，各个浏览器兼容性最好，如今大部分程序也依然在使用的一代标准；同年 Miško Hevery 创造了`AngularJS`框架，基于 MVC 模式，并且实现了 SPA（单页面应用） |\n| 2010 年             | `NPM`（NodeJS 包管理工具）发布了第一个版本，从此前端有了自己的包管理器                                                                                                                                                                                               |\n| 2011 年             | Twitter 开源了其前端框架`Bootstrap`                                                                                                                                                                                                                                  |\n| 2012 年             | 微软发布了`Typescript`的第一个版本，让 Javascript 拥有了自己的类型                                                                                                                                                                                                    |\n| 2013 年             | Facebook 开源了其前端框架`React`，同年尤雨溪受到 Angular 启发开发了轻量级前端框架`Seed`，后更名为`Vue`                                                                                                                                                                 |\n| 2014 年             | W3C 发布了`HTML5`标准                                                                                                                                                                                                                                                |\n| 2015 年             | `ECMAScript6`正式发布，后更名为`ECMAScript2015`，之截至目前 2022 年，每年都发布了对应的新版本                                                                                                                                                                         |\n| 2016 年             | `ECMAScript2016`正式发布                                                                                                                                                                                                                                            |\n| 2017 年             | `ECMAScript2017`正式发布                                                                                                                                                                                                                                            |\n<!-- YCTODO -->\n## 一些技术发展过程的梳理\n\n可以把前端发展的历程分为\n\n## 展望未来\n\n## 参考资料\n- 百度百科\n- [前端的历史发展节点](http://www.javashuo.com/article/p-hvrlfhxo-gc.html)\n- [Web 开发的历史发展技术演变](https://zhuanlan.zhihu.com/p/196637639)\n- [Web 1.0、Web 2.0 和 Web 3.0 之间的比较](https://blog.csdn.net/qq_44273429/article/details/127462439)","source":"_posts/MethodologyFrontendHistory.md","raw":"---\ntitle: 【方法论】前端发展历程梳理\ndate: 2022-03-20 15:49:39\ntags: [JS]\ncategories: [方法论]\n---\n\n## 前言\n\n了解前端的发展历史有助于从一个全局的视角来重新认知前端技术，脱离单独某一种视角的窠臼。\n\n- `Node.js`的出现意味着什么？\n- 为什么要从`jquery`转入三大框架？\n- 既然已经有了`javascript`为什么还要使用`babel`来转化？\n- `CommonJS`、`AMD`、`CMD`、`ESModule`又是什么？\n\n类似的问题不胜枚举，而这篇文章有助于解决此类问题。\n\n## 1. 需求驱动和问题驱动\n\n一种技术能够出现并且不断的发展，一定具有某种内在的驱动力，我认为这种驱动力存在两种：\n1. 需求驱动\n2. 问题驱动\n\n需求驱动顾名思义就是当前的技术工具支持不了新的需求，所以推动了新技术的产生。而问题驱动则是实现某种需求的过程中产生了困难，老旧的技术工具解决不了或者解决起来很麻烦困难，所以推动了新技术的产生。\n\n## 2. 前端大事件的时间节点\n\n| 时间               | 事件                                                                                                                                                                                                                                                                |\n| :----------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `web1.0 1991~2004` | 只读网络，网站提供内容，用户阅读内容                                                                                                                                                                                                                                |\n| 1989 年             | `HTML`由 Web 的发明者 Tim Berners-Lee 创立，这也是前端的起始                                                                                                                                                                                                            |\n| 1994 年             | 世界上的第一款浏览器`NCSAMosaic`由 Netscape（网景）公司开发，同年`W3C`（世界万维网联盟）成立                                                                                                                                                                          |\n| 1995 年             | `JavaScript`由网景公司的 Brendan Eich 设计                                                                                                                                                                                                                            |\n| 1996 年             | W3C 发布了`CSS1`标准，从此前端有了样式规范                                                                                                                                                                                                                           |\n| 1997 年             | `ECMAScript1`由 ECMA 国际正式发布，从此 Javascript 有了自己的标准，同年 W3C 发布了`HTML4.0`标准，这是使用时间最长的一个版本                                                                                                                                               |\n| 1998 年             | W3C 发布了`XML（可扩展标记语言）`标准，同年`Ajax`（异步 Javascript 和 XML）技术开始得到应用                                                                                                                                                                               |\n| 2001 年             | Douglas Crockford 开始推广使用`JSON`数据格式，它比 XML 更加简洁清晰                                                                                                                                                                                                    |\n| `web2.0 2004~至今` | 交互网络，用户产生内容，通过网站与他人交互                                                                                                                                                                                                                          |\n| 2006 年             | John Resig 发布了`JQuery`的第一个版本，这是迄今为止最成功的 JS 库，同年 W3C 正式发布`XMLHttpRequest`标准，为以后的 Ajax 爆发提供技术基础。                                                                                                                                 |\n| 2008 年             | Google 开源了高性能的 Javascript 引擎`V8`                                                                                                                                                                                                                              |\n| 2009 年             | Ryan Dahl 开发了基于 V8 引擎的`NodeJS`运行时环境，从此 javascript 可以运行在服务端；同年`ECMAScript5`发布，这是使用时间最长，各个浏览器兼容性最好，如今大部分程序也依然在使用的一代标准；同年 Miško Hevery 创造了`AngularJS`框架，基于 MVC 模式，并且实现了 SPA（单页面应用） |\n| 2010 年             | `NPM`（NodeJS 包管理工具）发布了第一个版本，从此前端有了自己的包管理器                                                                                                                                                                                               |\n| 2011 年             | Twitter 开源了其前端框架`Bootstrap`                                                                                                                                                                                                                                  |\n| 2012 年             | 微软发布了`Typescript`的第一个版本，让 Javascript 拥有了自己的类型                                                                                                                                                                                                    |\n| 2013 年             | Facebook 开源了其前端框架`React`，同年尤雨溪受到 Angular 启发开发了轻量级前端框架`Seed`，后更名为`Vue`                                                                                                                                                                 |\n| 2014 年             | W3C 发布了`HTML5`标准                                                                                                                                                                                                                                                |\n| 2015 年             | `ECMAScript6`正式发布，后更名为`ECMAScript2015`，之截至目前 2022 年，每年都发布了对应的新版本                                                                                                                                                                         |\n| 2016 年             | `ECMAScript2016`正式发布                                                                                                                                                                                                                                            |\n| 2017 年             | `ECMAScript2017`正式发布                                                                                                                                                                                                                                            |\n<!-- YCTODO -->\n## 一些技术发展过程的梳理\n\n可以把前端发展的历程分为\n\n## 展望未来\n\n## 参考资料\n- 百度百科\n- [前端的历史发展节点](http://www.javashuo.com/article/p-hvrlfhxo-gc.html)\n- [Web 开发的历史发展技术演变](https://zhuanlan.zhihu.com/p/196637639)\n- [Web 1.0、Web 2.0 和 Web 3.0 之间的比较](https://blog.csdn.net/qq_44273429/article/details/127462439)","slug":"MethodologyFrontendHistory","published":1,"updated":"2023-02-21T12:28:11.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clempgoym000688h834wxebkm","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>了解前端的发展历史有助于从一个全局的视角来重新认知前端技术，脱离单独某一种视角的窠臼。</p>\n<ul>\n<li><code>Node.js</code>的出现意味着什么？</li>\n<li>为什么要从<code>jquery</code>转入三大框架？</li>\n<li>既然已经有了<code>javascript</code>为什么还要使用<code>babel</code>来转化？</li>\n<li><code>CommonJS</code>、<code>AMD</code>、<code>CMD</code>、<code>ESModule</code>又是什么？</li>\n</ul>\n<p>类似的问题不胜枚举，而这篇文章有助于解决此类问题。</p>\n<h2 id=\"1-需求驱动和问题驱动\"><a href=\"#1-需求驱动和问题驱动\" class=\"headerlink\" title=\"1. 需求驱动和问题驱动\"></a>1. 需求驱动和问题驱动</h2><p>一种技术能够出现并且不断的发展，一定具有某种内在的驱动力，我认为这种驱动力存在两种：</p>\n<ol>\n<li>需求驱动</li>\n<li>问题驱动</li>\n</ol>\n<p>需求驱动顾名思义就是当前的技术工具支持不了新的需求，所以推动了新技术的产生。而问题驱动则是实现某种需求的过程中产生了困难，老旧的技术工具解决不了或者解决起来很麻烦困难，所以推动了新技术的产生。</p>\n<h2 id=\"2-前端大事件的时间节点\"><a href=\"#2-前端大事件的时间节点\" class=\"headerlink\" title=\"2. 前端大事件的时间节点\"></a>2. 前端大事件的时间节点</h2><table>\n<thead>\n<tr>\n<th align=\"left\">时间</th>\n<th align=\"left\">事件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>web1.0 1991~2004</code></td>\n<td align=\"left\">只读网络，网站提供内容，用户阅读内容</td>\n</tr>\n<tr>\n<td align=\"left\">1989 年</td>\n<td align=\"left\"><code>HTML</code>由 Web 的发明者 Tim Berners-Lee 创立，这也是前端的起始</td>\n</tr>\n<tr>\n<td align=\"left\">1994 年</td>\n<td align=\"left\">世界上的第一款浏览器<code>NCSAMosaic</code>由 Netscape（网景）公司开发，同年<code>W3C</code>（世界万维网联盟）成立</td>\n</tr>\n<tr>\n<td align=\"left\">1995 年</td>\n<td align=\"left\"><code>JavaScript</code>由网景公司的 Brendan Eich 设计</td>\n</tr>\n<tr>\n<td align=\"left\">1996 年</td>\n<td align=\"left\">W3C 发布了<code>CSS1</code>标准，从此前端有了样式规范</td>\n</tr>\n<tr>\n<td align=\"left\">1997 年</td>\n<td align=\"left\"><code>ECMAScript1</code>由 ECMA 国际正式发布，从此 Javascript 有了自己的标准，同年 W3C 发布了<code>HTML4.0</code>标准，这是使用时间最长的一个版本</td>\n</tr>\n<tr>\n<td align=\"left\">1998 年</td>\n<td align=\"left\">W3C 发布了<code>XML（可扩展标记语言）</code>标准，同年<code>Ajax</code>（异步 Javascript 和 XML）技术开始得到应用</td>\n</tr>\n<tr>\n<td align=\"left\">2001 年</td>\n<td align=\"left\">Douglas Crockford 开始推广使用<code>JSON</code>数据格式，它比 XML 更加简洁清晰</td>\n</tr>\n<tr>\n<td align=\"left\"><code>web2.0 2004~至今</code></td>\n<td align=\"left\">交互网络，用户产生内容，通过网站与他人交互</td>\n</tr>\n<tr>\n<td align=\"left\">2006 年</td>\n<td align=\"left\">John Resig 发布了<code>JQuery</code>的第一个版本，这是迄今为止最成功的 JS 库，同年 W3C 正式发布<code>XMLHttpRequest</code>标准，为以后的 Ajax 爆发提供技术基础。</td>\n</tr>\n<tr>\n<td align=\"left\">2008 年</td>\n<td align=\"left\">Google 开源了高性能的 Javascript 引擎<code>V8</code></td>\n</tr>\n<tr>\n<td align=\"left\">2009 年</td>\n<td align=\"left\">Ryan Dahl 开发了基于 V8 引擎的<code>NodeJS</code>运行时环境，从此 javascript 可以运行在服务端；同年<code>ECMAScript5</code>发布，这是使用时间最长，各个浏览器兼容性最好，如今大部分程序也依然在使用的一代标准；同年 Miško Hevery 创造了<code>AngularJS</code>框架，基于 MVC 模式，并且实现了 SPA（单页面应用）</td>\n</tr>\n<tr>\n<td align=\"left\">2010 年</td>\n<td align=\"left\"><code>NPM</code>（NodeJS 包管理工具）发布了第一个版本，从此前端有了自己的包管理器</td>\n</tr>\n<tr>\n<td align=\"left\">2011 年</td>\n<td align=\"left\">Twitter 开源了其前端框架<code>Bootstrap</code></td>\n</tr>\n<tr>\n<td align=\"left\">2012 年</td>\n<td align=\"left\">微软发布了<code>Typescript</code>的第一个版本，让 Javascript 拥有了自己的类型</td>\n</tr>\n<tr>\n<td align=\"left\">2013 年</td>\n<td align=\"left\">Facebook 开源了其前端框架<code>React</code>，同年尤雨溪受到 Angular 启发开发了轻量级前端框架<code>Seed</code>，后更名为<code>Vue</code></td>\n</tr>\n<tr>\n<td align=\"left\">2014 年</td>\n<td align=\"left\">W3C 发布了<code>HTML5</code>标准</td>\n</tr>\n<tr>\n<td align=\"left\">2015 年</td>\n<td align=\"left\"><code>ECMAScript6</code>正式发布，后更名为<code>ECMAScript2015</code>，之截至目前 2022 年，每年都发布了对应的新版本</td>\n</tr>\n<tr>\n<td align=\"left\">2016 年</td>\n<td align=\"left\"><code>ECMAScript2016</code>正式发布</td>\n</tr>\n<tr>\n<td align=\"left\">2017 年</td>\n<td align=\"left\"><code>ECMAScript2017</code>正式发布</td>\n</tr>\n</tbody></table>\n<!-- YCTODO -->\n<h2 id=\"一些技术发展过程的梳理\"><a href=\"#一些技术发展过程的梳理\" class=\"headerlink\" title=\"一些技术发展过程的梳理\"></a>一些技术发展过程的梳理</h2><p>可以把前端发展的历程分为</p>\n<h2 id=\"展望未来\"><a href=\"#展望未来\" class=\"headerlink\" title=\"展望未来\"></a>展望未来</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>百度百科</li>\n<li><a class=\"link\"   href=\"http://www.javashuo.com/article/p-hvrlfhxo-gc.html\" >前端的历史发展节点 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/196637639\" >Web 开发的历史发展技术演变 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/qq_44273429/article/details/127462439\" >Web 1.0、Web 2.0 和 Web 3.0 之间的比较 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>了解前端的发展历史有助于从一个全局的视角来重新认知前端技术，脱离单独某一种视角的窠臼。</p>\n<ul>\n<li><code>Node.js</code>的出现意味着什么？</li>\n<li>为什么要从<code>jquery</code>转入三大框架？</li>\n<li>既然已经有了<code>javascript</code>为什么还要使用<code>babel</code>来转化？</li>\n<li><code>CommonJS</code>、<code>AMD</code>、<code>CMD</code>、<code>ESModule</code>又是什么？</li>\n</ul>\n<p>类似的问题不胜枚举，而这篇文章有助于解决此类问题。</p>\n<h2 id=\"1-需求驱动和问题驱动\"><a href=\"#1-需求驱动和问题驱动\" class=\"headerlink\" title=\"1. 需求驱动和问题驱动\"></a>1. 需求驱动和问题驱动</h2><p>一种技术能够出现并且不断的发展，一定具有某种内在的驱动力，我认为这种驱动力存在两种：</p>\n<ol>\n<li>需求驱动</li>\n<li>问题驱动</li>\n</ol>\n<p>需求驱动顾名思义就是当前的技术工具支持不了新的需求，所以推动了新技术的产生。而问题驱动则是实现某种需求的过程中产生了困难，老旧的技术工具解决不了或者解决起来很麻烦困难，所以推动了新技术的产生。</p>\n<h2 id=\"2-前端大事件的时间节点\"><a href=\"#2-前端大事件的时间节点\" class=\"headerlink\" title=\"2. 前端大事件的时间节点\"></a>2. 前端大事件的时间节点</h2><table>\n<thead>\n<tr>\n<th align=\"left\">时间</th>\n<th align=\"left\">事件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>web1.0 1991~2004</code></td>\n<td align=\"left\">只读网络，网站提供内容，用户阅读内容</td>\n</tr>\n<tr>\n<td align=\"left\">1989 年</td>\n<td align=\"left\"><code>HTML</code>由 Web 的发明者 Tim Berners-Lee 创立，这也是前端的起始</td>\n</tr>\n<tr>\n<td align=\"left\">1994 年</td>\n<td align=\"left\">世界上的第一款浏览器<code>NCSAMosaic</code>由 Netscape（网景）公司开发，同年<code>W3C</code>（世界万维网联盟）成立</td>\n</tr>\n<tr>\n<td align=\"left\">1995 年</td>\n<td align=\"left\"><code>JavaScript</code>由网景公司的 Brendan Eich 设计</td>\n</tr>\n<tr>\n<td align=\"left\">1996 年</td>\n<td align=\"left\">W3C 发布了<code>CSS1</code>标准，从此前端有了样式规范</td>\n</tr>\n<tr>\n<td align=\"left\">1997 年</td>\n<td align=\"left\"><code>ECMAScript1</code>由 ECMA 国际正式发布，从此 Javascript 有了自己的标准，同年 W3C 发布了<code>HTML4.0</code>标准，这是使用时间最长的一个版本</td>\n</tr>\n<tr>\n<td align=\"left\">1998 年</td>\n<td align=\"left\">W3C 发布了<code>XML（可扩展标记语言）</code>标准，同年<code>Ajax</code>（异步 Javascript 和 XML）技术开始得到应用</td>\n</tr>\n<tr>\n<td align=\"left\">2001 年</td>\n<td align=\"left\">Douglas Crockford 开始推广使用<code>JSON</code>数据格式，它比 XML 更加简洁清晰</td>\n</tr>\n<tr>\n<td align=\"left\"><code>web2.0 2004~至今</code></td>\n<td align=\"left\">交互网络，用户产生内容，通过网站与他人交互</td>\n</tr>\n<tr>\n<td align=\"left\">2006 年</td>\n<td align=\"left\">John Resig 发布了<code>JQuery</code>的第一个版本，这是迄今为止最成功的 JS 库，同年 W3C 正式发布<code>XMLHttpRequest</code>标准，为以后的 Ajax 爆发提供技术基础。</td>\n</tr>\n<tr>\n<td align=\"left\">2008 年</td>\n<td align=\"left\">Google 开源了高性能的 Javascript 引擎<code>V8</code></td>\n</tr>\n<tr>\n<td align=\"left\">2009 年</td>\n<td align=\"left\">Ryan Dahl 开发了基于 V8 引擎的<code>NodeJS</code>运行时环境，从此 javascript 可以运行在服务端；同年<code>ECMAScript5</code>发布，这是使用时间最长，各个浏览器兼容性最好，如今大部分程序也依然在使用的一代标准；同年 Miško Hevery 创造了<code>AngularJS</code>框架，基于 MVC 模式，并且实现了 SPA（单页面应用）</td>\n</tr>\n<tr>\n<td align=\"left\">2010 年</td>\n<td align=\"left\"><code>NPM</code>（NodeJS 包管理工具）发布了第一个版本，从此前端有了自己的包管理器</td>\n</tr>\n<tr>\n<td align=\"left\">2011 年</td>\n<td align=\"left\">Twitter 开源了其前端框架<code>Bootstrap</code></td>\n</tr>\n<tr>\n<td align=\"left\">2012 年</td>\n<td align=\"left\">微软发布了<code>Typescript</code>的第一个版本，让 Javascript 拥有了自己的类型</td>\n</tr>\n<tr>\n<td align=\"left\">2013 年</td>\n<td align=\"left\">Facebook 开源了其前端框架<code>React</code>，同年尤雨溪受到 Angular 启发开发了轻量级前端框架<code>Seed</code>，后更名为<code>Vue</code></td>\n</tr>\n<tr>\n<td align=\"left\">2014 年</td>\n<td align=\"left\">W3C 发布了<code>HTML5</code>标准</td>\n</tr>\n<tr>\n<td align=\"left\">2015 年</td>\n<td align=\"left\"><code>ECMAScript6</code>正式发布，后更名为<code>ECMAScript2015</code>，之截至目前 2022 年，每年都发布了对应的新版本</td>\n</tr>\n<tr>\n<td align=\"left\">2016 年</td>\n<td align=\"left\"><code>ECMAScript2016</code>正式发布</td>\n</tr>\n<tr>\n<td align=\"left\">2017 年</td>\n<td align=\"left\"><code>ECMAScript2017</code>正式发布</td>\n</tr>\n</tbody></table>\n<!-- YCTODO -->\n<h2 id=\"一些技术发展过程的梳理\"><a href=\"#一些技术发展过程的梳理\" class=\"headerlink\" title=\"一些技术发展过程的梳理\"></a>一些技术发展过程的梳理</h2><p>可以把前端发展的历程分为</p>\n<h2 id=\"展望未来\"><a href=\"#展望未来\" class=\"headerlink\" title=\"展望未来\"></a>展望未来</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>百度百科</li>\n<li><a class=\"link\"   href=\"http://www.javashuo.com/article/p-hvrlfhxo-gc.html\" >前端的历史发展节点 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/196637639\" >Web 开发的历史发展技术演变 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/qq_44273429/article/details/127462439\" >Web 1.0、Web 2.0 和 Web 3.0 之间的比较 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n"},{"_content":"","source":"_posts/Algorithm.md","raw":"","slug":"Algorithm","published":1,"date":"2023-02-28T09:40:57.805Z","updated":"2023-02-28T09:40:57.805Z","_id":"cleo26tzd00001oh8gzwa2tng","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"【API】MutationObserver","date":"2023-01-11T01:30:57.000Z","_content":"## [MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)\n> `MutationObserver` 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。\n\n## 构造函数\n\nMutationObserver()\n\n语法：\n```javascript\n// 创建并返回一个新的 MutationObserver 它会在指定的 DOM 发生变化时被调用。\nvar observer = new MutationObserver(callback);\n```\nthis\nnew绑定 用于类的构造函数\n显式绑定 call apply bind\n隐式绑定 绑定到调用函数的对象\n默认绑定\n\n其他：\n箭头函数 继承外层this\n\n\n","source":"_posts/APIMutationObserver.md","raw":"---\ntitle: 【API】MutationObserver\ndate: 2023-01-11 09:30:57\ntags: [JS]\ncategories: [API]\n---\n## [MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)\n> `MutationObserver` 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。\n\n## 构造函数\n\nMutationObserver()\n\n语法：\n```javascript\n// 创建并返回一个新的 MutationObserver 它会在指定的 DOM 发生变化时被调用。\nvar observer = new MutationObserver(callback);\n```\nthis\nnew绑定 用于类的构造函数\n显式绑定 call apply bind\n隐式绑定 绑定到调用函数的对象\n默认绑定\n\n其他：\n箭头函数 继承外层this\n\n\n","slug":"APIMutationObserver","published":1,"updated":"2023-02-28T11:00:55.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleogj0qo00026ch8cy0qfnyp","content":"<h2 id=\"MutationObserver\"><a href=\"#MutationObserver\" class=\"headerlink\" title=\"MutationObserver\"></a><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" >MutationObserver <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2><blockquote>\n<p><code>MutationObserver</code> 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。</p>\n</blockquote>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>MutationObserver()</p>\n<p>语法：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建并返回一个新的 MutationObserver 它会在指定的 DOM 发生变化时被调用。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(callback);</span><br></pre></td></tr></table></figure></div>\n<p>this<br>new绑定 用于类的构造函数<br>显式绑定 call apply bind<br>隐式绑定 绑定到调用函数的对象<br>默认绑定</p>\n<p>其他：<br>箭头函数 继承外层this</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MutationObserver\"><a href=\"#MutationObserver\" class=\"headerlink\" title=\"MutationObserver\"></a><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" >MutationObserver <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></h2><blockquote>\n<p><code>MutationObserver</code> 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。</p>\n</blockquote>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>MutationObserver()</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建并返回一个新的 MutationObserver 它会在指定的 DOM 发生变化时被调用。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(callback);</span><br></pre></td></tr></table></figure>\n<p>this<br>new绑定 用于类的构造函数<br>显式绑定 call apply bind<br>隐式绑定 绑定到调用函数的对象<br>默认绑定</p>\n<p>其他：<br>箭头函数 继承外层this</p>\n"},{"title":"【实践】手写 call、apply、bind","date":"2022-08-15T07:30:57.000Z","_content":"","source":"_posts/PracticeCallApply.md","raw":"---\ntitle: 【实践】手写 call、apply、bind\ndate: 2022-08-15 15:30:57\ntags: [JS]\ncategories: [实践]\n---","slug":"PracticeCallApply","published":1,"updated":"2023-02-28T10:43:56.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleogj0qt00056ch8aiwwbzeh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"【实践】手写 Promise","date":"2022-09-08T07:30:57.000Z","_content":"","source":"_posts/PracticePromise.md","raw":"---\ntitle: 【实践】手写 Promise\ndate: 2022-09-08 15:30:57\ntags: [JS]\ncategories: [实践]\n---","slug":"PracticePromise","published":1,"updated":"2023-02-28T10:43:59.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleogj0qt00066ch82s6n5ok3","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop01.png","slug":"js-eventloop01.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop02.png","slug":"js-eventloop02.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop03.png","slug":"js-eventloop03.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop04.png","slug":"js-eventloop04.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop05.png","slug":"js-eventloop05.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop06.png","slug":"js-eventloop06.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop07.png","slug":"js-eventloop07.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop08.png","slug":"js-eventloop08.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop09.png","slug":"js-eventloop09.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop10.png","slug":"js-eventloop10.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop11.png","slug":"js-eventloop11.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop12.png","slug":"js-eventloop12.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop13.png","slug":"js-eventloop13.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop14.png","slug":"js-eventloop14.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop15.png","slug":"js-eventloop15.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop16.png","slug":"js-eventloop16.png","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop17.jpg","slug":"js-eventloop17.jpg","post":"cle8bsvfv000cj0h85wld8lht","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s0.jpg","slug":"s0.jpg","post":"cle8bsvfz000rj0h8b1occco2","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-1.png","slug":"s1-1.png","post":"cle8bsvfz000rj0h8b1occco2","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-2.png","slug":"s1-2.png","post":"cle8bsvfz000rj0h8b1occco2","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-3.png","slug":"s1-3.png","post":"cle8bsvfz000rj0h8b1occco2","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-4.png","slug":"s1-4.png","post":"cle8bsvfz000rj0h8b1occco2","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-5.png","slug":"s1-5.png","post":"cle8bsvfz000rj0h8b1occco2","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-6.png","slug":"s1-6.png","post":"cle8bsvfz000rj0h8b1occco2","modified":0,"renderable":0},{"_id":"source/_posts/someInterestingQuestions01/q1.png","slug":"q1.png","post":"cle8bsvfy000mj0h8c2ue4i9g","modified":0,"renderable":0},{"_id":"source/_posts/someInterestingQuestions01/q2.png","slug":"q2.png","post":"cle8bsvfy000mj0h8c2ue4i9g","modified":0,"renderable":0},{"_id":"source/_posts/someInterestingQuestions01/q3.png","slug":"q3.png","post":"cle8bsvfy000mj0h8c2ue4i9g","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s0.png","slug":"s0.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-1.png","slug":"s2-1.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-10.png","slug":"s2-10.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-11.png","slug":"s2-11.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-12.png","slug":"s2-12.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-13.png","slug":"s2-13.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-14.png","slug":"s2-14.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-15.png","slug":"s2-15.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-2.png","slug":"s2-2.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-3.png","slug":"s2-3.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-4.png","slug":"s2-4.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-5.png","slug":"s2-5.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-6.png","slug":"s2-6.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-7.png","slug":"s2-7.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-8.png","slug":"s2-8.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-9.png","slug":"s2-9.png","post":"cle8bsvg0000uj0h80ssp9wdy","modified":0,"renderable":0},{"_id":"source/_posts/MethodologyFrontendEngineering/s0.png","slug":"s0.png","post":"clempgoye000088h89g4q7gcn","modified":0,"renderable":0},{"_id":"source/_posts/MethodologyFrontendEngineering/s1.png","slug":"s1.png","post":"clempgoye000088h89g4q7gcn","modified":0,"renderable":0},{"_id":"source/_posts/MethodologyFrontendEngineering/s2.png","slug":"s2.png","post":"clempgoye000088h89g4q7gcn","modified":0,"renderable":0},{"_id":"source/_posts/MethodologyFrontendEngineering/s3.png","slug":"s3.png","post":"clempgoye000088h89g4q7gcn","modified":0,"renderable":0},{"_id":"source/_posts/MethodologyFrontendEngineering/s4-1.png","slug":"s4-1.png","post":"clempgoye000088h89g4q7gcn","modified":0,"renderable":0},{"_id":"source/_posts/MethodologyFrontendEngineering/s4.png","slug":"s4.png","post":"clempgoye000088h89g4q7gcn","modified":0,"renderable":0},{"_id":"source/_posts/MethodologyFrontendEngineering/s5.png","slug":"s5.png","post":"clempgoye000088h89g4q7gcn","modified":0,"renderable":0},{"_id":"source/_posts/PracticePromise/s1.png","slug":"s1.png","post":"cleogj0qt00066ch82s6n5ok3","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cle8bsvft0007j0h839dpg5eq","category_id":"cle8bsvfq0004j0h8e6ubc7w4","_id":"cle8bsvfx000fj0h8047e1h9o"},{"post_id":"cle8bsvft0008j0h811a6guh7","category_id":"cle8bsvfq0004j0h8e6ubc7w4","_id":"cle8bsvfz000nj0h8h3kmgeyo"},{"post_id":"cle8bsvfs0006j0h8dddp4309","category_id":"cle8bsvfq0004j0h8e6ubc7w4","_id":"cle8bsvg1000vj0h8074ochi9"},{"post_id":"cle8bsvfw000ej0h8hxd6hddm","category_id":"cle8bsvg1000wj0h82gs6haec","_id":"cle8bsvg20015j0h8bw4wh6op"},{"post_id":"cle8bsvfy000jj0h8htp7fem4","category_id":"cle8bsvg20011j0h84p9yhhzv","_id":"cle8bsvg3001aj0h8f5c04khp"},{"post_id":"cle8bsvfy000mj0h8c2ue4i9g","category_id":"cle8bsvg1000wj0h82gs6haec","_id":"cle8bsvg3001cj0h89pjwajpw"},{"post_id":"cle8bsvfz000rj0h8b1occco2","category_id":"cle8bsvg30019j0h81s9v03tz","_id":"cle8bsvg4001ej0h8c3mndfc4"},{"post_id":"cle8bsvg0000uj0h80ssp9wdy","category_id":"cle8bsvg30019j0h81s9v03tz","_id":"cle8bsvg4001fj0h8ha4yfo5d"},{"post_id":"clee7ax1300037oh8fwqk44ng","category_id":"cle8bsvg1000wj0h82gs6haec","_id":"clee7ax1600097oh802vj3p9q"},{"post_id":"clee7ax1400047oh82pz61y2a","category_id":"cle8bsvg1000wj0h82gs6haec","_id":"clee7ax16000c7oh80sfp5pn5"},{"post_id":"clee7ax1400067oh86dck0p8l","category_id":"cle8bsvg1000wj0h82gs6haec","_id":"clee7ax17000e7oh85hjpg0pc"},{"post_id":"clee7ax1500087oh875pk76zq","category_id":"cle8bsvg1000wj0h82gs6haec","_id":"clee7ax17000g7oh8d1ij5elm"},{"post_id":"clee7ax16000b7oh8esjzgw2l","category_id":"cle8bsvg30019j0h81s9v03tz","_id":"clee7ax17000h7oh8287y080v"},{"post_id":"cle8bsvfv000cj0h85wld8lht","category_id":"cle8bsvg20011j0h84p9yhhzv","_id":"clee7tmc90000b8h88v511yil"},{"post_id":"clempgoye000088h89g4q7gcn","category_id":"cle8bsvfq0004j0h8e6ubc7w4","_id":"clempgoyj000488h81dh5ctgu"},{"post_id":"clempgoyh000188h8bzwxan0m","category_id":"cle8bsvfq0004j0h8e6ubc7w4","_id":"clempgoyj000588h809h46gk6"},{"post_id":"clempgoym000688h834wxebkm","category_id":"cle8bsvfq0004j0h8e6ubc7w4","_id":"clempgoyn000888h80knp4xbi"},{"post_id":"cleogj0qo00026ch8cy0qfnyp","category_id":"cleogj0qq00036ch81f53ch4h","_id":"cleogj0qv000a6ch8dfb09pub"},{"post_id":"cleogj0qt00056ch8aiwwbzeh","category_id":"cleogj0qv00086ch8hs9417ho","_id":"cleogj0qw000c6ch84al6c45o"},{"post_id":"cleogj0qt00066ch82s6n5ok3","category_id":"cleogj0qv00086ch8hs9417ho","_id":"cleogj0qx000d6ch86mnp529w"}],"PostTag":[{"post_id":"cle8bsvft0007j0h839dpg5eq","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"cle8bsvfv000bj0h80cf29jrr"},{"post_id":"cle8bsvfv000cj0h85wld8lht","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"cle8bsvfx000ij0h8eemc2w0s"},{"post_id":"cle8bsvfw000ej0h8hxd6hddm","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"cle8bsvfz000qj0h809bg5yed"},{"post_id":"cle8bsvfs0006j0h8dddp4309","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"cle8bsvg0000tj0h8alguc9ug"},{"post_id":"cle8bsvfy000mj0h8c2ue4i9g","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"cle8bsvg1000yj0h80svse0ll"},{"post_id":"cle8bsvft0008j0h811a6guh7","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"cle8bsvg1000zj0h8b162f5lj"},{"post_id":"cle8bsvft0008j0h811a6guh7","tag_id":"cle8bsvfz000pj0h8exifg24z","_id":"cle8bsvg20013j0h86f7wge7o"},{"post_id":"cle8bsvfy000jj0h8htp7fem4","tag_id":"cle8bsvg1000xj0h8hsn3gdz0","_id":"cle8bsvg20014j0h8fwxjd7ab"},{"post_id":"cle8bsvfz000rj0h8b1occco2","tag_id":"cle8bsvg1000xj0h8hsn3gdz0","_id":"cle8bsvg30018j0h80nindete"},{"post_id":"cle8bsvg0000uj0h80ssp9wdy","tag_id":"cle8bsvg1000xj0h8hsn3gdz0","_id":"cle8bsvg3001bj0h8ciu83c8p"},{"post_id":"clee7ax1300037oh8fwqk44ng","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"clee7ax1400057oh8hf5kfmv7"},{"post_id":"clee7ax1400047oh82pz61y2a","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"clee7ax1500077oh8h2w85nbq"},{"post_id":"clee7ax1400067oh86dck0p8l","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"clee7ax16000a7oh876e6co1y"},{"post_id":"clee7ax1500087oh875pk76zq","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"clee7ax16000d7oh85018ervv"},{"post_id":"clee7ax16000b7oh8esjzgw2l","tag_id":"cle8bsvg1000xj0h8hsn3gdz0","_id":"clee7ax17000f7oh81n92aga3"},{"post_id":"clempgoye000088h89g4q7gcn","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"clempgoyj000288h8gusrffqe"},{"post_id":"clempgoyh000188h8bzwxan0m","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"clempgoyj000388h84bgl33un"},{"post_id":"clempgoym000688h834wxebkm","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"clempgoyn000788h837zpa1ra"},{"post_id":"cleogj0qo00026ch8cy0qfnyp","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"cleogj0qs00046ch89jx4fzv8"},{"post_id":"cleogj0qt00056ch8aiwwbzeh","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"cleogj0qu00076ch8d7c5fnvq"},{"post_id":"cleogj0qt00066ch82s6n5ok3","tag_id":"cle8bsvfr0005j0h81puj9a7d","_id":"cleogj0qv00096ch80sl07eaz"}],"Tag":[{"name":"JS","_id":"cle8bsvfr0005j0h81puj9a7d"},{"name":"前端工程化","_id":"cle8bsvfz000pj0h8exifg24z"},{"name":"vue","_id":"cle8bsvg1000xj0h8hsn3gdz0"}]}}