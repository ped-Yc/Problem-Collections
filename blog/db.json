{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/OPTIMA.woff","path":"fonts/OPTIMA.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/OPTIMA_B.woff","path":"fonts/OPTIMA_B.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Optima Medium.woff","path":"fonts/Optima Medium.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Optima_Italic.woff","path":"fonts/Optima_Italic.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","path":"images/redefine-avatar.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","path":"images/redefine-logo.webp","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","path":"images/redefine-logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","path":"webfonts/fa-duotone-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","path":"webfonts/fa-duotone-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","path":"webfonts/fa-light-300.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","path":"webfonts/fa-light-300.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","path":"webfonts/fa-thin-100.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","path":"webfonts/fa-thin-100.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","path":"webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","path":"webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","path":"css/common/redefine-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","path":"js/libs/mermaid.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","path":"js/libs/mermaid.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","path":"js/layouts/lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/menu-shrink.js","path":"js/layouts/menu-shrink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/odometer.min.js","path":"js/layouts/odometer.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","path":"js/plugins/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","path":"js/layouts/toc.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/code-block.js","path":"js/tools/code-block.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/dark-light-toggle.js","path":"js/tools/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/go-top-bottom.js","path":"js/tools/go-top-bottom.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/local-search.js","path":"js/tools/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","path":"js/tools/runtime.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/toc-toggle.js","path":"js/tools/toc-toggle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","path":"css/common/codeblock/code-block.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/assets/fonts.css","path":"assets/fonts.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","path":"assets/odometer-theme-minimal.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","path":"fontawesome/all.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","path":"fontawesome/brands.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","path":"fontawesome/duotone.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","path":"fontawesome/fontawesome.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","path":"fontawesome/light.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","path":"fontawesome/regular.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","path":"fontawesome/solid.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","path":"fontawesome/svg-with-js.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","path":"fontawesome/thin.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","path":"fontawesome/v4-font-face.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","path":"fontawesome/v4-shims.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","path":"fontawesome/v5-font-face.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","path":"js/plugins/tabs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1666172462606},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1666172460955},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1666172462584},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1666172462608},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1666172460970},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1666172463019},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1666172462602},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1666172463021},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1666172463025},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1666172463023},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1666172463021},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1666172463026},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1666172463026},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1666172463028},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1666172460983},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1666172463029},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1666172463030},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1666172463034},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1666172463027},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1666172463030},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1666172461155},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1666172460986},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1666172461159},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1666172461156},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1666172461164},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1666172461160},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1666172462582},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1666172460978},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1666172460979},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1666172460980},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1666172460984},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1666172460989},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1666172461145},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1666172461152},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1666172461156},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1666172461154},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1666172460988},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1666172461161},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1666172461160},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1666172460982},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1666172460986},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1666172461164},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1666172462993},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1666172462599},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1666172461166},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1666172462994},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1666172461376},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1666172463007},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1666172461377},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1666172461379},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1666172462989},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1666172462991},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1666172462990},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1666172460977},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1666172462596},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1666172460985},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1666172462594},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1666172460987},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1666172460988},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1666172461157},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1666172461162},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1666172461167},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1666172462997},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1666172462996},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1666172462997},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1666172462998},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1666172463002},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1666172463004},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1666172463003},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1666172463002},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1666172463004},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1666172463006},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1666172462986},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1666172461375},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1666172463016},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1666172463003},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1666172462999},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1666172462987},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1666172462592},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1666172460974},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1666172460975},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1666172462590},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1666172462593},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1666172463013},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1666172463012},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1666172462576},{"_id":"public/2023/02/01/hello-world/index.html","hash":"d036e6f01085fa4dd9d923c6d268f64a5c5e17e2","modified":1675881694032},{"_id":"public/archives/index.html","hash":"cf1a7a0407a80a4fd7f9193548ce101e2a01cadb","modified":1676315004874},{"_id":"public/archives/2023/index.html","hash":"3158d8ad6a707ae112d86b78f2bf78d578bea1fa","modified":1676315004874},{"_id":"public/archives/2023/02/index.html","hash":"7f8a532517b462c947188077b176058b0fc9b8df","modified":1676315004874},{"_id":"public/index.html","hash":"d27a4d1daa788d5047fe1367d7d3cb22fd2a10c8","modified":1676315004874},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1675183258808},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1675183258808},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1675183258808},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1675183258808},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1675183258808},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1675183258808},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1675183258808},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1675183258808},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1675183258808},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1675183258808},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1675183258808},{"_id":"public/css/style.css","hash":"c5f7718c5d56de1b129d07d547a142d7b1fadc47","modified":1676313759600},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1675183258808},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1675183258808},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1675183258808},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1675183258808},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1675183258808},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1675183258808},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1675183258808},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1675183258808},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1675183258808},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1675183258808},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1675183258808},{"_id":"source/_posts/post.md","hash":"1294b0171e91aae8be638a4e786faf77b913479e","modified":1675196610770},{"_id":"public/2023/02/01/post/index.html","hash":"26463d3c76868a4cf325f326f23dcd10d48d923e","modified":1675881694032},{"_id":"public/tags/javascript-js/index.html","hash":"9e97eaa432233c60b6644fecaf2f2a08f7a4c9f5","modified":1675185014235},{"_id":"source/_posts/JS执行流程.md","hash":"739cc709ab3f53abc8633a410d3b88f8d33b0198","modified":1675185387617},{"_id":"public/2023/02/01/JS执行流程/index.html","hash":"5ac3b914d44d71fe1c83cce005791622e0b6ee6e","modified":1675193922540},{"_id":"public/tags/JS/index.html","hash":"b326d80d97ca41c71433d6bf3ad2ae960f6bb13c","modified":1676315004874},{"_id":"node_modules/hexo-theme-redefine/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/CODE_OF_CONDUCT.md","hash":"61a6276ef54989b7a1325f3ecb3183a4dfdf50cb","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/CONTRIBUTING.md","hash":"4683df57687241164bc55f1c75fce06041f7ebf4","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/README_zh-CN.md","hash":"06c8e49c62a874a584e7b091efe7f4335fef9d92","modified":1676313650024},{"_id":"node_modules/hexo-theme-redefine/README_zh-TW.md","hash":"d033cb3ce7b5bb9542a67e510861471dd7630f5c","modified":1676313650025},{"_id":"node_modules/hexo-theme-redefine/README.md","hash":"5b0316f7e5d5572b5a552dfb5c94d323a73b27a3","modified":1676313650027},{"_id":"node_modules/hexo-theme-redefine/languages/en.yml","hash":"1416a29d783bc2ea54a4dac5bfc190266243931e","modified":1676313667937},{"_id":"node_modules/hexo-theme-redefine/_config.yml","hash":"5c07e5bcd8b5aaca17c02c95aaea22fa06b173ac","modified":1676313667933},{"_id":"node_modules/hexo-theme-redefine/package.json","hash":"64461fbe0b74dd377d7efcdc750473051e267062","modified":1676313646919},{"_id":"node_modules/hexo-theme-redefine/layout/archive-content.ejs","hash":"64254fbe361831419333348fa7ad151629634eba","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/languages/zh-TW.yml","hash":"ad104759f13cb7de62417e3e8d5cd461e83f26e5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/languages/zh-CN.yml","hash":"be356f55baa7f4e9514d4aeb37b22913e4759291","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/article-content.ejs","hash":"006c21dcc0cb66a58a94bd7a56f739969e2360c1","modified":1676313645753},{"_id":"node_modules/hexo-theme-redefine/layout/category-content.ejs","hash":"7c7680ee5d02e4dd5917ed5a621ecf51b61d8181","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/category-list.ejs","hash":"92cbeee5c99b29616ff3ccbee47fe75b756bfa96","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/home-content.ejs","hash":"e9aa5fd0cce47d5d5a9962f34a5dca0800f893e3","modified":1676313645769},{"_id":"node_modules/hexo-theme-redefine/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/page.ejs","hash":"aa7ec5657fef63b038a39e4cb444027bdc65dccb","modified":1676313645776},{"_id":"node_modules/hexo-theme-redefine/layout/layout.ejs","hash":"0b4c05d3a957de435e8f495a9598ec3bf9fb5412","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/tag-content.ejs","hash":"0ceed12ff57c981555158e47c8b398baf70ce5f8","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/use-source-data.js","hash":"3ab07198fbca7015dcc4c061247681480058b0dc","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/feature-request--english-version-.md","hash":"243dbc4cf0678ca4f89fc2559eab3ace9fa881a7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-提交--中文版本-.md","hash":"ce8a586c2edfb66efe03d6c49e642ba566d302c5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-report--english-version-.md","hash":"6b7cd67ce8911fdc0863da1b54e404514c7e85e5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/功能建议--中文版本-.md","hash":"ef69a31bcdbe2f749fd4990a4a85d51c300cd2dd","modified":1676313650027},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/npm-publish.yml","hash":"2b1771ae2a71e3c148b09d507f9be47d04e6e623","modified":1676313667938},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/aliyun_cdn.yml","hash":"09693748d95f126abe95582152d1c364bc82b4bb","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/footer.ejs","hash":"095bd0f5fabddd17d6849873db8067abf330b153","modified":1676313645764},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/head.ejs","hash":"ec21c712b6a0880b065cc12fbcbb96ad0c9aead8","modified":1676313645767},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/menu.ejs","hash":"cf433e065c6d12b83f7209ccc349fb744028d83a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/scripts.ejs","hash":"ba76c129a19df66125aa3c6c7aab788740bb1399","modified":1676313645781},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/page-template.ejs","hash":"199cd805443b899d3d7e73b19064107722a0bfff","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/events/welcome.js","hash":"10e2d223140bc547de14f344e046ab8b0aa48bf0","modified":1676313646918},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/pjax.ejs","hash":"6416c0e4c7583db85d7f738b82e5aaa8f254876e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/lazyload-handle.js","hash":"7a8fd4996b9720c8d4cdb3042bfe5a1008f7c5fd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/link-handle.js","hash":"a92ed888dad340809ee558020e0bb9f41e6413ee","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/export-config.js","hash":"e62ebc225f718a849033ded39e76b6259c300b00","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/plugins/note-large.js","hash":"88a53682ebb71ff2ce1d08205f5eb22b837acd44","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/helper.js","hash":"8b02ae0ce5ae0f179602a9e19c9b7a0d9e17e3a4","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/plugins/note.js","hash":"7c529ffe108a04a03ae6667074f69c5e62be8c54","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/OPTIMA.woff","hash":"ddefd7389a3aaf00d50e2ecc99f71eefe853c4b3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/OPTIMA_B.woff","hash":"129a1b30e7b829b9894245b3c99e1c6c016e4147","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Optima Medium.woff","hash":"f18b71ba83f68f1478b0af64cf76a99971c4fd9a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Optima_Italic.woff","hash":"7200bef189fb05f741555e734908df59d0f20e2f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/brands.min.css","hash":"956a0381099e0204c870fc447b8522b2f4b063b8","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/fonts.css","hash":"9810e18dbd05380512e251dfa03e985fe7779e17","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/light.min.css","hash":"1e252b2b3e8486d3d6e4a6fa36157aaad73d9bee","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/regular.min.css","hash":"8b6a0f2a240efd3175e6aef9928b92c62ffd43d8","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/solid.min.css","hash":"9dfe544d3afe0a3dfbe61bbb3bbb6ac94995d90c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","hash":"b2cffcba34fd9a3f30e47e458cce6e27802e3abb","modified":1676313650074},{"_id":"node_modules/hexo-theme-redefine/source/css/thin.min.css","hash":"65038cffbfb1e0f087d44abf9758ad16a08caf82","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/svg-with-js.min.css","hash":"28ba38557852bff7d4f81a589958ceead70b3b2d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/v4-font-face.min.css","hash":"57df6abf04b71d0946fa20e66e946d3a2fa66667","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/v4-shims.min.css","hash":"3f1f1977ce39f47e963194ae11a1f3dbbe4d951e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/v5-font-face.min.css","hash":"758a98c7bacc6d72bc3f53ecad34424096729699","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","hash":"364550d66fb15b740c038da4780ff4c78c500c70","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","hash":"2f9054f6889cb6fe648f65a04370b1bf5a08ab98","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","hash":"1d37c4ea27006b51d5e48c028329de57475f53bd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","hash":"015e3b4e7d1cefd31db0f4a07651aa09626ff522","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","hash":"1feb45991ffce095b0b31a7ab0156cd9cdb8cfd7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","hash":"ddd1fe3304a386a8b66e2d37d8f70210d09ca07d","modified":1676313646916},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","hash":"24f298867c8f7d42240dba3a17da1a0224bd6a94","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/comment.ejs","hash":"6649b4ded39725bcf30ac785e6f957580c274b4f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","hash":"1d51fca676afe5d0cbaa854d650a99d23e2f8219","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/gitalk.ejs","hash":"28a0c8b1da66a9b6863e5444aa0b50c8f6b862f0","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/twikoo.ejs","hash":"f454a7ef2b42865cdfafb9a9d66e3635a8e4175f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/components/archive-list.ejs","hash":"7c33e49286d54824cd8f3483e30de5579951edc6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/waline.ejs","hash":"230a5f656b128f74be8792ad295a7ab255d496e6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/components/first-screen.ejs","hash":"d613cd05dfc34760f60101bac45c592bf8bf7d3c","modified":1676313645762},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/components/friends-link.ejs","hash":"606b1b223a4429eb28e5295a18ad70007ef459bc","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/posts/article-copyright-info.ejs","hash":"77e13720374efb902ee3d4d04d13b62de033a3ae","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/components/home-article-meta-info.ejs","hash":"8c62d39a90540372a1473f411e9bd021b32ac9d2","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/posts/article-meta-info.ejs","hash":"51d17aa821306d8f47908e8a5a659e712c5c5d6d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/posts/toc.ejs","hash":"b3ab8e1f6c08090f6b59fa6ffc802f6427ea3c37","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/image-viewer.ejs","hash":"beb3dec5e08856a29d585fe0eb94a8a6ddade4dd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/paginator.ejs","hash":"cfd4d9a30bd20ee0750b79226cb94562439013bf","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/local-search.ejs","hash":"72c9acca0280f0e63e6a5d31618dd2707bdbec3f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/post-tools.ejs","hash":"6418d8d9b1d9f9dc5361fabe280507c8a50d9513","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","hash":"b45d84487321afa6a294e6fb1c179eb65901b0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","hash":"c280c08a20709612375081b5502b7eb0f8288632","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","hash":"6e1ef812495960c863fd9c405de46d1b71f2c667","modified":1676313650062},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/side-tools.ejs","hash":"9f8fdf30f308bd20488aa76f134c516972b190cc","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","hash":"717cda6295b0890321166447074b71b4ca8f3def","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","hash":"bfa1ff5effe22490c8132a580c4ec6e3496c28e0","modified":1676313650080},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","hash":"f8df2e4c4829bf081fa49acc0832fec0d07bdeb9","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","hash":"500bb14f680565b681471b37630161f7726657d3","modified":1676313650037},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/progress-bar.ejs","hash":"d893fb2761220282efa6461c0d4107de3e2bcfdb","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","hash":"f95793e4442642952dd60de31595e712e3e2bb69","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","hash":"d1c5374fbb093d7e800f6f2a71f2cd00955e4802","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","hash":"e2303d014353645e0d54f171db06d1ffbd8a23f0","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","hash":"f9c85163c520a01123da63907025b567eadf87b1","modified":1676313650067},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","hash":"e328d4ace5b5bd52e57bb0683e2d6935f128434d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/tools/tagcloud.ejs","hash":"cd29a21b9747f39ff1761c3dbbf22523953e19d2","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","hash":"298c51d15c0286acbebe420369daf87edf8aada7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/menu-shrink.js","hash":"de907057c0d162664e92880aaf457002c51dd5b6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","hash":"84b8147c7ff1f949f0b7215060376751590111d6","modified":1676313645820},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","hash":"d832e2fa48626d0c79ceee83a070639a9edd5347","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/code-block.js","hash":"3306e9abde9d64d496524ba000c6bd0d1d7fc4b3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/dark-light-toggle.js","hash":"1c12e83fd94d51b4476c8f480165312424d62f4a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/go-top-bottom.js","hash":"f5f6f6ba96e288a5fd1427b7f3761139623e8fcd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","hash":"cfc1a9b582b281e9dd1688a55cfbc5e89d3bd968","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/local-search.js","hash":"bc9e888ee05c4fb0e8fd1962423a04f63c1e393e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/toc-toggle.js","hash":"eeab6a799bf23a2d4c58921dcf8b15203e1d3bfd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_plugins/notes.styl","hash":"7642fcb1e1f8e28cca7319cff069b78831c720ec","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","hash":"ff6bb7e1b6084b0a658fbc76a5db3d4baf47abe8","modified":1676313650047},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/archive-list.styl","hash":"e8f912d1cf967c5d7b74edfebb26fc838bb969b9","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","hash":"04450276cfe5063ddf5ab43d6d78bcddf5519f25","modified":1676313650057},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","hash":"65e9a6ba5f8f9371bcd6db62d8ba7355595905d2","modified":1676313650049},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-copyright-info.styl","hash":"305e4f05f672354f26b3f22013d0c44d84bd3e2b","modified":1676313650038},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-meta-info.styl","hash":"b447bdf70ae1d272af7c54f29bc2c9de3f2e98c7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/first-screen.styl","hash":"9032095a804099e859c9eb95e104f1d199f8c59c","modified":1676313650052},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/footer.styl","hash":"29adc66afe145451cf396954689b73d1372cdcc6","modified":1676313650054},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/image-viewer.styl","hash":"fe4e168a1968b3f9b33d0292944590e76809e437","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/local-search.styl","hash":"64ae07a8792ac6bb12cc8c24e776306fee68b1c2","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/page-template.styl","hash":"9015d65eafee96ce2083b1d0be14245f7762a3c3","modified":1676313650066},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/menu.styl","hash":"d7002d8486fde897aa1547ebd5d29b7f155fb3bc","modified":1676313650064},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/paginator.styl","hash":"70e2af5941d443cbd465a628c96d4d3e7a1e2de1","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/post-tools.styl","hash":"b7a2ff5fe4ec790e79bdb24554e5cd8151d5015f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/progress-bar.styl","hash":"efa81a0f934b6afc8fb0da62d5fc3a10804851a6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/side-tools.styl","hash":"73b9f44df9b8fa93f41464de21946c1ba71f0a1b","modified":1676313650072},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/toc.styl","hash":"9bfd46388c3a1fd0d31119e2190246ad1b04a4e0","modified":1676313650077},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/comment.styl","hash":"4213d9fa7e1d1ff43e7b4db15d73206f7adff1a0","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/tagcloud.styl","hash":"5a9eaa55b849336b374ea380a1ddb125ddf0258f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/gitalk.styl","hash":"d247824a18463b48af23f3b476d7d90ad7047858","modified":1676313650055},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/twikoo.styl","hash":"e926c0121d94775c3cd9e9667c670d50b0fcb938","modified":1676313650078},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/waline.styl","hash":"91e4d045e0e829f3345a454a72ee51f5624451e7","modified":1676313650081},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","hash":"132096157a1bd06ee90d0e099b30858e55f44a2f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/fontawesome.min.css","hash":"4caeaf71d849d565eb73d6cfa2a885b8fd5a1585","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","hash":"3539eea45ea45122110ca826e4cf461a9fc24bfd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/duotone.min.css","hash":"2a4c024238017920b3fd07ec8ace147fa813131d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","hash":"63bee62a49b1e129dd410a7804c36f600e45e9ef","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","hash":"e62b834496e8808e09d69b157dd8d30767ab281d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","hash":"582f653eaef29d0cd2e05e104f2cb5776cb8ff43","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","hash":"43e3f3b70a4a803054641c8d946b46978dfcbc23","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/all.min.css","hash":"1aca70954817e603412964fdbfb231f03137af7c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","hash":"90725403a3ee84c1703acbdc0e913147345e46fb","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","hash":"26722d8063ee4161197b007488dbfb0bd45d543d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","hash":"44a016037ea5a3573ab827be35355262850678b4","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","hash":"fe73f4c9149947d93fde22f82e13c4186b341b43","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","hash":"6403f57a485e73326e731359cc246a7ecacf96db","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","hash":"e237771f52ad4d3a041c6b9f51ca66b0811655c9","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":499162500000},{"_id":"public/fonts/OPTIMA_B.woff","hash":"129a1b30e7b829b9894245b3c99e1c6c016e4147","modified":1675185014235},{"_id":"public/fonts/OPTIMA.woff","hash":"ddefd7389a3aaf00d50e2ecc99f71eefe853c4b3","modified":1675185014235},{"_id":"public/fonts/Optima Medium.woff","hash":"f18b71ba83f68f1478b0af64cf76a99971c4fd9a","modified":1675185014235},{"_id":"public/fonts/Optima_Italic.woff","hash":"7200bef189fb05f741555e734908df59d0f20e2f","modified":1675185014235},{"_id":"public/images/loading.svg","hash":"364550d66fb15b740c038da4780ff4c78c500c70","modified":1675185014235},{"_id":"public/images/redefine-avatar.svg","hash":"2f9054f6889cb6fe648f65a04370b1bf5a08ab98","modified":1675185014235},{"_id":"public/images/redefine-logo.webp","hash":"1d37c4ea27006b51d5e48c028329de57475f53bd","modified":1675185014235},{"_id":"public/images/redefine-logo.svg","hash":"015e3b4e7d1cefd31db0f4a07651aa09626ff522","modified":1675185014235},{"_id":"public/webfonts/fa-v4compatibility.ttf","hash":"24f298867c8f7d42240dba3a17da1a0224bd6a94","modified":1675185014235},{"_id":"public/webfonts/fa-v4compatibility.woff2","hash":"1d51fca676afe5d0cbaa854d650a99d23e2f8219","modified":1675185014235},{"_id":"public/css/brands.min.css","hash":"956a0381099e0204c870fc447b8522b2f4b063b8","modified":1675185014235},{"_id":"public/css/fontawesome.min.css","hash":"4caeaf71d849d565eb73d6cfa2a885b8fd5a1585","modified":1675185014235},{"_id":"public/css/duotone.min.css","hash":"2a4c024238017920b3fd07ec8ace147fa813131d","modified":1675185014235},{"_id":"public/css/all.min.css","hash":"1aca70954817e603412964fdbfb231f03137af7c","modified":1675185014235},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"132096157a1bd06ee90d0e099b30858e55f44a2f","modified":1675185014235},{"_id":"public/css/fonts.css","hash":"9810e18dbd05380512e251dfa03e985fe7779e17","modified":1675185014235},{"_id":"public/css/light.min.css","hash":"1e252b2b3e8486d3d6e4a6fa36157aaad73d9bee","modified":1675185014235},{"_id":"public/css/solid.min.css","hash":"9dfe544d3afe0a3dfbe61bbb3bbb6ac94995d90c","modified":1675185014235},{"_id":"public/css/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":1675185014235},{"_id":"public/css/regular.min.css","hash":"8b6a0f2a240efd3175e6aef9928b92c62ffd43d8","modified":1675185014235},{"_id":"public/css/thin.min.css","hash":"65038cffbfb1e0f087d44abf9758ad16a08caf82","modified":1675185014235},{"_id":"public/css/v4-font-face.min.css","hash":"57df6abf04b71d0946fa20e66e946d3a2fa66667","modified":1675185014235},{"_id":"public/js/main.js","hash":"1feb45991ffce095b0b31a7ab0156cd9cdb8cfd7","modified":1675185014235},{"_id":"public/css/v5-font-face.min.css","hash":"758a98c7bacc6d72bc3f53ecad34424096729699","modified":1675185014235},{"_id":"public/js/utils.js","hash":"ddd1fe3304a386a8b66e2d37d8f70210d09ca07d","modified":1676313759600},{"_id":"public/css/common/basic.css","hash":"6b666d3b21653d626def790af0a6fb3bc7215933","modified":1675185014235},{"_id":"public/css/common/markdown.css","hash":"e4027a0c8563f76afcad703f37e4de139887af08","modified":1676313759600},{"_id":"public/css/common/redefine-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675185014235},{"_id":"public/css/common/variables.css","hash":"c9d161293fc460bf0a9d28315862ecff94ab6ddb","modified":1676313759600},{"_id":"public/css/common/animated.css","hash":"5eb3f4369948955ea0a4543957af6086b2eed7b8","modified":1675185014235},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675185014235},{"_id":"public/css/layout/article-content.css","hash":"9df4bc435af2f94b6f5fe9a1742af9dcaa5c5e16","modified":1676313759600},{"_id":"public/css/layout/category-content.css","hash":"068db2c1ea9a6dc2a0822affff5200547732753a","modified":1675185014235},{"_id":"public/css/layout/home-content.css","hash":"444e33875e33be0553b83a316d4223372eefab8e","modified":1675185014235},{"_id":"public/css/layout/category-list.css","hash":"672859a61a4e93c0514772112fb557395306e940","modified":1675185014235},{"_id":"public/css/layout/page.css","hash":"b82a8ae9335a6e2b034ba56dba73e524a24b670e","modified":1676313759600},{"_id":"public/css/layout/tag-content.css","hash":"33984cff48fe2f37286f6f0151b0c7cc2d5b9454","modified":1675185014235},{"_id":"public/js/layouts/lazyload.js","hash":"298c51d15c0286acbebe420369daf87edf8aada7","modified":1675185014235},{"_id":"public/js/layouts/menu-shrink.js","hash":"de907057c0d162664e92880aaf457002c51dd5b6","modified":1675185014235},{"_id":"public/js/plugins/mermaid.js","hash":"84b8147c7ff1f949f0b7215060376751590111d6","modified":1676313759600},{"_id":"public/js/layouts/toc.js","hash":"d832e2fa48626d0c79ceee83a070639a9edd5347","modified":1675185014235},{"_id":"public/js/layouts/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1675185014235},{"_id":"public/js/tools/code-block.js","hash":"3306e9abde9d64d496524ba000c6bd0d1d7fc4b3","modified":1675185014235},{"_id":"public/js/tools/dark-light-toggle.js","hash":"1c12e83fd94d51b4476c8f480165312424d62f4a","modified":1675185014235},{"_id":"public/js/tools/go-top-bottom.js","hash":"f5f6f6ba96e288a5fd1427b7f3761139623e8fcd","modified":1675185014235},{"_id":"public/js/tools/local-search.js","hash":"bc9e888ee05c4fb0e8fd1962423a04f63c1e393e","modified":1675185014235},{"_id":"public/js/tools/toc-toggle.js","hash":"eeab6a799bf23a2d4c58921dcf8b15203e1d3bfd","modified":1675185014235},{"_id":"public/js/tools/runtime.js","hash":"cfc1a9b582b281e9dd1688a55cfbc5e89d3bd968","modified":1675185014235},{"_id":"public/css/common/codeblock/code-block.css","hash":"93b7c994fc70c83f49e186c563f00d6ed7e32ae3","modified":1676313759600},{"_id":"public/css/common/codeblock/highlight.css","hash":"4db77f6c6b18f35bc8b2cda28b9734584d851568","modified":1676313759600},{"_id":"public/css/common/codeblock/code-theme.css","hash":"5dc5a06445bcd234f68e3489e3f0bfcb6d5f4ee8","modified":1676313759600},{"_id":"public/css/svg-with-js.min.css","hash":"28ba38557852bff7d4f81a589958ceead70b3b2d","modified":1675185014235},{"_id":"public/css/v4-shims.min.css","hash":"3f1f1977ce39f47e963194ae11a1f3dbbe4d951e","modified":1675185014235},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1675185014235},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1675185014235},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"3539eea45ea45122110ca826e4cf461a9fc24bfd","modified":1675185014235},{"_id":"public/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":1675185014235},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"63bee62a49b1e129dd410a7804c36f600e45e9ef","modified":1675185014235},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"e62b834496e8808e09d69b157dd8d30767ab281d","modified":1675185014235},{"_id":"public/webfonts/fa-light-300.woff2","hash":"43e3f3b70a4a803054641c8d946b46978dfcbc23","modified":1675185014235},{"_id":"public/webfonts/fa-duotone-900.woff2","hash":"582f653eaef29d0cd2e05e104f2cb5776cb8ff43","modified":1675185014235},{"_id":"public/webfonts/fa-thin-100.woff2","hash":"90725403a3ee84c1703acbdc0e913147345e46fb","modified":1675185014235},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"26722d8063ee4161197b007488dbfb0bd45d543d","modified":1675185014235},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"44a016037ea5a3573ab827be35355262850678b4","modified":1675185014235},{"_id":"public/webfonts/fa-light-300.ttf","hash":"fe73f4c9149947d93fde22f82e13c4186b341b43","modified":1675185014235},{"_id":"public/webfonts/fa-duotone-900.ttf","hash":"6403f57a485e73326e731359cc246a7ecacf96db","modified":1675185014235},{"_id":"public/webfonts/fa-thin-100.ttf","hash":"e237771f52ad4d3a041c6b9f51ca66b0811655c9","modified":1675185014235},{"_id":"public/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":1675185014235},{"_id":"public/categories/JS/index.html","hash":"4f465e8680699b679abe8ea0b80c8a8d7a0aa222","modified":1675193922540},{"_id":"source/about/index.md","hash":"141b63dee95c3a26c1725a4b8a890da313b263d4","modified":1675189041731},{"_id":"public/about/index.html","hash":"151d8f005350ef4589aad9efdeed9f0051bc5a9d","modified":1675189502527},{"_id":"node_modules/hexo-theme-redefine/source/images/avatar.jpeg","hash":"3498dfe2e4ab38489258f337f4111992b326bab5","modified":1635714275425},{"_id":"public/images/avatar.jpeg","hash":"3498dfe2e4ab38489258f337f4111992b326bab5","modified":1675191981667},{"_id":"public/search.xml","hash":"eed404d03ed40a5cd571324c7a8323b14f5c523c","modified":1676314465269},{"_id":"source/tag/index.md","hash":"fe057cc324e10c9eed499fff0a67a22d839d7f39","modified":1675188813414},{"_id":"source/_about/index.md","hash":"951e8d007b09d4be6e3457431c44a374053e7fce","modified":1675185670097},{"_id":"source/_tag/index.md","hash":"fe057cc324e10c9eed499fff0a67a22d839d7f39","modified":1675188813414},{"_id":"source/tags/index.md","hash":"5446c7484fbe4610611ac36065df0d6d6f6d12fe","modified":1675189707535},{"_id":"public/tags/index.html","hash":"6af1d1326b8e1c8a7b2bbd4d53efb1995fa32ba7","modified":1676315004874},{"_id":"source/_posts/代码重构的一点心得.md","hash":"69653b887625df96d6d8ebbff5546f9b195f5279","modified":1675190106392},{"_id":"public/2023/02/01/代码重构的一点心得/index.html","hash":"c092e85851df86750c9be158c7aceeffb42d8dde","modified":1675193922540},{"_id":"public/categories/方法论/index.html","hash":"eae20e4a182b65efec81c55b054595514335f287","modified":1676315004874},{"_id":"source/_posts/一些有趣的问题01.md","hash":"d22174f49bf30508e3be92fb9b2377379caa5266","modified":1675192554422},{"_id":"source/categories/index.md","hash":"5078291948cf897258007470951ef34cd129af80","modified":1675192987768},{"_id":"source/_posts/【一些有趣的问题】事件循环.md","hash":"e806c6b88929313da1b4437b0020eb1f66e6a57e","modified":1675196130229},{"_id":"public/categories/index.html","hash":"8bcf721b4f93a72d939681f7d48ccae6e07b8ef0","modified":1676315004874},{"_id":"public/2021/02/23/【一些有趣的问题】事件循环/index.html","hash":"ab7c579abc271077224744393a178b357ed13911","modified":1675967749328},{"_id":"public/archives/2021/index.html","hash":"1fd07592b1d5ec4700a7acbc1079fa7ff2615908","modified":1676315004874},{"_id":"public/archives/2021/02/index.html","hash":"1c7dc04aab5934bb69aa6ea2b69994498f1badab","modified":1676315004874},{"_id":"public/categories/一些有趣的问题/index.html","hash":"68a14703b945f20204504df1471e3fcafbbfa2d7","modified":1676315004874},{"_id":"source/_posts/【JS运行机制】JS执行流程.md","hash":"db4f3c4622f9faf56f5a36a991ab1a9ddf92e2b7","modified":1675968430409},{"_id":"source/_posts/【一些有趣的问题】作用域与闭包.md","hash":"0371d70c329295de6b6bef16417f2279e031099d","modified":1675197966830},{"_id":"source/_posts/【方法论】代码重构的一点心得.md","hash":"14188fe0c93a47e0dfd28a3f2ac9fb3d8bbf5d2e","modified":1675194026156},{"_id":"public/2023/02/01/【方法论】代码重构的一点心得/index.html","hash":"5d8f51ed3a186b2d6afe4deeaf76be52608afbcf","modified":1676315004874},{"_id":"public/2023/02/01/【JS运行机制】JS执行流程/index.html","hash":"ec36a0d38105d908f2c10cd2347a642e759ba7f6","modified":1676315004874},{"_id":"public/2021/02/23/【一些有趣的问题】作用域与闭包/index.html","hash":"d996ff405ce91f922ef11d007f90207bdfe64a36","modified":1675194467654},{"_id":"public/categories/JS运行机制/index.html","hash":"863e532e9e3d28531a75ccbe950ceead2f33e6ab","modified":1676315004874},{"_id":"public/2021/02/25/【一些有趣的问题】作用域与闭包/index.html","hash":"e51e399310932fbf4fb3ec7eab90f3c3a263ecc9","modified":1675967749328},{"_id":"source/_posts/s1.md","hash":"f8dba87350c2bec6cc63d5f9f37ad48fa3a2ec2d","modified":1675196627292},{"_id":"source/_posts/s1/Snipaste_2023-02-01_04-07-52.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675195725315},{"_id":"source/_posts/s1/【一些有趣的问题】作用域与闭包.md","hash":"3bcdeccd8af6642cef3e6722a9d75c0a5c060d47","modified":1675196791876},{"_id":"public/2023/02/01/s1/index.html","hash":"808284257a21807a02233e9d10e416b79e5d5082","modified":1675881694032},{"_id":"public/2021/02/25/s1/【一些有趣的问题】作用域与闭包/index.html","hash":"09c264601e9001f0c59a2550e052cf96f8a620c1","modified":1675196796979},{"_id":"public/2023/02/01/s1/Snipaste_2023-02-01_04-07-52.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675196796979},{"_id":"public/2023/02/01/s1/【一些有趣的问题】作用域与闭包.html","hash":"111994adcb00cf874e57767c4a390fe330494908","modified":1675196796979},{"_id":"source/_posts/【一些有趣的问题】作用域与闭包/Snipaste_2023-02-01_04-07-52.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675195725315},{"_id":"public/2021/02/25/【一些有趣的问题】作用域与闭包/Snipaste_2023-02-01_04-07-52.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675196922943},{"_id":"source/images/q1.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675195725315},{"_id":"public/images/q1.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675197137756},{"_id":"source/images/q2.png","hash":"ab246fa62b3c3fdf023fb533f7427705e8d2d505","modified":1675197650865},{"_id":"source/images/q3.png","hash":"84b813171691c1aee44f99587f2f2ab396b1b072","modified":1675197776330},{"_id":"public/images/q2.png","hash":"ab246fa62b3c3fdf023fb533f7427705e8d2d505","modified":1675197797207},{"_id":"public/images/q3.png","hash":"84b813171691c1aee44f99587f2f2ab396b1b072","modified":1675197797207},{"_id":"source/_posts/【方法论】前端发展历程梳理（未完成）.md","hash":"7f44e5231a48d77b357324f55e480c8a88dc193c","modified":1675881682740},{"_id":"source/_posts/pos.md","hash":"9c4e20d76311bfe671b88684eaf40b4834c0bece","modified":1675881579059},{"_id":"public/2023/02/09/pos/index.html","hash":"1e7021d5571771a1390eca7c94434f2779bfe2f4","modified":1675881694032},{"_id":"public/2022/03/09/【方法论】前端发展历程梳理（未完成）/index.html","hash":"9d5ac2efaf26ab8a2c4ef47204b0c7a56110be0e","modified":1676315004874},{"_id":"public/archives/2022/index.html","hash":"a6e845ad75e66f5506b7bbdb0d9aa55d87e639a9","modified":1676315004874},{"_id":"public/archives/2022/03/index.html","hash":"aa3822341396a193132eb369961c76a786a69e36","modified":1676315004874},{"_id":"source/_posts/【Vue3源码学习】01.md","hash":"2fef696591721d05790fe8bffe5f6eecee27231a","modified":1675966129359},{"_id":"public/2022/06/03/【Vue3源码学习】01/index.html","hash":"9a5297834738687f2efb9efc18f12dcbcd92516f","modified":1675966135662},{"_id":"public/archives/2022/06/index.html","hash":"488756f1b414d8f726fbb6ac0662c3c3c0c47034","modified":1676315004874},{"_id":"public/categories/源码/index.html","hash":"13a493e894e314e1a8a5612352d73fe9eb383dee","modified":1676315004874},{"_id":"public/tags/vue/index.html","hash":"864764cfcb4b9edcc1c1e28dde44d9d845b4d5ef","modified":1676315004874},{"_id":"source/_posts/images/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1675959357872},{"_id":"source/_posts/images/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1675963115124},{"_id":"source/_posts/images/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1675959892671},{"_id":"source/_posts/images/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1675963407640},{"_id":"source/_posts/images/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1675963966858},{"_id":"source/_posts/images/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1675964442401},{"_id":"source/_posts/images/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1675964111203},{"_id":"source/_posts/【Vue3源码学习】01，从createApp-开始/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1675959357872},{"_id":"source/_posts/【Vue3源码学习】01，从createApp-开始/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1675959892671},{"_id":"source/_posts/【Vue3源码学习】01，从createApp-开始/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1675963115124},{"_id":"source/_posts/【Vue3源码学习】01，从createApp-开始/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1675963407640},{"_id":"source/_posts/【Vue3源码学习】01，从createApp-开始/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1675963966858},{"_id":"source/_posts/【Vue3源码学习】01，从createApp-开始/【Vue3源码学习】01，从createApp-开始.md","hash":"f0864063fcf9e9cca8b5d458bf5660a785c34cbe","modified":1675966560376},{"_id":"source/_posts/【Vue3源码学习】01，从createApp-开始/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1675964442401},{"_id":"source/_posts/【Vue3源码学习】01，从createApp-开始/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1675964111203},{"_id":"public/2022/06/03/【Vue3源码学习】01，从createApp-开始/【Vue3源码学习】01，从createApp-开始/index.html","hash":"4aaa069c2ed5a28500d0fb256b0d43516df59ec0","modified":1675966565063},{"_id":"source/_posts/p1/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1675959357872},{"_id":"source/_posts/p1/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1675959892671},{"_id":"source/_posts/p1/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1675963115124},{"_id":"source/_posts/p1/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1675963407640},{"_id":"source/_posts/p1/【Vue3源码学习】01，从createApp-开始.md","hash":"f0864063fcf9e9cca8b5d458bf5660a785c34cbe","modified":1675966630739},{"_id":"source/_posts/p1/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1675963966858},{"_id":"source/_posts/p1/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1675964442401},{"_id":"source/_posts/p1/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1675964111203},{"_id":"source/_posts/p1/p1.md","hash":"f0864063fcf9e9cca8b5d458bf5660a785c34cbe","modified":1675966816472},{"_id":"public/2022/06/03/p1/p1/index.html","hash":"19de1f75b2b0bab84db232a43dedaafb1ba4d0ca","modified":1675967749328},{"_id":"source/_posts/test/test.md","hash":"73f2682a6c8fb07149558155173ee2cb21a11cf7","modified":1675967588502},{"_id":"source/_posts/test.md","hash":"dbb0a47979dac75626badb7f76ec067fbddb1119","modified":1675968083083},{"_id":"source/_posts/test/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1675964442401},{"_id":"public/2023/02/10/test/test/index.html","hash":"ce9dc65e990dab3a0ca43dd81d8cc23721380106","modified":1675967610147},{"_id":"public/2023/02/10/test/index.html","hash":"357a76213941cbb69b4252a3f42b5aedb3f42507","modified":1675967749328},{"_id":"public/2023/02/10/test/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1675967610147},{"_id":"public/2023/02/10/test/test.html","hash":"fd8d7f9e6d9cd8952be8a3388f102947d48aaa52","modified":1675967610147},{"_id":"source/_posts/【Vue3 源码学习】01，从 createApp() 方法开始.md","hash":"dbb0a47979dac75626badb7f76ec067fbddb1119","modified":1675968083083},{"_id":"source/_posts/vue-source-code-01/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1675959357872},{"_id":"source/_posts/vue-source-code-01/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1675959892671},{"_id":"source/_posts/vue-source-code-01/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1675963115124},{"_id":"source/_posts/vue-source-code-01/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1675963407640},{"_id":"source/_posts/vue-source-code-01/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1675963966858},{"_id":"source/_posts/vue-source-code-01/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1675964442401},{"_id":"source/_posts/vue-source-code-01/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1675964111203},{"_id":"public/2022/06/03/【Vue3 源码学习】01，从 createApp() 方法开始/index.html","hash":"cd8f71c1a685645c4a971debb3b56ea731e37ec1","modified":1675968090476},{"_id":"source/_posts/test/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1675959357872},{"_id":"source/_posts/test/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1675959892671},{"_id":"source/_posts/test/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1675963115124},{"_id":"source/_posts/test/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1675963407640},{"_id":"source/_posts/test/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1675963966858},{"_id":"source/_posts/test/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1675964111203},{"_id":"public/2022/06/03/test/index.html","hash":"829d90c59dee3a42f13bf61930dcb28e86924ce0","modified":1675968151072},{"_id":"public/2022/06/03/test/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1675968151072},{"_id":"public/2022/06/03/test/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1675968151072},{"_id":"public/2022/06/03/test/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1675968151072},{"_id":"public/2022/06/03/test/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1675968151072},{"_id":"public/2022/06/03/test/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1675968151072},{"_id":"public/2022/06/03/test/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1675968151072},{"_id":"public/2022/06/03/test/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1675968151072},{"_id":"source/_posts/vueSourceCodeStudy01/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1675959357872},{"_id":"source/_posts/vueSourceCodeStudy01/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1675959892671},{"_id":"source/_posts/vueSourceCodeStudy01/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1675963115124},{"_id":"source/_posts/vueSourceCodeStudy01/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1675963407640},{"_id":"source/_posts/vueSourceCodeStudy01/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1675963966858},{"_id":"source/_posts/vueSourceCodeStudy01/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1675964442401},{"_id":"source/_posts/vueSourceCodeStudy01/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1675964111203},{"_id":"source/_posts/images/q1.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675195725315},{"_id":"source/_posts/images/q2.png","hash":"ab246fa62b3c3fdf023fb533f7427705e8d2d505","modified":1675197650865},{"_id":"source/_posts/images/q3.png","hash":"84b813171691c1aee44f99587f2f2ab396b1b072","modified":1675197776330},{"_id":"source/_posts/someIntresting/q2.png","hash":"ab246fa62b3c3fdf023fb533f7427705e8d2d505","modified":1675197650865},{"_id":"source/_posts/someIntresting/q1.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675195725315},{"_id":"source/_posts/someIntresting/q3.png","hash":"84b813171691c1aee44f99587f2f2ab396b1b072","modified":1675197776330},{"_id":"source/_posts/someInterestingQuestions01/q1.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675195725315},{"_id":"source/_posts/someInterestingQuestions01/q2.png","hash":"ab246fa62b3c3fdf023fb533f7427705e8d2d505","modified":1675197650865},{"_id":"source/_posts/someInterestingQuestions01/q3.png","hash":"84b813171691c1aee44f99587f2f2ab396b1b072","modified":1675197776330},{"_id":"source/_posts/someInterestingQuestions02.md","hash":"a777eb4b5ced8c20e9b5efb59ea1a744a30acf5b","modified":1675968415344},{"_id":"source/_posts/someInterestingQuestions01.md","hash":"41348fe5af692170aa2e006fb1d3c04a3cac7ecf","modified":1675968405816},{"_id":"source/_posts/vueSourceCodeStudy01.md","hash":"60e847ae6203e46fd527aca2d927c1e69c748384","modified":1675968220042},{"_id":"public/2022/06/03/vueSourceCodeStudy01/index.html","hash":"a2633e52b6cc377d0788dba49f7920bfae04a1c1","modified":1676315004874},{"_id":"public/2021/02/25/someInterestingQuestions01/index.html","hash":"4aa8f8c261cadb3c31b0f9c0d09434a78aeea531","modified":1676315004874},{"_id":"public/2021/02/23/someInterestingQuestions02/index.html","hash":"3a0277bfba10aa460db5b079a5f72ec3f0d1d612","modified":1676315004874},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1675968357136},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1675968357136},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1675968357136},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1675968357136},{"_id":"public/2021/02/25/someInterestingQuestions01/q1.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1675968357136},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1675968357136},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1675968357136},{"_id":"public/2021/02/25/someInterestingQuestions01/q2.png","hash":"ab246fa62b3c3fdf023fb533f7427705e8d2d505","modified":1675968357136},{"_id":"public/2021/02/25/someInterestingQuestions01/q3.png","hash":"84b813171691c1aee44f99587f2f2ab396b1b072","modified":1675968357136},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1675968357136},{"_id":"source/_posts/vueSourceCodeStudy02.md","hash":"46096de58ec112ee257facbbedd7b32544854000","modified":1676314459464},{"_id":"source/_posts/vueSourceCodeStudy02/s2-1.png","hash":"bb5f44da3cf6b932e2ac62fab6d46d106d6ed640","modified":1676051552971},{"_id":"source/_posts/vueSourceCodeStudy02/s2-11.png","hash":"ea21eca2b7ad3cdba997cf6c1794476b4499ba78","modified":1676058874967},{"_id":"source/_posts/vueSourceCodeStudy02/s2-3.png","hash":"b15ed7c05f54345ed7f60e9c601445a8cf84f64d","modified":1676052657657},{"_id":"source/_posts/vueSourceCodeStudy02/s2-6.png","hash":"1146414d813743c20228f0c2517be2a412f896eb","modified":1676055686255},{"_id":"source/_posts/vueSourceCodeStudy02/s2-5.png","hash":"077b04a0d1bd5f4f9bb384db7ad4924685182348","modified":1676054742802},{"_id":"source/_posts/vueSourceCodeStudy02/s2-4.png","hash":"8a88ec1634043270e224c53bcd105514a0ed14df","modified":1676052820095},{"_id":"source/_posts/vueSourceCodeStudy02/s2-7.png","hash":"d5276f1c2a20f569dcd3f63e1b6360ab0fd8236c","modified":1676056061638},{"_id":"source/_posts/vueSourceCodeStudy02/s2-10.png","hash":"ba6e970962ef439ade2d69a57c23f460702738ac","modified":1676058550964},{"_id":"source/_posts/vueSourceCodeStudy02/s2-12.png","hash":"572a236f947710c79575e3e3cdd5617d32df3bfa","modified":1676060956209},{"_id":"source/_posts/vueSourceCodeStudy02/s2-2.png","hash":"7edb359a25e8e41d6fa1cad82cd775037139d9c3","modified":1676051990660},{"_id":"source/_posts/vueSourceCodeStudy02/s2-9.png","hash":"406ba4a71c8c0762c2d53ce34df7019d90427845","modified":1676057585599},{"_id":"source/_posts/vueSourceCodeStudy02/s2-8.png","hash":"4df0982ea7d09c073e403850eb074166eafa127c","modified":1676057645394},{"_id":"source/_posts/vueSourceCodeStudy02/s0.png","hash":"e362937b7163f1d04576aeb0e11d8012b4a26e4b","modified":1676050676756},{"_id":"public/2022/06/03/vueSourceCodeStudy02/index.html","hash":"e18071f8c7c93bc56449924d7143eb212f549dc7","modified":1676315004874},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-11.png","hash":"ea21eca2b7ad3cdba997cf6c1794476b4499ba78","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-1.png","hash":"bb5f44da3cf6b932e2ac62fab6d46d106d6ed640","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-3.png","hash":"b15ed7c05f54345ed7f60e9c601445a8cf84f64d","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-5.png","hash":"077b04a0d1bd5f4f9bb384db7ad4924685182348","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-6.png","hash":"1146414d813743c20228f0c2517be2a412f896eb","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-4.png","hash":"8a88ec1634043270e224c53bcd105514a0ed14df","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-7.png","hash":"d5276f1c2a20f569dcd3f63e1b6360ab0fd8236c","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-10.png","hash":"ba6e970962ef439ade2d69a57c23f460702738ac","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-12.png","hash":"572a236f947710c79575e3e3cdd5617d32df3bfa","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-2.png","hash":"7edb359a25e8e41d6fa1cad82cd775037139d9c3","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-9.png","hash":"406ba4a71c8c0762c2d53ce34df7019d90427845","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s0.png","hash":"e362937b7163f1d04576aeb0e11d8012b4a26e4b","modified":1676288242364},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-8.png","hash":"4df0982ea7d09c073e403850eb074166eafa127c","modified":1676288242364},{"_id":"source/_posts/vueSourceCodeStudy02/s2-14.png","hash":"56f15fbb8bd9d33872a72040afb3c06594e72bf4","modified":1676312806589},{"_id":"source/_posts/vueSourceCodeStudy02/s2-13.png","hash":"c909a1adf9e4363473e8b311635c48436b866e8b","modified":1676312015844},{"_id":"source/_posts/vueSourceCodeStudy02/s2-15.png","hash":"c03cc2fa65bb8bed84a677e1ddfb24a53d927b46","modified":1676313302204},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-14.png","hash":"56f15fbb8bd9d33872a72040afb3c06594e72bf4","modified":1676313371423},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-13.png","hash":"c909a1adf9e4363473e8b311635c48436b866e8b","modified":1676313371423},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-15.png","hash":"c03cc2fa65bb8bed84a677e1ddfb24a53d927b46","modified":1676313371423},{"_id":"node_modules/hexo-theme-redefine/scripts/events/404.js","hash":"169245d7b2af1ff401cf76e718c28b4e38f637c7","modified":1676313645790},{"_id":"node_modules/hexo-theme-redefine/layout/404.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1676313645748},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/articleRecommend.js","hash":"946472e11b68be97a82d56509a2ac90f5beb1352","modified":1676313645795},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/generate_seo.js","hash":"e0059a60cc5978be6792dcf795a2ece3a509f41a","modified":1676313645806},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/autoCanonical.js","hash":"f3ea74759129c71041371a1d77c687eb6aa88d3a","modified":1676313645796},{"_id":"node_modules/hexo-theme-redefine/source/assets/fonts.css","hash":"9810e18dbd05380512e251dfa03e985fe7779e17","modified":1676313645735},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btn.js","hash":"3e4c1b01a1f922f712895e9ac06c030231b35cf2","modified":1676313645798},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btns.js","hash":"a91492e772287114527a3fbc85f0c7c1c1b15eb3","modified":1676313645799},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":1676313645737},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/folding.js","hash":"3426502d9c6808796466a5b5837abb057ed5bceb","modified":1676313645805},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note-large.js","hash":"88a53682ebb71ff2ce1d08205f5eb22b837acd44","modified":1676313646906},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/tabs.js","hash":"7ad85a4de6918a9b646cc083704d4fd8a387b98d","modified":1676313646911},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note.js","hash":"7c529ffe108a04a03ae6667074f69c5e62be8c54","modified":1676313646906},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","hash":"956a0381099e0204c870fc447b8522b2f4b063b8","modified":1676313644873},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","hash":"8b6a0f2a240efd3175e6aef9928b92c62ffd43d8","modified":1676313645738},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","hash":"1e252b2b3e8486d3d6e4a6fa36157aaad73d9bee","modified":1676313645736},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","hash":"9dfe544d3afe0a3dfbe61bbb3bbb6ac94995d90c","modified":1676313645738},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","hash":"28ba38557852bff7d4f81a589958ceead70b3b2d","modified":1676313645740},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","hash":"65038cffbfb1e0f087d44abf9758ad16a08caf82","modified":1676313645741},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/components/404-template.ejs","hash":"7729caa836a1c2208860cada53d674e9e9ff61f3","modified":1676313645746},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","hash":"57df6abf04b71d0946fa20e66e946d3a2fa66667","modified":1676313645742},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/404.styl","hash":"2195e6e3fb7cfb3d63f053bc4d3d40e64a442053","modified":1676313650031},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","hash":"3f1f1977ce39f47e963194ae11a1f3dbbe4d951e","modified":1676313645743},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","hash":"01d151fc85f6c5744132112eb81f072cbb688d44","modified":1676313646912},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","hash":"758a98c7bacc6d72bc3f53ecad34424096729699","modified":1676313645744},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/folding.styl","hash":"c82c4f3d65af27150c2fa51426c265945d9fceca","modified":1676313650053},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/tabs.styl","hash":"703c4c1794a6c646613075c5d306d818b30f4df5","modified":1676313650075},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/buttons.styl","hash":"fb6cd0b84107f81d5c6cd0098c8e3a0d58e81c31","modified":1676313650043},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/notes.styl","hash":"2a05e7254943073af6556e1a44bef392e3a368fd","modified":1676313650065},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","hash":"4caeaf71d849d565eb73d6cfa2a885b8fd5a1585","modified":1676313645732},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","hash":"2a4c024238017920b3fd07ec8ace147fa813131d","modified":1676313645074},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","hash":"1aca70954817e603412964fdbfb231f03137af7c","modified":1676313644870},{"_id":"public/404.html","hash":"24b43f6622fa28d958424dc31b3fcfe3c2b9b1a5","modified":1676315004874},{"_id":"public/assets/fonts.css","hash":"9810e18dbd05380512e251dfa03e985fe7779e17","modified":1676313759600},{"_id":"public/assets/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":1676313759600},{"_id":"public/fontawesome/solid.min.css","hash":"9dfe544d3afe0a3dfbe61bbb3bbb6ac94995d90c","modified":1676313759600},{"_id":"public/fontawesome/regular.min.css","hash":"8b6a0f2a240efd3175e6aef9928b92c62ffd43d8","modified":1676313759600},{"_id":"public/fontawesome/light.min.css","hash":"1e252b2b3e8486d3d6e4a6fa36157aaad73d9bee","modified":1676313759600},{"_id":"public/fontawesome/v4-font-face.min.css","hash":"57df6abf04b71d0946fa20e66e946d3a2fa66667","modified":1676313759600},{"_id":"public/fontawesome/v5-font-face.min.css","hash":"758a98c7bacc6d72bc3f53ecad34424096729699","modified":1676313759600},{"_id":"public/fontawesome/thin.min.css","hash":"65038cffbfb1e0f087d44abf9758ad16a08caf82","modified":1676313759600},{"_id":"public/js/plugins/tabs.js","hash":"01d151fc85f6c5744132112eb81f072cbb688d44","modified":1676313759600},{"_id":"public/fontawesome/brands.min.css","hash":"956a0381099e0204c870fc447b8522b2f4b063b8","modified":1676313759600},{"_id":"public/fontawesome/svg-with-js.min.css","hash":"28ba38557852bff7d4f81a589958ceead70b3b2d","modified":1676313759600},{"_id":"public/fontawesome/fontawesome.min.css","hash":"4caeaf71d849d565eb73d6cfa2a885b8fd5a1585","modified":1676313759600},{"_id":"public/fontawesome/v4-shims.min.css","hash":"3f1f1977ce39f47e963194ae11a1f3dbbe4d951e","modified":1676313759600},{"_id":"public/fontawesome/duotone.min.css","hash":"2a4c024238017920b3fd07ec8ace147fa813131d","modified":1676313759600},{"_id":"public/fontawesome/all.min.css","hash":"1aca70954817e603412964fdbfb231f03137af7c","modified":1676313759600}],"Category":[{"name":"JS","_id":"cldki4ixd0000goh86evcgyiu"},{"name":"方法论","_id":"cldkkxqsy00038ch805rxbmc6"},{"name":"一些有趣的问题","_id":"cldkms5rp000420h88fixc09g"},{"name":"JS运行机制","_id":"cldkn9elo000578h8glcnccri"},{"name":"源码","_id":"cldxet1r60001agh8f9bf3gob"}],"Data":[],"Page":[{"title":"tags","date":"2023-01-31T18:28:27.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-02-01 02:28:27\n---\n","updated":"2023-01-31T18:28:27.535Z","path":"tags/index.html","_id":"cldkkp6vw00008ch85j1bhkw6","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2023-01-31T19:23:07.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-02-01 03:23:07\n---\n","updated":"2023-01-31T19:23:07.768Z","path":"categories/index.html","_id":"cldkmnhxh000220h868vwdmup","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"代码重构的一点心得","date":"2023-01-31T18:30:57.000Z","_content":"# 重构（Refactoring）\n\n## 前言\n\n最近一直在做前端重构的工作，多少有些感想，特此记录。\n\n首先，项目的历史太悠久了，AngularJS的项目，\n\n\n\n## 一、什么是重构？为什么要重构？重构要达成什么目标？\n\n**什么是重构**\n\n在`不改变代码外在行为`的前提下，对代码进行修改，以`改进程序的内部结构`。\n\n**为什么要重构**\n\n在软件工程中，开发迭代的过程实际上是一个熵增的过程，软件系统会随着生命周期的进行变得越来越臃肿、混乱、冗余，从而增加维护与进一步迭代的成本。而重构可以`偿还技术债务、改进软件结构、减小维护和迭代的成本、增加产品可信`。\n\n\n**重构要达成什么目标？**\n\n1. 系统结构重新梳理：旧系统在设计上可能有许多疏漏，由于经验的欠缺或者考虑不周到，这是难以避免的。新系统应该见贤思齐、查漏补缺，例如重新设计基类、文件结构和继承关系，争取让系统更加完善。\n2. 公共资源重新梳理：\n3. 业务需求重新梳理：\n\n## 二、重构有哪些分类？什么时候重构？重构有哪些原则？\n**重构有哪些分类？**\n\n- 小粒度重构（函数级、小模块）\n- 大粒度重构（架构级、大模块）\n\n**什么时候重构？**\n\n- 新增需求时（小粒度）\n- 修改BUG时（小粒度）\n- 复审代码时（大粒度）\n- 代码逻辑混乱、依赖混杂（大粒度）\n\n**重构有哪些原则？**\n\n- 先评审，再重构，不要反复推翻重来\n- 确保模块的功能完整，否则不重构该模块\n- 新增需求时，不要改动既有代码（小粒度）\n- 重构既有代码时，不要新增功能（小粒度）\n\n## 三、重构工作流程\n1. 前期准备，搭架子\n   - 构建对应技术栈的文件结构、代码关系\n   - 整理公共资源、公共能力\n   - 整理业务需求，确保没有遗漏的需求\n2. 前期准备，分需求、培训（主要涉及文件结构和公共资源）\n3. 开始重构 \n \n","source":"_posts/【方法论】代码重构的一点心得.md","raw":"---\ntitle: 代码重构的一点心得\ndate: 2023-02-01 02:30:57\ntags: [JS]\ncategories: [方法论]\n---\n# 重构（Refactoring）\n\n## 前言\n\n最近一直在做前端重构的工作，多少有些感想，特此记录。\n\n首先，项目的历史太悠久了，AngularJS的项目，\n\n\n\n## 一、什么是重构？为什么要重构？重构要达成什么目标？\n\n**什么是重构**\n\n在`不改变代码外在行为`的前提下，对代码进行修改，以`改进程序的内部结构`。\n\n**为什么要重构**\n\n在软件工程中，开发迭代的过程实际上是一个熵增的过程，软件系统会随着生命周期的进行变得越来越臃肿、混乱、冗余，从而增加维护与进一步迭代的成本。而重构可以`偿还技术债务、改进软件结构、减小维护和迭代的成本、增加产品可信`。\n\n\n**重构要达成什么目标？**\n\n1. 系统结构重新梳理：旧系统在设计上可能有许多疏漏，由于经验的欠缺或者考虑不周到，这是难以避免的。新系统应该见贤思齐、查漏补缺，例如重新设计基类、文件结构和继承关系，争取让系统更加完善。\n2. 公共资源重新梳理：\n3. 业务需求重新梳理：\n\n## 二、重构有哪些分类？什么时候重构？重构有哪些原则？\n**重构有哪些分类？**\n\n- 小粒度重构（函数级、小模块）\n- 大粒度重构（架构级、大模块）\n\n**什么时候重构？**\n\n- 新增需求时（小粒度）\n- 修改BUG时（小粒度）\n- 复审代码时（大粒度）\n- 代码逻辑混乱、依赖混杂（大粒度）\n\n**重构有哪些原则？**\n\n- 先评审，再重构，不要反复推翻重来\n- 确保模块的功能完整，否则不重构该模块\n- 新增需求时，不要改动既有代码（小粒度）\n- 重构既有代码时，不要新增功能（小粒度）\n\n## 三、重构工作流程\n1. 前期准备，搭架子\n   - 构建对应技术栈的文件结构、代码关系\n   - 整理公共资源、公共能力\n   - 整理业务需求，确保没有遗漏的需求\n2. 前期准备，分需求、培训（主要涉及文件结构和公共资源）\n3. 开始重构 \n \n","slug":"【方法论】代码重构的一点心得","published":1,"updated":"2023-01-31T20:15:34.042Z","_id":"cldkn7zhu000078h82d4kbohk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"重构（Refactoring）\"><a href=\"#重构（Refactoring）\" class=\"headerlink\" title=\"重构（Refactoring）\"></a>重构（Refactoring）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近一直在做前端重构的工作，多少有些感想，特此记录。</p>\n<p>首先，项目的历史太悠久了，AngularJS的项目，</p>\n<h2 id=\"一、什么是重构？为什么要重构？重构要达成什么目标？\"><a href=\"#一、什么是重构？为什么要重构？重构要达成什么目标？\" class=\"headerlink\" title=\"一、什么是重构？为什么要重构？重构要达成什么目标？\"></a>一、什么是重构？为什么要重构？重构要达成什么目标？</h2><p><strong>什么是重构</strong></p>\n<p>在<code>不改变代码外在行为</code>的前提下，对代码进行修改，以<code>改进程序的内部结构</code>。</p>\n<p><strong>为什么要重构</strong></p>\n<p>在软件工程中，开发迭代的过程实际上是一个熵增的过程，软件系统会随着生命周期的进行变得越来越臃肿、混乱、冗余，从而增加维护与进一步迭代的成本。而重构可以<code>偿还技术债务、改进软件结构、减小维护和迭代的成本、增加产品可信</code>。</p>\n<p><strong>重构要达成什么目标？</strong></p>\n<ol>\n<li>系统结构重新梳理：旧系统在设计上可能有许多疏漏，由于经验的欠缺或者考虑不周到，这是难以避免的。新系统应该见贤思齐、查漏补缺，例如重新设计基类、文件结构和继承关系，争取让系统更加完善。</li>\n<li>公共资源重新梳理：</li>\n<li>业务需求重新梳理：</li>\n</ol>\n<h2 id=\"二、重构有哪些分类？什么时候重构？重构有哪些原则？\"><a href=\"#二、重构有哪些分类？什么时候重构？重构有哪些原则？\" class=\"headerlink\" title=\"二、重构有哪些分类？什么时候重构？重构有哪些原则？\"></a>二、重构有哪些分类？什么时候重构？重构有哪些原则？</h2><p><strong>重构有哪些分类？</strong></p>\n<ul>\n<li>小粒度重构（函数级、小模块）</li>\n<li>大粒度重构（架构级、大模块）</li>\n</ul>\n<p><strong>什么时候重构？</strong></p>\n<ul>\n<li>新增需求时（小粒度）</li>\n<li>修改BUG时（小粒度）</li>\n<li>复审代码时（大粒度）</li>\n<li>代码逻辑混乱、依赖混杂（大粒度）</li>\n</ul>\n<p><strong>重构有哪些原则？</strong></p>\n<ul>\n<li>先评审，再重构，不要反复推翻重来</li>\n<li>确保模块的功能完整，否则不重构该模块</li>\n<li>新增需求时，不要改动既有代码（小粒度）</li>\n<li>重构既有代码时，不要新增功能（小粒度）</li>\n</ul>\n<h2 id=\"三、重构工作流程\"><a href=\"#三、重构工作流程\" class=\"headerlink\" title=\"三、重构工作流程\"></a>三、重构工作流程</h2><ol>\n<li>前期准备，搭架子<ul>\n<li>构建对应技术栈的文件结构、代码关系</li>\n<li>整理公共资源、公共能力</li>\n<li>整理业务需求，确保没有遗漏的需求</li>\n</ul>\n</li>\n<li>前期准备，分需求、培训（主要涉及文件结构和公共资源）</li>\n<li>开始重构 </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"重构（Refactoring）\"><a href=\"#重构（Refactoring）\" class=\"headerlink\" title=\"重构（Refactoring）\"></a>重构（Refactoring）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近一直在做前端重构的工作，多少有些感想，特此记录。</p>\n<p>首先，项目的历史太悠久了，AngularJS的项目，</p>\n<h2 id=\"一、什么是重构？为什么要重构？重构要达成什么目标？\"><a href=\"#一、什么是重构？为什么要重构？重构要达成什么目标？\" class=\"headerlink\" title=\"一、什么是重构？为什么要重构？重构要达成什么目标？\"></a>一、什么是重构？为什么要重构？重构要达成什么目标？</h2><p><strong>什么是重构</strong></p>\n<p>在<code>不改变代码外在行为</code>的前提下，对代码进行修改，以<code>改进程序的内部结构</code>。</p>\n<p><strong>为什么要重构</strong></p>\n<p>在软件工程中，开发迭代的过程实际上是一个熵增的过程，软件系统会随着生命周期的进行变得越来越臃肿、混乱、冗余，从而增加维护与进一步迭代的成本。而重构可以<code>偿还技术债务、改进软件结构、减小维护和迭代的成本、增加产品可信</code>。</p>\n<p><strong>重构要达成什么目标？</strong></p>\n<ol>\n<li>系统结构重新梳理：旧系统在设计上可能有许多疏漏，由于经验的欠缺或者考虑不周到，这是难以避免的。新系统应该见贤思齐、查漏补缺，例如重新设计基类、文件结构和继承关系，争取让系统更加完善。</li>\n<li>公共资源重新梳理：</li>\n<li>业务需求重新梳理：</li>\n</ol>\n<h2 id=\"二、重构有哪些分类？什么时候重构？重构有哪些原则？\"><a href=\"#二、重构有哪些分类？什么时候重构？重构有哪些原则？\" class=\"headerlink\" title=\"二、重构有哪些分类？什么时候重构？重构有哪些原则？\"></a>二、重构有哪些分类？什么时候重构？重构有哪些原则？</h2><p><strong>重构有哪些分类？</strong></p>\n<ul>\n<li>小粒度重构（函数级、小模块）</li>\n<li>大粒度重构（架构级、大模块）</li>\n</ul>\n<p><strong>什么时候重构？</strong></p>\n<ul>\n<li>新增需求时（小粒度）</li>\n<li>修改BUG时（小粒度）</li>\n<li>复审代码时（大粒度）</li>\n<li>代码逻辑混乱、依赖混杂（大粒度）</li>\n</ul>\n<p><strong>重构有哪些原则？</strong></p>\n<ul>\n<li>先评审，再重构，不要反复推翻重来</li>\n<li>确保模块的功能完整，否则不重构该模块</li>\n<li>新增需求时，不要改动既有代码（小粒度）</li>\n<li>重构既有代码时，不要新增功能（小粒度）</li>\n</ul>\n<h2 id=\"三、重构工作流程\"><a href=\"#三、重构工作流程\" class=\"headerlink\" title=\"三、重构工作流程\"></a>三、重构工作流程</h2><ol>\n<li>前期准备，搭架子<ul>\n<li>构建对应技术栈的文件结构、代码关系</li>\n<li>整理公共资源、公共能力</li>\n<li>整理业务需求，确保没有遗漏的需求</li>\n</ul>\n</li>\n<li>前期准备，分需求、培训（主要涉及文件结构和公共资源）</li>\n<li>开始重构 </li>\n</ol>\n"},{"title":"【JS运行机制】JS执行流程","date":"2023-01-31T16:56:48.000Z","_content":"\n## `前言`\n\n&emsp;&emsp;\n本文主要解释JS引擎在遇见script代码块时，从编译到执行具体经历了什么？为什么会产生变量提升？闭包的产生原理是什么?多个script代码块间是以什么顺序来执行的？为什么定义在不同代码块间的方法可以共通？通过本文都可以得到解答。\n\n## `基础概念`\n- JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。\n  `解释型`：JS引擎在运行JS代码时，是利用解释器一边编译一边执行的。\n  \n  如此便避免不了一种情况：某些代码多次重复的运行，例如 for循环，在编译型语言中，for循环块中的代码将以机器码执行多次；而在解释型语言中，for循环块中的代码将被解释多次并执行，如此便有了很大的耗损。\n  \n  `即时编译型`：于是JS引擎就加入了`JIT`（Just-in-time）进行编译优化，例如对重复语句和类型判断进行优化。\n\n- 引擎、编译器与作用域\n    引擎：从头到尾负责整个javascript程序的编译及执行过程。浏览器不同，其引擎也不同，比如Chrome采用的是v8，Safari采用的是SquirrelFish Extreme。\n    \n    编译器：编译过程主要分为”词法分析”、“语法分析”及“代码生成“。\n    >\n    作用域（Scope）：根据名称查找变量的一套规则，用于管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。\n\n- 执行上下文（Excution Context EC）&& 执行上下文栈（Excution Context Stack ECS）\n    存在三种 EC：全局执行上下文  GlobalEC ，函数执行上下文  Function EC，Eval。\n    \n    ECS：引擎记录EC的容器，栈底是 GlobalEC ，只有在关闭页面时出栈；栈顶是当前正在执行的 EC ，函数执行完毕后出栈，并将执行权交给下一个 EC 。\n\n- 变量对象（Variable Object）&& 活动对象（Activation Object）\n    VO：EC中用来存储变量声明（必须是 var 关键字声明而不是 let 与 const）与函数声明（必须是显式声明而不是表达式）的容器。由引擎实现，不能访问到。\n    \n    AO：可以理解为VO的实例化，函数调用时在EC中被激活，成员属性能被访问。\n\n- LHS（Left Hand Side） && RHS（Right Hand Side）\n    LHS：赋值操作的目标。例如：a=2; 是对 a 进行 LHS查询。\n    \n    RHS：赋值操作的源头。例如：console.log(a); 是对 a 进行 RHS查询。\n    >\n    非严格模式下，LHS查询不到变量会在顶层作用域创建具有该名称的变量，RHS查询不到变量会报ReferenceError的异常；严格模式下禁止自动创建全局变量，两种查询方式失败均报ReferenceError的异常。\n\n\n## `JS代码执行流程`\n&emsp;&emsp;\n1. -->进入script标签，【预编译】JS引擎创建全局EC，全局EC入栈\n2. -->【编译】JS解释器开始对代码逐行进行分词、语法分析、代码生成\n3. -->有错则抛出，终止执行；无错继续向下逐行执行\n4. -->【预编译】调用函数前，创建函数EC，EC入栈\n5. -->【编译】\n6. -->有错则抛出，终止执行；无错继续向下执行\n7. -->函数执行完毕，EC出栈\n8. -->继续以上步骤\n9. -->页面销毁，全局EC出栈，结束\n\n\n`创建当前环境EC流程如下：`\n\n1、初始化作用域[[Scope]]，（拷贝传入的父执行上下文的Scope），数据结构应该是数组或者链表。\n \n例如：[[Scope]] : AO1（当前）-->VO（全局）\n\n2、创建活动对象，创建完成之后，将活动对象推入作用域链的最前端：\n\n例如：[[Scope]] : AO2（当前）-->AO1（父级）-->VO（全局）\n\n2.1、创建arguments对象，检查上下文，初始化参数名称和值并创建引用的复制。（函数中存在）\n\n2.2、创建形参，通过实参赋值。（函数中存在）\n\n2.3、扫描上下文的函数声明（而非函数表达式）：\n\n为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。函数声明比变量优先级要高，并且定义过程不会被变量覆盖，除非是赋值\n\n2.4、扫描上下文的变量声明：\n\n为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为undefined，如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。\n\n3、求出上下文内部this的值。\n\n## `代码分析`\n\n1、EC创建流程与变量提升\n```javascript\nvar a = \"outer\";\n\nfunction foo(i) {\n    console.log(a);\n    console.log(b);\n    console.log(c);\n    var a = 'hello';\n    var b = function () {};\n\n    function c() {};\n    console.log(`------------`);\n    console.log(a);\n    console.log(b);\n    console.log(c);\n}\n\nfoo(22);// 对形参i的LHS查询\n\n//结果：\nundefined\nundefined\nƒ c() {}\n------------\nhello\nƒ() {}\nƒ c() {}\n\n// 分析\n// 代码载入前，创建全局EC的伪代码\nGlobalEC : {\n    [[Scope]] : [{VO}],\n    VO : {\n        foo : fnFoo,// 函数声明优先，指向函数Foo的引用\n        a :  undefined// 变量声明\n    },\n    this\n}\n// 调用函数foo(22)时，创建当前EC的伪代码\nCurrentEC : {\n    [[Scope]] : [{AO}, {VO}],\n    AO : {\n        // 顺序：arguments对象 形参 函数声明 变量声明\n        arguments : {\n            0 : 22,\n            length : 1\n        },\n        i : 22,// 形参，接受实参赋值\n        c : fnC,//指向函数c的引用\n        a : undefined,\n        b : undefined\n    },\n    this\n}\n```\n\n2、多个script块间的执行过程\n```html\n\n <script>\n     console.log('script1 start');\n\n     console.log('a',a);\n     var b=2;\n\n     console.log('script1 end');\n </script>\n\n <script>\n     console.log('script2 start');\n\n     var a=1;\n     console.log('b',b);\n\n     console.log('script2 end');\n </script>\n\n <!-- \n     script1 start\n     Uncaught ReferenceError: a is not defined\n     script2 start\n     b undefined\n     script2 end\n  -->\n\n<!--\n 1、从代码运行结果可以看出，JS执行流在进入第一个 script 块时，首先会创建全局 EC ，将 b 的声明加入 AO 并推入作用域中（所以第二个 script 块中的代码才能访问到 b），全局EC压入 ECS。\n 2、逐行的进行分词、语法检查、代码生成，然后执行。\n     2.1、在 console.log('script1 start'); 这行代码中，不存在语法错误，执行，输出 start。\n     2.2、在 console.log('a',a); 这行代码中，对变量 a 进行 RHS 查询，在作用域链中找不到 a ，报 ReferenceError，script 块中断执行。\n 3、JS执行流进入第二个 script 块，仍然在全局 EC（JS引擎只会存在一个全局EC），将 a 的声明加入 AO（与第一个代码块相同，每个EC绑定唯一的 VO|AO） 并推入作用域。\n 4、逐行的进行分词、语法检查、代码生成，然后执行。\n     4.1、在 console.log('b',b); 这行代码中，对变量 b 进行 RHS 查询，在作用域的 AO 中找到对应的值 undefined，输出 b undefined。\n \n 结束\n-->\n ```\n\n3、闭包的产生\n```javascript\n\n// 首先明确什么是闭包？可以使用如下定义：\n// 函数在定义的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域。\n\n// 例子\nfunction fn(){\n    var a = 'JavaScript';\n    function func(){\n        console.log(a);\n    }\n    return func;\n}\n\nvar func = fn();\nfunc(); // JavaScript\n\n// func函数执行的位置和定义的位置是不相同的，func是在函数fn中定义的，但执行却是在全局环境中，虽然是在全局函数中执行的，但函数仍然可以访问当定义时的词法作用域。\n\n// 当函数执行结束后其活动变量就会被销毁，但是在上面的例子中却不是这个样子。但函数fn执行结束之后，fn对象的活动变量并没有被销毁，这是因为fn返回的函数func的作用域链还保持着fn的活动变量，因此JavaScript的垃圾回收机制不会回收fn活动变量。虽然返回的函数func是在全局环境下执行的，但是其作用域链的存储的活动(变量)对象的顺序分别是:func的活动对象、fn的活动对象、全局变量对象。因此在func函数执行时，会顺着作用域链查找标识符，也就能访问到fn所定义的词法作用域(即fn函数的活动变量)也就不足为奇了。\n```\n\n## `总结`\n\n多个script块间的执行顺序\n```javascript\n多个script代码块从上到下按序载入，语法分析阶段报错的话，结束本代码块的执行，执行流进入下一个代码块。多个代码块共享全局执行上下文，可以访问到其他代码块定义的变量和方法。\n```\n\n为什么会产生变量提升与函数提升？\n ```javascript\n 答：在代码执行之前的预编译阶段，创建当前EC时，会在活动对象上创建一个与函数声明与变量声明对应的属性，然后将活动对象推入作用域链。在查询变量时，是通过作用域链进行RHS查询。所以会查询到作用域链上已经定义的函数与变量。\n ```\n\n闭包的产生\n```javascript\n简单来说，闭包中的函数所对应的作用域链上仍然保留了父级活动对象，所以可以对父级活动对象的属性进行查询。\n```\n\n## `参考资料`\n\n- 《你不知道的Javascript》（上卷），第一部分，作用域和闭包\n- [JS引擎的执行过程](https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/)\n- [彻底明白作用域、执行上下文](https://segmentfault.com/a/1190000013915935)\n- [深入理解JavaScript的执行流程，执行上下文EC、变量对象VO、活动对象AO、作用域Scope](https://blog.csdn.net/yangxinxiang84/article/details/113051811?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.10297.16155372256670345&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control)\n- [浅谈JS的 VO|AO](https://blog.csdn.net/Ancecis/article/details/104382441)\n- [JS运行机制之执行顺序](https://blog.csdn.net/chen_zw/article/details/18502937?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control)\n- [我所认识的作用域链与原型链](https://github.com/MrErHu/blog/issues/16)\n\n","source":"_posts/【JS运行机制】JS执行流程.md","raw":"---\ntitle: 【JS运行机制】JS执行流程\ndate: 2023-02-01 00:56:48\ntags: [JS]\ncategories: [JS运行机制]\n---\n\n## `前言`\n\n&emsp;&emsp;\n本文主要解释JS引擎在遇见script代码块时，从编译到执行具体经历了什么？为什么会产生变量提升？闭包的产生原理是什么?多个script代码块间是以什么顺序来执行的？为什么定义在不同代码块间的方法可以共通？通过本文都可以得到解答。\n\n## `基础概念`\n- JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。\n  `解释型`：JS引擎在运行JS代码时，是利用解释器一边编译一边执行的。\n  \n  如此便避免不了一种情况：某些代码多次重复的运行，例如 for循环，在编译型语言中，for循环块中的代码将以机器码执行多次；而在解释型语言中，for循环块中的代码将被解释多次并执行，如此便有了很大的耗损。\n  \n  `即时编译型`：于是JS引擎就加入了`JIT`（Just-in-time）进行编译优化，例如对重复语句和类型判断进行优化。\n\n- 引擎、编译器与作用域\n    引擎：从头到尾负责整个javascript程序的编译及执行过程。浏览器不同，其引擎也不同，比如Chrome采用的是v8，Safari采用的是SquirrelFish Extreme。\n    \n    编译器：编译过程主要分为”词法分析”、“语法分析”及“代码生成“。\n    >\n    作用域（Scope）：根据名称查找变量的一套规则，用于管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。\n\n- 执行上下文（Excution Context EC）&& 执行上下文栈（Excution Context Stack ECS）\n    存在三种 EC：全局执行上下文  GlobalEC ，函数执行上下文  Function EC，Eval。\n    \n    ECS：引擎记录EC的容器，栈底是 GlobalEC ，只有在关闭页面时出栈；栈顶是当前正在执行的 EC ，函数执行完毕后出栈，并将执行权交给下一个 EC 。\n\n- 变量对象（Variable Object）&& 活动对象（Activation Object）\n    VO：EC中用来存储变量声明（必须是 var 关键字声明而不是 let 与 const）与函数声明（必须是显式声明而不是表达式）的容器。由引擎实现，不能访问到。\n    \n    AO：可以理解为VO的实例化，函数调用时在EC中被激活，成员属性能被访问。\n\n- LHS（Left Hand Side） && RHS（Right Hand Side）\n    LHS：赋值操作的目标。例如：a=2; 是对 a 进行 LHS查询。\n    \n    RHS：赋值操作的源头。例如：console.log(a); 是对 a 进行 RHS查询。\n    >\n    非严格模式下，LHS查询不到变量会在顶层作用域创建具有该名称的变量，RHS查询不到变量会报ReferenceError的异常；严格模式下禁止自动创建全局变量，两种查询方式失败均报ReferenceError的异常。\n\n\n## `JS代码执行流程`\n&emsp;&emsp;\n1. -->进入script标签，【预编译】JS引擎创建全局EC，全局EC入栈\n2. -->【编译】JS解释器开始对代码逐行进行分词、语法分析、代码生成\n3. -->有错则抛出，终止执行；无错继续向下逐行执行\n4. -->【预编译】调用函数前，创建函数EC，EC入栈\n5. -->【编译】\n6. -->有错则抛出，终止执行；无错继续向下执行\n7. -->函数执行完毕，EC出栈\n8. -->继续以上步骤\n9. -->页面销毁，全局EC出栈，结束\n\n\n`创建当前环境EC流程如下：`\n\n1、初始化作用域[[Scope]]，（拷贝传入的父执行上下文的Scope），数据结构应该是数组或者链表。\n \n例如：[[Scope]] : AO1（当前）-->VO（全局）\n\n2、创建活动对象，创建完成之后，将活动对象推入作用域链的最前端：\n\n例如：[[Scope]] : AO2（当前）-->AO1（父级）-->VO（全局）\n\n2.1、创建arguments对象，检查上下文，初始化参数名称和值并创建引用的复制。（函数中存在）\n\n2.2、创建形参，通过实参赋值。（函数中存在）\n\n2.3、扫描上下文的函数声明（而非函数表达式）：\n\n为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。函数声明比变量优先级要高，并且定义过程不会被变量覆盖，除非是赋值\n\n2.4、扫描上下文的变量声明：\n\n为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为undefined，如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。\n\n3、求出上下文内部this的值。\n\n## `代码分析`\n\n1、EC创建流程与变量提升\n```javascript\nvar a = \"outer\";\n\nfunction foo(i) {\n    console.log(a);\n    console.log(b);\n    console.log(c);\n    var a = 'hello';\n    var b = function () {};\n\n    function c() {};\n    console.log(`------------`);\n    console.log(a);\n    console.log(b);\n    console.log(c);\n}\n\nfoo(22);// 对形参i的LHS查询\n\n//结果：\nundefined\nundefined\nƒ c() {}\n------------\nhello\nƒ() {}\nƒ c() {}\n\n// 分析\n// 代码载入前，创建全局EC的伪代码\nGlobalEC : {\n    [[Scope]] : [{VO}],\n    VO : {\n        foo : fnFoo,// 函数声明优先，指向函数Foo的引用\n        a :  undefined// 变量声明\n    },\n    this\n}\n// 调用函数foo(22)时，创建当前EC的伪代码\nCurrentEC : {\n    [[Scope]] : [{AO}, {VO}],\n    AO : {\n        // 顺序：arguments对象 形参 函数声明 变量声明\n        arguments : {\n            0 : 22,\n            length : 1\n        },\n        i : 22,// 形参，接受实参赋值\n        c : fnC,//指向函数c的引用\n        a : undefined,\n        b : undefined\n    },\n    this\n}\n```\n\n2、多个script块间的执行过程\n```html\n\n <script>\n     console.log('script1 start');\n\n     console.log('a',a);\n     var b=2;\n\n     console.log('script1 end');\n </script>\n\n <script>\n     console.log('script2 start');\n\n     var a=1;\n     console.log('b',b);\n\n     console.log('script2 end');\n </script>\n\n <!-- \n     script1 start\n     Uncaught ReferenceError: a is not defined\n     script2 start\n     b undefined\n     script2 end\n  -->\n\n<!--\n 1、从代码运行结果可以看出，JS执行流在进入第一个 script 块时，首先会创建全局 EC ，将 b 的声明加入 AO 并推入作用域中（所以第二个 script 块中的代码才能访问到 b），全局EC压入 ECS。\n 2、逐行的进行分词、语法检查、代码生成，然后执行。\n     2.1、在 console.log('script1 start'); 这行代码中，不存在语法错误，执行，输出 start。\n     2.2、在 console.log('a',a); 这行代码中，对变量 a 进行 RHS 查询，在作用域链中找不到 a ，报 ReferenceError，script 块中断执行。\n 3、JS执行流进入第二个 script 块，仍然在全局 EC（JS引擎只会存在一个全局EC），将 a 的声明加入 AO（与第一个代码块相同，每个EC绑定唯一的 VO|AO） 并推入作用域。\n 4、逐行的进行分词、语法检查、代码生成，然后执行。\n     4.1、在 console.log('b',b); 这行代码中，对变量 b 进行 RHS 查询，在作用域的 AO 中找到对应的值 undefined，输出 b undefined。\n \n 结束\n-->\n ```\n\n3、闭包的产生\n```javascript\n\n// 首先明确什么是闭包？可以使用如下定义：\n// 函数在定义的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域。\n\n// 例子\nfunction fn(){\n    var a = 'JavaScript';\n    function func(){\n        console.log(a);\n    }\n    return func;\n}\n\nvar func = fn();\nfunc(); // JavaScript\n\n// func函数执行的位置和定义的位置是不相同的，func是在函数fn中定义的，但执行却是在全局环境中，虽然是在全局函数中执行的，但函数仍然可以访问当定义时的词法作用域。\n\n// 当函数执行结束后其活动变量就会被销毁，但是在上面的例子中却不是这个样子。但函数fn执行结束之后，fn对象的活动变量并没有被销毁，这是因为fn返回的函数func的作用域链还保持着fn的活动变量，因此JavaScript的垃圾回收机制不会回收fn活动变量。虽然返回的函数func是在全局环境下执行的，但是其作用域链的存储的活动(变量)对象的顺序分别是:func的活动对象、fn的活动对象、全局变量对象。因此在func函数执行时，会顺着作用域链查找标识符，也就能访问到fn所定义的词法作用域(即fn函数的活动变量)也就不足为奇了。\n```\n\n## `总结`\n\n多个script块间的执行顺序\n```javascript\n多个script代码块从上到下按序载入，语法分析阶段报错的话，结束本代码块的执行，执行流进入下一个代码块。多个代码块共享全局执行上下文，可以访问到其他代码块定义的变量和方法。\n```\n\n为什么会产生变量提升与函数提升？\n ```javascript\n 答：在代码执行之前的预编译阶段，创建当前EC时，会在活动对象上创建一个与函数声明与变量声明对应的属性，然后将活动对象推入作用域链。在查询变量时，是通过作用域链进行RHS查询。所以会查询到作用域链上已经定义的函数与变量。\n ```\n\n闭包的产生\n```javascript\n简单来说，闭包中的函数所对应的作用域链上仍然保留了父级活动对象，所以可以对父级活动对象的属性进行查询。\n```\n\n## `参考资料`\n\n- 《你不知道的Javascript》（上卷），第一部分，作用域和闭包\n- [JS引擎的执行过程](https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/)\n- [彻底明白作用域、执行上下文](https://segmentfault.com/a/1190000013915935)\n- [深入理解JavaScript的执行流程，执行上下文EC、变量对象VO、活动对象AO、作用域Scope](https://blog.csdn.net/yangxinxiang84/article/details/113051811?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.10297.16155372256670345&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control)\n- [浅谈JS的 VO|AO](https://blog.csdn.net/Ancecis/article/details/104382441)\n- [JS运行机制之执行顺序](https://blog.csdn.net/chen_zw/article/details/18502937?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control)\n- [我所认识的作用域链与原型链](https://github.com/MrErHu/blog/issues/16)\n\n","slug":"【JS运行机制】JS执行流程","published":1,"updated":"2023-02-09T18:47:10.409Z","_id":"cldkn980y000278h8ge0p2u0y","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><code>前言</code></h2><p>&amp;emsp;&amp;emsp;<br>本文主要解释JS引擎在遇见script代码块时，从编译到执行具体经历了什么？为什么会产生变量提升？闭包的产生原理是什么?多个script代码块间是以什么顺序来执行的？为什么定义在不同代码块间的方法可以共通？通过本文都可以得到解答。</p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a><code>基础概念</code></h2><ul>\n<li><p>JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。<br><code>解释型</code>：JS引擎在运行JS代码时，是利用解释器一边编译一边执行的。</p>\n<p>如此便避免不了一种情况：某些代码多次重复的运行，例如 for循环，在编译型语言中，for循环块中的代码将以机器码执行多次；而在解释型语言中，for循环块中的代码将被解释多次并执行，如此便有了很大的耗损。</p>\n<p><code>即时编译型</code>：于是JS引擎就加入了<code>JIT</code>（Just-in-time）进行编译优化，例如对重复语句和类型判断进行优化。</p>\n</li>\n<li><p>引擎、编译器与作用域<br>  引擎：从头到尾负责整个javascript程序的编译及执行过程。浏览器不同，其引擎也不同，比如Chrome采用的是v8，Safari采用的是SquirrelFish Extreme。</p>\n<p>  编译器：编译过程主要分为”词法分析”、“语法分析”及“代码生成“。</p>\n<blockquote>\n</blockquote>\n<p>  作用域（Scope）：根据名称查找变量的一套规则，用于管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。</p>\n</li>\n<li><p>执行上下文（Excution Context EC）&amp;&amp; 执行上下文栈（Excution Context Stack ECS）<br>  存在三种 EC：全局执行上下文  GlobalEC ，函数执行上下文  Function EC，Eval。</p>\n<p>  ECS：引擎记录EC的容器，栈底是 GlobalEC ，只有在关闭页面时出栈；栈顶是当前正在执行的 EC ，函数执行完毕后出栈，并将执行权交给下一个 EC 。</p>\n</li>\n<li><p>变量对象（Variable Object）&amp;&amp; 活动对象（Activation Object）<br>  VO：EC中用来存储变量声明（必须是 var 关键字声明而不是 let 与 const）与函数声明（必须是显式声明而不是表达式）的容器。由引擎实现，不能访问到。</p>\n<p>  AO：可以理解为VO的实例化，函数调用时在EC中被激活，成员属性能被访问。</p>\n</li>\n<li><p>LHS（Left Hand Side） &amp;&amp; RHS（Right Hand Side）<br>  LHS：赋值操作的目标。例如：a&#x3D;2; 是对 a 进行 LHS查询。</p>\n<p>  RHS：赋值操作的源头。例如：console.log(a); 是对 a 进行 RHS查询。</p>\n<blockquote>\n</blockquote>\n<p>  非严格模式下，LHS查询不到变量会在顶层作用域创建具有该名称的变量，RHS查询不到变量会报ReferenceError的异常；严格模式下禁止自动创建全局变量，两种查询方式失败均报ReferenceError的异常。</p>\n</li>\n</ul>\n<h2 id=\"JS代码执行流程\"><a href=\"#JS代码执行流程\" class=\"headerlink\" title=\"JS代码执行流程\"></a><code>JS代码执行流程</code></h2><p>&amp;emsp;&amp;emsp;</p>\n<ol>\n<li>–&gt;进入script标签，【预编译】JS引擎创建全局EC，全局EC入栈</li>\n<li>–&gt;【编译】JS解释器开始对代码逐行进行分词、语法分析、代码生成</li>\n<li>–&gt;有错则抛出，终止执行；无错继续向下逐行执行</li>\n<li>–&gt;【预编译】调用函数前，创建函数EC，EC入栈</li>\n<li>–&gt;【编译】</li>\n<li>–&gt;有错则抛出，终止执行；无错继续向下执行</li>\n<li>–&gt;函数执行完毕，EC出栈</li>\n<li>–&gt;继续以上步骤</li>\n<li>–&gt;页面销毁，全局EC出栈，结束</li>\n</ol>\n<p><code>创建当前环境EC流程如下：</code></p>\n<p>1、初始化作用域[[Scope]]，（拷贝传入的父执行上下文的Scope），数据结构应该是数组或者链表。</p>\n<p>例如：[[Scope]] : AO1（当前）–&gt;VO（全局）</p>\n<p>2、创建活动对象，创建完成之后，将活动对象推入作用域链的最前端：</p>\n<p>例如：[[Scope]] : AO2（当前）–&gt;AO1（父级）–&gt;VO（全局）</p>\n<p>2.1、创建arguments对象，检查上下文，初始化参数名称和值并创建引用的复制。（函数中存在）</p>\n<p>2.2、创建形参，通过实参赋值。（函数中存在）</p>\n<p>2.3、扫描上下文的函数声明（而非函数表达式）：</p>\n<p>为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。函数声明比变量优先级要高，并且定义过程不会被变量覆盖，除非是赋值</p>\n<p>2.4、扫描上下文的变量声明：</p>\n<p>为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为undefined，如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。</p>\n<p>3、求出上下文内部this的值。</p>\n<h2 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a><code>代码分析</code></h2><p>1、EC创建流程与变量提升</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;outer&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`------------`</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">22</span>);<span class=\"comment\">// 对形参i的LHS查询</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">ƒ <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">------------</span><br><span class=\"line\">hello</span><br><span class=\"line\">ƒ() &#123;&#125;</span><br><span class=\"line\">ƒ <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分析</span></span><br><span class=\"line\"><span class=\"comment\">// 代码载入前，创建全局EC的伪代码</span></span><br><span class=\"line\"><span class=\"title class_\">GlobalEC</span> : &#123;</span><br><span class=\"line\">    [[<span class=\"title class_\">Scope</span>]] : [&#123;<span class=\"variable constant_\">VO</span>&#125;],</span><br><span class=\"line\">    <span class=\"variable constant_\">VO</span> : &#123;</span><br><span class=\"line\">        foo : fnFoo,<span class=\"comment\">// 函数声明优先，指向函数Foo的引用</span></span><br><span class=\"line\">        a :  <span class=\"literal\">undefined</span><span class=\"comment\">// 变量声明</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用函数foo(22)时，创建当前EC的伪代码</span></span><br><span class=\"line\"><span class=\"title class_\">CurrentEC</span> : &#123;</span><br><span class=\"line\">    [[<span class=\"title class_\">Scope</span>]] : [&#123;<span class=\"variable constant_\">AO</span>&#125;, &#123;<span class=\"variable constant_\">VO</span>&#125;],</span><br><span class=\"line\">    <span class=\"variable constant_\">AO</span> : &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 顺序：arguments对象 形参 函数声明 变量声明</span></span><br><span class=\"line\">        <span class=\"variable language_\">arguments</span> : &#123;</span><br><span class=\"line\">            <span class=\"number\">0</span> : <span class=\"number\">22</span>,</span><br><span class=\"line\">            length : <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        i : <span class=\"number\">22</span>,<span class=\"comment\">// 形参，接受实参赋值</span></span><br><span class=\"line\">        c : fnC,<span class=\"comment\">//指向函数c的引用</span></span><br><span class=\"line\">        a : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        b : <span class=\"literal\">undefined</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>2、多个script块间的执行过程</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script1 start&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a&#x27;</span>,a);</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">var</span> b=<span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script1 end&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script2 start&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b&#x27;</span>,b);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script2 end&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     script1 start</span></span><br><span class=\"line\"><span class=\"comment\">     Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\"><span class=\"comment\">     script2 start</span></span><br><span class=\"line\"><span class=\"comment\">     b undefined</span></span><br><span class=\"line\"><span class=\"comment\">     script2 end</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\"> 1、从代码运行结果可以看出，JS执行流在进入第一个 script 块时，首先会创建全局 EC ，将 b 的声明加入 AO 并推入作用域中（所以第二个 script 块中的代码才能访问到 b），全局EC压入 ECS。</span></span><br><span class=\"line\"><span class=\"comment\"> 2、逐行的进行分词、语法检查、代码生成，然后执行。</span></span><br><span class=\"line\"><span class=\"comment\">     2.1、在 console.log(&#x27;script1 start&#x27;); 这行代码中，不存在语法错误，执行，输出 start。</span></span><br><span class=\"line\"><span class=\"comment\">     2.2、在 console.log(&#x27;a&#x27;,a); 这行代码中，对变量 a 进行 RHS 查询，在作用域链中找不到 a ，报 ReferenceError，script 块中断执行。</span></span><br><span class=\"line\"><span class=\"comment\"> 3、JS执行流进入第二个 script 块，仍然在全局 EC（JS引擎只会存在一个全局EC），将 a 的声明加入 AO（与第一个代码块相同，每个EC绑定唯一的 VO|AO） 并推入作用域。</span></span><br><span class=\"line\"><span class=\"comment\"> 4、逐行的进行分词、语法检查、代码生成，然后执行。</span></span><br><span class=\"line\"><span class=\"comment\">     4.1、在 console.log(&#x27;b&#x27;,b); 这行代码中，对变量 b 进行 RHS 查询，在作用域的 AO 中找到对应的值 undefined，输出 b undefined。</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> 结束</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>3、闭包的产生</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首先明确什么是闭包？可以使用如下定义：</span></span><br><span class=\"line\"><span class=\"comment\">// 函数在定义的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例子</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;JavaScript&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"title function_\">func</span>(); <span class=\"comment\">// JavaScript</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// func函数执行的位置和定义的位置是不相同的，func是在函数fn中定义的，但执行却是在全局环境中，虽然是在全局函数中执行的，但函数仍然可以访问当定义时的词法作用域。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当函数执行结束后其活动变量就会被销毁，但是在上面的例子中却不是这个样子。但函数fn执行结束之后，fn对象的活动变量并没有被销毁，这是因为fn返回的函数func的作用域链还保持着fn的活动变量，因此JavaScript的垃圾回收机制不会回收fn活动变量。虽然返回的函数func是在全局环境下执行的，但是其作用域链的存储的活动(变量)对象的顺序分别是:func的活动对象、fn的活动对象、全局变量对象。因此在func函数执行时，会顺着作用域链查找标识符，也就能访问到fn所定义的词法作用域(即fn函数的活动变量)也就不足为奇了。</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><code>总结</code></h2><p>多个script块间的执行顺序</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多个script代码块从上到下按序载入，语法分析阶段报错的话，结束本代码块的执行，执行流进入下一个代码块。多个代码块共享全局执行上下文，可以访问到其他代码块定义的变量和方法。</span><br></pre></td></tr></table></figure></div>\n\n<p>为什么会产生变量提升与函数提升？<br> <div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答：在代码执行之前的预编译阶段，创建当前<span class=\"variable constant_\">EC</span>时，会在活动对象上创建一个与函数声明与变量声明对应的属性，然后将活动对象推入作用域链。在查询变量时，是通过作用域链进行<span class=\"variable constant_\">RHS</span>查询。所以会查询到作用域链上已经定义的函数与变量。</span><br></pre></td></tr></table></figure></div></p>\n<p>闭包的产生</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">简单来说，闭包中的函数所对应的作用域链上仍然保留了父级活动对象，所以可以对父级活动对象的属性进行查询。</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><ul>\n<li>《你不知道的Javascript》（上卷），第一部分，作用域和闭包</li>\n<li><a class=\"link\"   href=\"https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/\" >JS引擎的执行过程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://segmentfault.com/a/1190000013915935\" >彻底明白作用域、执行上下文 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/yangxinxiang84/article/details/113051811?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.10297.16155372256670345&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control\" >深入理解JavaScript的执行流程，执行上下文EC、变量对象VO、活动对象AO、作用域Scope <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/Ancecis/article/details/104382441\" >浅谈JS的 VO|AO <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/chen_zw/article/details/18502937?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control\" >JS运行机制之执行顺序 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/MrErHu/blog/issues/16\" >我所认识的作用域链与原型链 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><code>前言</code></h2><p>&amp;emsp;&amp;emsp;<br>本文主要解释JS引擎在遇见script代码块时，从编译到执行具体经历了什么？为什么会产生变量提升？闭包的产生原理是什么?多个script代码块间是以什么顺序来执行的？为什么定义在不同代码块间的方法可以共通？通过本文都可以得到解答。</p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a><code>基础概念</code></h2><ul>\n<li><p>JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。<br><code>解释型</code>：JS引擎在运行JS代码时，是利用解释器一边编译一边执行的。</p>\n<p>如此便避免不了一种情况：某些代码多次重复的运行，例如 for循环，在编译型语言中，for循环块中的代码将以机器码执行多次；而在解释型语言中，for循环块中的代码将被解释多次并执行，如此便有了很大的耗损。</p>\n<p><code>即时编译型</code>：于是JS引擎就加入了<code>JIT</code>（Just-in-time）进行编译优化，例如对重复语句和类型判断进行优化。</p>\n</li>\n<li><p>引擎、编译器与作用域<br>  引擎：从头到尾负责整个javascript程序的编译及执行过程。浏览器不同，其引擎也不同，比如Chrome采用的是v8，Safari采用的是SquirrelFish Extreme。</p>\n<p>  编译器：编译过程主要分为”词法分析”、“语法分析”及“代码生成“。</p>\n<blockquote>\n</blockquote>\n<p>  作用域（Scope）：根据名称查找变量的一套规则，用于管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。</p>\n</li>\n<li><p>执行上下文（Excution Context EC）&amp;&amp; 执行上下文栈（Excution Context Stack ECS）<br>  存在三种 EC：全局执行上下文  GlobalEC ，函数执行上下文  Function EC，Eval。</p>\n<p>  ECS：引擎记录EC的容器，栈底是 GlobalEC ，只有在关闭页面时出栈；栈顶是当前正在执行的 EC ，函数执行完毕后出栈，并将执行权交给下一个 EC 。</p>\n</li>\n<li><p>变量对象（Variable Object）&amp;&amp; 活动对象（Activation Object）<br>  VO：EC中用来存储变量声明（必须是 var 关键字声明而不是 let 与 const）与函数声明（必须是显式声明而不是表达式）的容器。由引擎实现，不能访问到。</p>\n<p>  AO：可以理解为VO的实例化，函数调用时在EC中被激活，成员属性能被访问。</p>\n</li>\n<li><p>LHS（Left Hand Side） &amp;&amp; RHS（Right Hand Side）<br>  LHS：赋值操作的目标。例如：a&#x3D;2; 是对 a 进行 LHS查询。</p>\n<p>  RHS：赋值操作的源头。例如：console.log(a); 是对 a 进行 RHS查询。</p>\n<blockquote>\n</blockquote>\n<p>  非严格模式下，LHS查询不到变量会在顶层作用域创建具有该名称的变量，RHS查询不到变量会报ReferenceError的异常；严格模式下禁止自动创建全局变量，两种查询方式失败均报ReferenceError的异常。</p>\n</li>\n</ul>\n<h2 id=\"JS代码执行流程\"><a href=\"#JS代码执行流程\" class=\"headerlink\" title=\"JS代码执行流程\"></a><code>JS代码执行流程</code></h2><p>&amp;emsp;&amp;emsp;</p>\n<ol>\n<li>–&gt;进入script标签，【预编译】JS引擎创建全局EC，全局EC入栈</li>\n<li>–&gt;【编译】JS解释器开始对代码逐行进行分词、语法分析、代码生成</li>\n<li>–&gt;有错则抛出，终止执行；无错继续向下逐行执行</li>\n<li>–&gt;【预编译】调用函数前，创建函数EC，EC入栈</li>\n<li>–&gt;【编译】</li>\n<li>–&gt;有错则抛出，终止执行；无错继续向下执行</li>\n<li>–&gt;函数执行完毕，EC出栈</li>\n<li>–&gt;继续以上步骤</li>\n<li>–&gt;页面销毁，全局EC出栈，结束</li>\n</ol>\n<p><code>创建当前环境EC流程如下：</code></p>\n<p>1、初始化作用域[[Scope]]，（拷贝传入的父执行上下文的Scope），数据结构应该是数组或者链表。</p>\n<p>例如：[[Scope]] : AO1（当前）–&gt;VO（全局）</p>\n<p>2、创建活动对象，创建完成之后，将活动对象推入作用域链的最前端：</p>\n<p>例如：[[Scope]] : AO2（当前）–&gt;AO1（父级）–&gt;VO（全局）</p>\n<p>2.1、创建arguments对象，检查上下文，初始化参数名称和值并创建引用的复制。（函数中存在）</p>\n<p>2.2、创建形参，通过实参赋值。（函数中存在）</p>\n<p>2.3、扫描上下文的函数声明（而非函数表达式）：</p>\n<p>为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。函数声明比变量优先级要高，并且定义过程不会被变量覆盖，除非是赋值</p>\n<p>2.4、扫描上下文的变量声明：</p>\n<p>为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为undefined，如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。</p>\n<p>3、求出上下文内部this的值。</p>\n<h2 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a><code>代码分析</code></h2><p>1、EC创建流程与变量提升</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;outer&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`------------`</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">22</span>);<span class=\"comment\">// 对形参i的LHS查询</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">ƒ <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">------------</span><br><span class=\"line\">hello</span><br><span class=\"line\">ƒ() &#123;&#125;</span><br><span class=\"line\">ƒ <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分析</span></span><br><span class=\"line\"><span class=\"comment\">// 代码载入前，创建全局EC的伪代码</span></span><br><span class=\"line\"><span class=\"title class_\">GlobalEC</span> : &#123;</span><br><span class=\"line\">    [[<span class=\"title class_\">Scope</span>]] : [&#123;<span class=\"variable constant_\">VO</span>&#125;],</span><br><span class=\"line\">    <span class=\"variable constant_\">VO</span> : &#123;</span><br><span class=\"line\">        foo : fnFoo,<span class=\"comment\">// 函数声明优先，指向函数Foo的引用</span></span><br><span class=\"line\">        a :  <span class=\"literal\">undefined</span><span class=\"comment\">// 变量声明</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用函数foo(22)时，创建当前EC的伪代码</span></span><br><span class=\"line\"><span class=\"title class_\">CurrentEC</span> : &#123;</span><br><span class=\"line\">    [[<span class=\"title class_\">Scope</span>]] : [&#123;<span class=\"variable constant_\">AO</span>&#125;, &#123;<span class=\"variable constant_\">VO</span>&#125;],</span><br><span class=\"line\">    <span class=\"variable constant_\">AO</span> : &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 顺序：arguments对象 形参 函数声明 变量声明</span></span><br><span class=\"line\">        <span class=\"variable language_\">arguments</span> : &#123;</span><br><span class=\"line\">            <span class=\"number\">0</span> : <span class=\"number\">22</span>,</span><br><span class=\"line\">            length : <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        i : <span class=\"number\">22</span>,<span class=\"comment\">// 形参，接受实参赋值</span></span><br><span class=\"line\">        c : fnC,<span class=\"comment\">//指向函数c的引用</span></span><br><span class=\"line\">        a : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        b : <span class=\"literal\">undefined</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、多个script块间的执行过程</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script1 start&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a&#x27;</span>,a);</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">var</span> b=<span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script1 end&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script2 start&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b&#x27;</span>,b);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script2 end&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     script1 start</span></span><br><span class=\"line\"><span class=\"comment\">     Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\"><span class=\"comment\">     script2 start</span></span><br><span class=\"line\"><span class=\"comment\">     b undefined</span></span><br><span class=\"line\"><span class=\"comment\">     script2 end</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\"> 1、从代码运行结果可以看出，JS执行流在进入第一个 script 块时，首先会创建全局 EC ，将 b 的声明加入 AO 并推入作用域中（所以第二个 script 块中的代码才能访问到 b），全局EC压入 ECS。</span></span><br><span class=\"line\"><span class=\"comment\"> 2、逐行的进行分词、语法检查、代码生成，然后执行。</span></span><br><span class=\"line\"><span class=\"comment\">     2.1、在 console.log(&#x27;script1 start&#x27;); 这行代码中，不存在语法错误，执行，输出 start。</span></span><br><span class=\"line\"><span class=\"comment\">     2.2、在 console.log(&#x27;a&#x27;,a); 这行代码中，对变量 a 进行 RHS 查询，在作用域链中找不到 a ，报 ReferenceError，script 块中断执行。</span></span><br><span class=\"line\"><span class=\"comment\"> 3、JS执行流进入第二个 script 块，仍然在全局 EC（JS引擎只会存在一个全局EC），将 a 的声明加入 AO（与第一个代码块相同，每个EC绑定唯一的 VO|AO） 并推入作用域。</span></span><br><span class=\"line\"><span class=\"comment\"> 4、逐行的进行分词、语法检查、代码生成，然后执行。</span></span><br><span class=\"line\"><span class=\"comment\">     4.1、在 console.log(&#x27;b&#x27;,b); 这行代码中，对变量 b 进行 RHS 查询，在作用域的 AO 中找到对应的值 undefined，输出 b undefined。</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> 结束</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、闭包的产生</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首先明确什么是闭包？可以使用如下定义：</span></span><br><span class=\"line\"><span class=\"comment\">// 函数在定义的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例子</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;JavaScript&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"title function_\">func</span>(); <span class=\"comment\">// JavaScript</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// func函数执行的位置和定义的位置是不相同的，func是在函数fn中定义的，但执行却是在全局环境中，虽然是在全局函数中执行的，但函数仍然可以访问当定义时的词法作用域。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当函数执行结束后其活动变量就会被销毁，但是在上面的例子中却不是这个样子。但函数fn执行结束之后，fn对象的活动变量并没有被销毁，这是因为fn返回的函数func的作用域链还保持着fn的活动变量，因此JavaScript的垃圾回收机制不会回收fn活动变量。虽然返回的函数func是在全局环境下执行的，但是其作用域链的存储的活动(变量)对象的顺序分别是:func的活动对象、fn的活动对象、全局变量对象。因此在func函数执行时，会顺着作用域链查找标识符，也就能访问到fn所定义的词法作用域(即fn函数的活动变量)也就不足为奇了。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><code>总结</code></h2><p>多个script块间的执行顺序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多个script代码块从上到下按序载入，语法分析阶段报错的话，结束本代码块的执行，执行流进入下一个代码块。多个代码块共享全局执行上下文，可以访问到其他代码块定义的变量和方法。</span><br></pre></td></tr></table></figure>\n\n<p>为什么会产生变量提升与函数提升？<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答：在代码执行之前的预编译阶段，创建当前<span class=\"variable constant_\">EC</span>时，会在活动对象上创建一个与函数声明与变量声明对应的属性，然后将活动对象推入作用域链。在查询变量时，是通过作用域链进行<span class=\"variable constant_\">RHS</span>查询。所以会查询到作用域链上已经定义的函数与变量。</span><br></pre></td></tr></table></figure></p>\n<p>闭包的产生</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">简单来说，闭包中的函数所对应的作用域链上仍然保留了父级活动对象，所以可以对父级活动对象的属性进行查询。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><ul>\n<li>《你不知道的Javascript》（上卷），第一部分，作用域和闭包</li>\n<li><a class=\"link\"   href=\"https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/\" >JS引擎的执行过程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://segmentfault.com/a/1190000013915935\" >彻底明白作用域、执行上下文 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/yangxinxiang84/article/details/113051811?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.10297.16155372256670345&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control\" >深入理解JavaScript的执行流程，执行上下文EC、变量对象VO、活动对象AO、作用域Scope <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/Ancecis/article/details/104382441\" >浅谈JS的 VO|AO <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/chen_zw/article/details/18502937?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control\" >JS运行机制之执行顺序 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/MrErHu/blog/issues/16\" >我所认识的作用域链与原型链 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n"},{"title":"前端发展历程梳理","date":"2022-03-09T03:39:39.000Z","_content":"\n\n## 前言\n\n了解前端的发展历史有助于从一个全局的视角来重新认知前端技术，脱离单独某一种视角的窠臼。\n\n- `Node.js`的出现意味着什么？\n- 为什么要从`jquery`转入三大框架？\n- 既然已经有了`javascript`为什么还要使用`babel`来转化？\n- `CommonJS`、`AMD`、`CMD`、`ESModule`又是什么？\n\n类似的问题不胜枚举，而这篇文章有助于解决此类问题。\n\n## 1.需求驱动和问题驱动\n\n一种技术能够出现并且不断的发展，一定具有某种内在的驱动力，我认为这种驱动力存在两种：\n1. 需求驱动\n2. 问题驱动\n\n需求驱动顾名思义就是当前的技术工具支持不了新的需求，所以推动了新技术的产生。而问题驱动则是实现某种需求的过程中产生了困难，老旧的技术工具解决不了或者解决起来很麻烦困难，所以推动了新技术的产生。\n\n## 2.前端大事件的时间节点\n\n| 时间               | 事件                                                                                                                                                                                                                                                                |\n| :----------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `web1.0 1991~2004` | 只读网络，网站提供内容，用户阅读内容                                                                                                                                                                                                                                |\n| 1989年             | `HTML`由Web的发明者Tim Berners-Lee创立，这也是前端的起始                                                                                                                                                                                                            |\n| 1994年             | 世界上的第一款浏览器`NCSAMosaic`由Netscape（网景）公司开发,同年`W3C`（世界万维网联盟）成立                                                                                                                                                                          |\n| 1995年             | `JavaScript`由网景公司的Brendan Eich设计                                                                                                                                                                                                                            |\n| 1996年             | W3C发布了`CSS1`标准，从此前端有了样式规范                                                                                                                                                                                                                           |\n| 1997年             | `ECMAScript1`由ECMA国际正式发布，从此Javascript有了自己的标准，同年W3C发布了`HTML4.0`标准，这是使用时间最长的一个版本                                                                                                                                               |\n| 1998年             | W3C发布了`XML(可扩展标记语言)`标准，同年`Ajax`（异步Javascript和XML）技术开始得到应用                                                                                                                                                                               |\n| 2001年             | Douglas Crockford开始推广使用`JSON`数据格式，它比XML更加简洁清晰                                                                                                                                                                                                    |\n| `web2.0 2004~至今` | 交互网络，用户产生内容，通过网站与他人交互                                                                                                                                                                                                                          |\n| 2006年             | John Resig发布了`JQuery`的第一个版本，这是迄今为止最成功的JS库，同年W3C正式发布`XMLHttpRequest`标准，为以后的Ajax爆发提供技术基础。                                                                                                                                 |\n| 2008年             | Google开源了高性能的Javascript引擎`V8`                                                                                                                                                                                                                              |\n| 2009年             | Ryan Dahl开发了基于V8引擎的`NodeJS`运行时环境，从此javascript可以运行在服务端；同年`ECMAScript5`发布，这是使用时间最长，各个浏览器兼容性最好，如今大部分程序也依然在使用的一代标准；同年Miško Hevery创造了`AngularJS`框架，基于MVC模式，并且实现了SPA（单页面应用） |\n| 2010年             | `NPM`（NodeJS包管理工具）发布了第一个版本，从此前端有了自己的包管理器                                                                                                                                                                                               |\n| 2011年             | Twitter开源了其前端框架`Bootstrap`                                                                                                                                                                                                                                  |\n| 2012年             | 微软发布了`Typescript`的第一个版本，让Javascript拥有了自己的类型                                                                                                                                                                                                    |\n| 2013年             | Facebook开源了其前端框架`React`，同年尤雨溪受到Angular启发开发了轻量级前端框架`Seed`，后更名为`Vue`                                                                                                                                                                 |\n| 2014年             | W3C发布了`HTML5`标准                                                                                                                                                                                                                                                |\n| 2015年             | `ECMAScript6`正式发布，后更名为`ECMAScript2015`，之截至目前2022年，每年都发布了对应的新版本                                                                                                                                                                         |\n| 2016年             | `ECMAScript2016`正式发布                                                                                                                                                                                                                                            |\n| 2017年             | `ECMAScript2017`正式发布                                                                                                                                                                                                                                            |\n\n## 一些技术发展过程的梳理\n\n可以把前端发展的历程分为\n\n## 展望未来\n\n\n## 参考资料\n- 百度百科\n- [前端的历史发展节点](http://www.javashuo.com/article/p-hvrlfhxo-gc.html)\n- [Web开发的历史发展技术演变](https://zhuanlan.zhihu.com/p/196637639)\n- [Web 1.0、Web 2.0 和 Web 3.0 之间的比较](https://blog.csdn.net/qq_44273429/article/details/127462439)","source":"_posts/【方法论】前端发展历程梳理（未完成）.md","raw":"---\ntitle: 前端发展历程梳理\ndate: 2022-03-09 11:39:39\ntags: [JS]\ncategories: [方法论]\n---\n\n\n## 前言\n\n了解前端的发展历史有助于从一个全局的视角来重新认知前端技术，脱离单独某一种视角的窠臼。\n\n- `Node.js`的出现意味着什么？\n- 为什么要从`jquery`转入三大框架？\n- 既然已经有了`javascript`为什么还要使用`babel`来转化？\n- `CommonJS`、`AMD`、`CMD`、`ESModule`又是什么？\n\n类似的问题不胜枚举，而这篇文章有助于解决此类问题。\n\n## 1.需求驱动和问题驱动\n\n一种技术能够出现并且不断的发展，一定具有某种内在的驱动力，我认为这种驱动力存在两种：\n1. 需求驱动\n2. 问题驱动\n\n需求驱动顾名思义就是当前的技术工具支持不了新的需求，所以推动了新技术的产生。而问题驱动则是实现某种需求的过程中产生了困难，老旧的技术工具解决不了或者解决起来很麻烦困难，所以推动了新技术的产生。\n\n## 2.前端大事件的时间节点\n\n| 时间               | 事件                                                                                                                                                                                                                                                                |\n| :----------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `web1.0 1991~2004` | 只读网络，网站提供内容，用户阅读内容                                                                                                                                                                                                                                |\n| 1989年             | `HTML`由Web的发明者Tim Berners-Lee创立，这也是前端的起始                                                                                                                                                                                                            |\n| 1994年             | 世界上的第一款浏览器`NCSAMosaic`由Netscape（网景）公司开发,同年`W3C`（世界万维网联盟）成立                                                                                                                                                                          |\n| 1995年             | `JavaScript`由网景公司的Brendan Eich设计                                                                                                                                                                                                                            |\n| 1996年             | W3C发布了`CSS1`标准，从此前端有了样式规范                                                                                                                                                                                                                           |\n| 1997年             | `ECMAScript1`由ECMA国际正式发布，从此Javascript有了自己的标准，同年W3C发布了`HTML4.0`标准，这是使用时间最长的一个版本                                                                                                                                               |\n| 1998年             | W3C发布了`XML(可扩展标记语言)`标准，同年`Ajax`（异步Javascript和XML）技术开始得到应用                                                                                                                                                                               |\n| 2001年             | Douglas Crockford开始推广使用`JSON`数据格式，它比XML更加简洁清晰                                                                                                                                                                                                    |\n| `web2.0 2004~至今` | 交互网络，用户产生内容，通过网站与他人交互                                                                                                                                                                                                                          |\n| 2006年             | John Resig发布了`JQuery`的第一个版本，这是迄今为止最成功的JS库，同年W3C正式发布`XMLHttpRequest`标准，为以后的Ajax爆发提供技术基础。                                                                                                                                 |\n| 2008年             | Google开源了高性能的Javascript引擎`V8`                                                                                                                                                                                                                              |\n| 2009年             | Ryan Dahl开发了基于V8引擎的`NodeJS`运行时环境，从此javascript可以运行在服务端；同年`ECMAScript5`发布，这是使用时间最长，各个浏览器兼容性最好，如今大部分程序也依然在使用的一代标准；同年Miško Hevery创造了`AngularJS`框架，基于MVC模式，并且实现了SPA（单页面应用） |\n| 2010年             | `NPM`（NodeJS包管理工具）发布了第一个版本，从此前端有了自己的包管理器                                                                                                                                                                                               |\n| 2011年             | Twitter开源了其前端框架`Bootstrap`                                                                                                                                                                                                                                  |\n| 2012年             | 微软发布了`Typescript`的第一个版本，让Javascript拥有了自己的类型                                                                                                                                                                                                    |\n| 2013年             | Facebook开源了其前端框架`React`，同年尤雨溪受到Angular启发开发了轻量级前端框架`Seed`，后更名为`Vue`                                                                                                                                                                 |\n| 2014年             | W3C发布了`HTML5`标准                                                                                                                                                                                                                                                |\n| 2015年             | `ECMAScript6`正式发布，后更名为`ECMAScript2015`，之截至目前2022年，每年都发布了对应的新版本                                                                                                                                                                         |\n| 2016年             | `ECMAScript2016`正式发布                                                                                                                                                                                                                                            |\n| 2017年             | `ECMAScript2017`正式发布                                                                                                                                                                                                                                            |\n\n## 一些技术发展过程的梳理\n\n可以把前端发展的历程分为\n\n## 展望未来\n\n\n## 参考资料\n- 百度百科\n- [前端的历史发展节点](http://www.javashuo.com/article/p-hvrlfhxo-gc.html)\n- [Web开发的历史发展技术演变](https://zhuanlan.zhihu.com/p/196637639)\n- [Web 1.0、Web 2.0 和 Web 3.0 之间的比较](https://blog.csdn.net/qq_44273429/article/details/127462439)","slug":"【方法论】前端发展历程梳理（未完成）","published":1,"updated":"2023-02-08T18:41:22.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldw0ovoo0001f8h8huat3rxa","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>了解前端的发展历史有助于从一个全局的视角来重新认知前端技术，脱离单独某一种视角的窠臼。</p>\n<ul>\n<li><code>Node.js</code>的出现意味着什么？</li>\n<li>为什么要从<code>jquery</code>转入三大框架？</li>\n<li>既然已经有了<code>javascript</code>为什么还要使用<code>babel</code>来转化？</li>\n<li><code>CommonJS</code>、<code>AMD</code>、<code>CMD</code>、<code>ESModule</code>又是什么？</li>\n</ul>\n<p>类似的问题不胜枚举，而这篇文章有助于解决此类问题。</p>\n<h2 id=\"1-需求驱动和问题驱动\"><a href=\"#1-需求驱动和问题驱动\" class=\"headerlink\" title=\"1.需求驱动和问题驱动\"></a>1.需求驱动和问题驱动</h2><p>一种技术能够出现并且不断的发展，一定具有某种内在的驱动力，我认为这种驱动力存在两种：</p>\n<ol>\n<li>需求驱动</li>\n<li>问题驱动</li>\n</ol>\n<p>需求驱动顾名思义就是当前的技术工具支持不了新的需求，所以推动了新技术的产生。而问题驱动则是实现某种需求的过程中产生了困难，老旧的技术工具解决不了或者解决起来很麻烦困难，所以推动了新技术的产生。</p>\n<h2 id=\"2-前端大事件的时间节点\"><a href=\"#2-前端大事件的时间节点\" class=\"headerlink\" title=\"2.前端大事件的时间节点\"></a>2.前端大事件的时间节点</h2><table>\n<thead>\n<tr>\n<th align=\"left\">时间</th>\n<th align=\"left\">事件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>web1.0 1991~2004</code></td>\n<td align=\"left\">只读网络，网站提供内容，用户阅读内容</td>\n</tr>\n<tr>\n<td align=\"left\">1989年</td>\n<td align=\"left\"><code>HTML</code>由Web的发明者Tim Berners-Lee创立，这也是前端的起始</td>\n</tr>\n<tr>\n<td align=\"left\">1994年</td>\n<td align=\"left\">世界上的第一款浏览器<code>NCSAMosaic</code>由Netscape（网景）公司开发,同年<code>W3C</code>（世界万维网联盟）成立</td>\n</tr>\n<tr>\n<td align=\"left\">1995年</td>\n<td align=\"left\"><code>JavaScript</code>由网景公司的Brendan Eich设计</td>\n</tr>\n<tr>\n<td align=\"left\">1996年</td>\n<td align=\"left\">W3C发布了<code>CSS1</code>标准，从此前端有了样式规范</td>\n</tr>\n<tr>\n<td align=\"left\">1997年</td>\n<td align=\"left\"><code>ECMAScript1</code>由ECMA国际正式发布，从此Javascript有了自己的标准，同年W3C发布了<code>HTML4.0</code>标准，这是使用时间最长的一个版本</td>\n</tr>\n<tr>\n<td align=\"left\">1998年</td>\n<td align=\"left\">W3C发布了<code>XML(可扩展标记语言)</code>标准，同年<code>Ajax</code>（异步Javascript和XML）技术开始得到应用</td>\n</tr>\n<tr>\n<td align=\"left\">2001年</td>\n<td align=\"left\">Douglas Crockford开始推广使用<code>JSON</code>数据格式，它比XML更加简洁清晰</td>\n</tr>\n<tr>\n<td align=\"left\"><code>web2.0 2004~至今</code></td>\n<td align=\"left\">交互网络，用户产生内容，通过网站与他人交互</td>\n</tr>\n<tr>\n<td align=\"left\">2006年</td>\n<td align=\"left\">John Resig发布了<code>JQuery</code>的第一个版本，这是迄今为止最成功的JS库，同年W3C正式发布<code>XMLHttpRequest</code>标准，为以后的Ajax爆发提供技术基础。</td>\n</tr>\n<tr>\n<td align=\"left\">2008年</td>\n<td align=\"left\">Google开源了高性能的Javascript引擎<code>V8</code></td>\n</tr>\n<tr>\n<td align=\"left\">2009年</td>\n<td align=\"left\">Ryan Dahl开发了基于V8引擎的<code>NodeJS</code>运行时环境，从此javascript可以运行在服务端；同年<code>ECMAScript5</code>发布，这是使用时间最长，各个浏览器兼容性最好，如今大部分程序也依然在使用的一代标准；同年Miško Hevery创造了<code>AngularJS</code>框架，基于MVC模式，并且实现了SPA（单页面应用）</td>\n</tr>\n<tr>\n<td align=\"left\">2010年</td>\n<td align=\"left\"><code>NPM</code>（NodeJS包管理工具）发布了第一个版本，从此前端有了自己的包管理器</td>\n</tr>\n<tr>\n<td align=\"left\">2011年</td>\n<td align=\"left\">Twitter开源了其前端框架<code>Bootstrap</code></td>\n</tr>\n<tr>\n<td align=\"left\">2012年</td>\n<td align=\"left\">微软发布了<code>Typescript</code>的第一个版本，让Javascript拥有了自己的类型</td>\n</tr>\n<tr>\n<td align=\"left\">2013年</td>\n<td align=\"left\">Facebook开源了其前端框架<code>React</code>，同年尤雨溪受到Angular启发开发了轻量级前端框架<code>Seed</code>，后更名为<code>Vue</code></td>\n</tr>\n<tr>\n<td align=\"left\">2014年</td>\n<td align=\"left\">W3C发布了<code>HTML5</code>标准</td>\n</tr>\n<tr>\n<td align=\"left\">2015年</td>\n<td align=\"left\"><code>ECMAScript6</code>正式发布，后更名为<code>ECMAScript2015</code>，之截至目前2022年，每年都发布了对应的新版本</td>\n</tr>\n<tr>\n<td align=\"left\">2016年</td>\n<td align=\"left\"><code>ECMAScript2016</code>正式发布</td>\n</tr>\n<tr>\n<td align=\"left\">2017年</td>\n<td align=\"left\"><code>ECMAScript2017</code>正式发布</td>\n</tr>\n</tbody></table>\n<h2 id=\"一些技术发展过程的梳理\"><a href=\"#一些技术发展过程的梳理\" class=\"headerlink\" title=\"一些技术发展过程的梳理\"></a>一些技术发展过程的梳理</h2><p>可以把前端发展的历程分为</p>\n<h2 id=\"展望未来\"><a href=\"#展望未来\" class=\"headerlink\" title=\"展望未来\"></a>展望未来</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>百度百科</li>\n<li><a class=\"link\"   href=\"http://www.javashuo.com/article/p-hvrlfhxo-gc.html\" >前端的历史发展节点 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/196637639\" >Web开发的历史发展技术演变 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/qq_44273429/article/details/127462439\" >Web 1.0、Web 2.0 和 Web 3.0 之间的比较 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>了解前端的发展历史有助于从一个全局的视角来重新认知前端技术，脱离单独某一种视角的窠臼。</p>\n<ul>\n<li><code>Node.js</code>的出现意味着什么？</li>\n<li>为什么要从<code>jquery</code>转入三大框架？</li>\n<li>既然已经有了<code>javascript</code>为什么还要使用<code>babel</code>来转化？</li>\n<li><code>CommonJS</code>、<code>AMD</code>、<code>CMD</code>、<code>ESModule</code>又是什么？</li>\n</ul>\n<p>类似的问题不胜枚举，而这篇文章有助于解决此类问题。</p>\n<h2 id=\"1-需求驱动和问题驱动\"><a href=\"#1-需求驱动和问题驱动\" class=\"headerlink\" title=\"1.需求驱动和问题驱动\"></a>1.需求驱动和问题驱动</h2><p>一种技术能够出现并且不断的发展，一定具有某种内在的驱动力，我认为这种驱动力存在两种：</p>\n<ol>\n<li>需求驱动</li>\n<li>问题驱动</li>\n</ol>\n<p>需求驱动顾名思义就是当前的技术工具支持不了新的需求，所以推动了新技术的产生。而问题驱动则是实现某种需求的过程中产生了困难，老旧的技术工具解决不了或者解决起来很麻烦困难，所以推动了新技术的产生。</p>\n<h2 id=\"2-前端大事件的时间节点\"><a href=\"#2-前端大事件的时间节点\" class=\"headerlink\" title=\"2.前端大事件的时间节点\"></a>2.前端大事件的时间节点</h2><table>\n<thead>\n<tr>\n<th align=\"left\">时间</th>\n<th align=\"left\">事件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>web1.0 1991~2004</code></td>\n<td align=\"left\">只读网络，网站提供内容，用户阅读内容</td>\n</tr>\n<tr>\n<td align=\"left\">1989年</td>\n<td align=\"left\"><code>HTML</code>由Web的发明者Tim Berners-Lee创立，这也是前端的起始</td>\n</tr>\n<tr>\n<td align=\"left\">1994年</td>\n<td align=\"left\">世界上的第一款浏览器<code>NCSAMosaic</code>由Netscape（网景）公司开发,同年<code>W3C</code>（世界万维网联盟）成立</td>\n</tr>\n<tr>\n<td align=\"left\">1995年</td>\n<td align=\"left\"><code>JavaScript</code>由网景公司的Brendan Eich设计</td>\n</tr>\n<tr>\n<td align=\"left\">1996年</td>\n<td align=\"left\">W3C发布了<code>CSS1</code>标准，从此前端有了样式规范</td>\n</tr>\n<tr>\n<td align=\"left\">1997年</td>\n<td align=\"left\"><code>ECMAScript1</code>由ECMA国际正式发布，从此Javascript有了自己的标准，同年W3C发布了<code>HTML4.0</code>标准，这是使用时间最长的一个版本</td>\n</tr>\n<tr>\n<td align=\"left\">1998年</td>\n<td align=\"left\">W3C发布了<code>XML(可扩展标记语言)</code>标准，同年<code>Ajax</code>（异步Javascript和XML）技术开始得到应用</td>\n</tr>\n<tr>\n<td align=\"left\">2001年</td>\n<td align=\"left\">Douglas Crockford开始推广使用<code>JSON</code>数据格式，它比XML更加简洁清晰</td>\n</tr>\n<tr>\n<td align=\"left\"><code>web2.0 2004~至今</code></td>\n<td align=\"left\">交互网络，用户产生内容，通过网站与他人交互</td>\n</tr>\n<tr>\n<td align=\"left\">2006年</td>\n<td align=\"left\">John Resig发布了<code>JQuery</code>的第一个版本，这是迄今为止最成功的JS库，同年W3C正式发布<code>XMLHttpRequest</code>标准，为以后的Ajax爆发提供技术基础。</td>\n</tr>\n<tr>\n<td align=\"left\">2008年</td>\n<td align=\"left\">Google开源了高性能的Javascript引擎<code>V8</code></td>\n</tr>\n<tr>\n<td align=\"left\">2009年</td>\n<td align=\"left\">Ryan Dahl开发了基于V8引擎的<code>NodeJS</code>运行时环境，从此javascript可以运行在服务端；同年<code>ECMAScript5</code>发布，这是使用时间最长，各个浏览器兼容性最好，如今大部分程序也依然在使用的一代标准；同年Miško Hevery创造了<code>AngularJS</code>框架，基于MVC模式，并且实现了SPA（单页面应用）</td>\n</tr>\n<tr>\n<td align=\"left\">2010年</td>\n<td align=\"left\"><code>NPM</code>（NodeJS包管理工具）发布了第一个版本，从此前端有了自己的包管理器</td>\n</tr>\n<tr>\n<td align=\"left\">2011年</td>\n<td align=\"left\">Twitter开源了其前端框架<code>Bootstrap</code></td>\n</tr>\n<tr>\n<td align=\"left\">2012年</td>\n<td align=\"left\">微软发布了<code>Typescript</code>的第一个版本，让Javascript拥有了自己的类型</td>\n</tr>\n<tr>\n<td align=\"left\">2013年</td>\n<td align=\"left\">Facebook开源了其前端框架<code>React</code>，同年尤雨溪受到Angular启发开发了轻量级前端框架<code>Seed</code>，后更名为<code>Vue</code></td>\n</tr>\n<tr>\n<td align=\"left\">2014年</td>\n<td align=\"left\">W3C发布了<code>HTML5</code>标准</td>\n</tr>\n<tr>\n<td align=\"left\">2015年</td>\n<td align=\"left\"><code>ECMAScript6</code>正式发布，后更名为<code>ECMAScript2015</code>，之截至目前2022年，每年都发布了对应的新版本</td>\n</tr>\n<tr>\n<td align=\"left\">2016年</td>\n<td align=\"left\"><code>ECMAScript2016</code>正式发布</td>\n</tr>\n<tr>\n<td align=\"left\">2017年</td>\n<td align=\"left\"><code>ECMAScript2017</code>正式发布</td>\n</tr>\n</tbody></table>\n<h2 id=\"一些技术发展过程的梳理\"><a href=\"#一些技术发展过程的梳理\" class=\"headerlink\" title=\"一些技术发展过程的梳理\"></a>一些技术发展过程的梳理</h2><p>可以把前端发展的历程分为</p>\n<h2 id=\"展望未来\"><a href=\"#展望未来\" class=\"headerlink\" title=\"展望未来\"></a>展望未来</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>百度百科</li>\n<li><a class=\"link\"   href=\"http://www.javashuo.com/article/p-hvrlfhxo-gc.html\" >前端的历史发展节点 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/196637639\" >Web开发的历史发展技术演变 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://blog.csdn.net/qq_44273429/article/details/127462439\" >Web 1.0、Web 2.0 和 Web 3.0 之间的比较 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n"},{"title":"【Vue3 源码学习】01，从 createApp() 方法开始","date":"2022-06-03T02:56:48.000Z","_content":"\n\n![s0](./vueSourceCodeStudy01/s0.jpg)\nPS: 这是一张很有用的图\n\n## 前言：怎样学习源码？\n1. 有主线，两种方式\n   1. 从入口入手，package.json-->\n   2. 从逻辑入手，createApp()\n2. 提出一个问题，在源码中找答案\n3. 学习一步整理一步，然后复盘复习（画图）\n4. 有所掌握后造轮子实践\n5. 写博客或者做视频，在知识分享中巩固知识\n\n## 首先提几个问题\n- 第一个问题：app 实例如何创建？\n- 第二个问题：app 实例中有些什么？\n\n## 第一个问题：app 实例如何创建？\n![s1-1](./vueSourceCodeStudy01/s1-1.png)\n![s1-2](./vueSourceCodeStudy01/s1-2.png)\ncreateApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。\n![s1-3](./vueSourceCodeStudy01/s1-3.png) \n查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。\n![s1-4](./vueSourceCodeStudy01/s1-4.png)\n![s1-5](./vueSourceCodeStudy01/s1-5.png)\n\n## 第二个问题：app 实例中有些什么？\n在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上\n![s1-6](./vueSourceCodeStudy01/s1-6.png)\n\n## 一些思考\n可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化\n```javascript\nimport myComponent from './vueSourceCodeStudy01/myComponent';\nimport myPlugin from './myPlugin';\n\n// vue2\nVue.component('myComponent',myComponent);\nVue.use(myPlugin);\n\n// vue3\ncreateApp({...}).coponent(myComponent).use(myPlugin).mount('#app')\n```\n这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。","source":"_posts/vueSourceCodeStudy01.md","raw":"---\ntitle: 【Vue3 源码学习】01，从 createApp() 方法开始\ndate: 2022-06-03 10:56:48\ntags: [vue]\ncategories: [源码]\n---\n\n\n![s0](./vueSourceCodeStudy01/s0.jpg)\nPS: 这是一张很有用的图\n\n## 前言：怎样学习源码？\n1. 有主线，两种方式\n   1. 从入口入手，package.json-->\n   2. 从逻辑入手，createApp()\n2. 提出一个问题，在源码中找答案\n3. 学习一步整理一步，然后复盘复习（画图）\n4. 有所掌握后造轮子实践\n5. 写博客或者做视频，在知识分享中巩固知识\n\n## 首先提几个问题\n- 第一个问题：app 实例如何创建？\n- 第二个问题：app 实例中有些什么？\n\n## 第一个问题：app 实例如何创建？\n![s1-1](./vueSourceCodeStudy01/s1-1.png)\n![s1-2](./vueSourceCodeStudy01/s1-2.png)\ncreateApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。\n![s1-3](./vueSourceCodeStudy01/s1-3.png) \n查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。\n![s1-4](./vueSourceCodeStudy01/s1-4.png)\n![s1-5](./vueSourceCodeStudy01/s1-5.png)\n\n## 第二个问题：app 实例中有些什么？\n在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上\n![s1-6](./vueSourceCodeStudy01/s1-6.png)\n\n## 一些思考\n可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化\n```javascript\nimport myComponent from './vueSourceCodeStudy01/myComponent';\nimport myPlugin from './myPlugin';\n\n// vue2\nVue.component('myComponent',myComponent);\nVue.use(myPlugin);\n\n// vue3\ncreateApp({...}).coponent(myComponent).use(myPlugin).mount('#app')\n```\n这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。","slug":"vueSourceCodeStudy01","published":1,"updated":"2023-02-09T18:43:40.042Z","_id":"cldxg73wv00008oh80xebf9sr","comments":1,"layout":"post","photos":[],"link":"","content":"<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s0.jpg\"\n                      class=\"\" title=\"s0\"\n                >\n<p>PS: 这是一张很有用的图</p>\n<h2 id=\"前言：怎样学习源码？\"><a href=\"#前言：怎样学习源码？\" class=\"headerlink\" title=\"前言：怎样学习源码？\"></a>前言：怎样学习源码？</h2><ol>\n<li>有主线，两种方式<ol>\n<li>从入口入手，package.json–&gt;</li>\n<li>从逻辑入手，createApp()</li>\n</ol>\n</li>\n<li>提出一个问题，在源码中找答案</li>\n<li>学习一步整理一步，然后复盘复习（画图）</li>\n<li>有所掌握后造轮子实践</li>\n<li>写博客或者做视频，在知识分享中巩固知识</li>\n</ol>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ul>\n<li>第一个问题：app 实例如何创建？</li>\n<li>第二个问题：app 实例中有些什么？</li>\n</ul>\n<h2 id=\"第一个问题：app-实例如何创建？\"><a href=\"#第一个问题：app-实例如何创建？\" class=\"headerlink\" title=\"第一个问题：app 实例如何创建？\"></a>第一个问题：app 实例如何创建？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-1.png\"\n                      class=\"\" title=\"s1-1\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-2.png\"\n                      class=\"\" title=\"s1-2\"\n                >\n<p>createApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-3.png\"\n                      class=\"\" title=\"s1-3\"\n                > \n<p>查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-4.png\"\n                      class=\"\" title=\"s1-4\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-5.png\"\n                      class=\"\" title=\"s1-5\"\n                >\n\n<h2 id=\"第二个问题：app-实例中有些什么？\"><a href=\"#第二个问题：app-实例中有些什么？\" class=\"headerlink\" title=\"第二个问题：app 实例中有些什么？\"></a>第二个问题：app 实例中有些什么？</h2><p>在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-6.png\"\n                      class=\"\" title=\"s1-6\"\n                >\n\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><p>可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myComponent <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./vueSourceCodeStudy01/myComponent&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> myPlugin <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myPlugin&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue2</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;myComponent&#x27;</span>,myComponent);</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(myPlugin);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue3</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;...&#125;).<span class=\"title function_\">coponent</span>(myComponent).<span class=\"title function_\">use</span>(myPlugin).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n<p>这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。</p>\n","site":{"data":{}},"excerpt":"","more":"<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s0.jpg\"\n                      class=\"\" title=\"s0\"\n                >\n<p>PS: 这是一张很有用的图</p>\n<h2 id=\"前言：怎样学习源码？\"><a href=\"#前言：怎样学习源码？\" class=\"headerlink\" title=\"前言：怎样学习源码？\"></a>前言：怎样学习源码？</h2><ol>\n<li>有主线，两种方式<ol>\n<li>从入口入手，package.json–&gt;</li>\n<li>从逻辑入手，createApp()</li>\n</ol>\n</li>\n<li>提出一个问题，在源码中找答案</li>\n<li>学习一步整理一步，然后复盘复习（画图）</li>\n<li>有所掌握后造轮子实践</li>\n<li>写博客或者做视频，在知识分享中巩固知识</li>\n</ol>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ul>\n<li>第一个问题：app 实例如何创建？</li>\n<li>第二个问题：app 实例中有些什么？</li>\n</ul>\n<h2 id=\"第一个问题：app-实例如何创建？\"><a href=\"#第一个问题：app-实例如何创建？\" class=\"headerlink\" title=\"第一个问题：app 实例如何创建？\"></a>第一个问题：app 实例如何创建？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-1.png\"\n                      class=\"\" title=\"s1-1\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-2.png\"\n                      class=\"\" title=\"s1-2\"\n                >\n<p>createApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-3.png\"\n                      class=\"\" title=\"s1-3\"\n                > \n<p>查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-4.png\"\n                      class=\"\" title=\"s1-4\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-5.png\"\n                      class=\"\" title=\"s1-5\"\n                >\n\n<h2 id=\"第二个问题：app-实例中有些什么？\"><a href=\"#第二个问题：app-实例中有些什么？\" class=\"headerlink\" title=\"第二个问题：app 实例中有些什么？\"></a>第二个问题：app 实例中有些什么？</h2><p>在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-6.png\"\n                      class=\"\" title=\"s1-6\"\n                >\n\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><p>可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myComponent <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./vueSourceCodeStudy01/myComponent&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> myPlugin <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myPlugin&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue2</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;myComponent&#x27;</span>,myComponent);</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(myPlugin);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue3</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;...&#125;).<span class=\"title function_\">coponent</span>(myComponent).<span class=\"title function_\">use</span>(myPlugin).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。</p>\n"},{"title":"【一些有趣的问题】02，作用域与闭包","date":"2021-02-25T01:30:54.000Z","_content":"\n## 问题1\n`以下语句会如何输出？`\n```javascript\nfor(var i=0;i<5;i++){\n    console.log('i',i)\n    setTimeout(function(){\n        console.log(i);\n    },1000)\n}\n```\n`结果`：![结果](./someInterestingQuestions01/q1.png)\n\n`原因`：异步代码会在同步代码执行完毕后执行\n\n`分析`：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了5\n\n**解决方案一：**\n```javascript\nfor(var i=0;i<5;i++){\n    (function(i){\n        setTimeout(function(){\n            console.log(i);\n        },1000)\n    })(i)\n}\n```\n` 结果`：1秒后连续打印 0 1 2 3 4 \n\n`原因`：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为5\n\n**解决方案二：**\n```javascript\nfor(let i=0;i<5;i++){\n  setTimeourt(function(){\n    console.log(i);\n  },1000)\n}\n```\n`结果`：1秒后连续打印 0 1 2 3 4\n\n`原因`：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。\n\n---\n\n## 问题2\n```javascript\nfunction Foo() {\n    var i = 0;\n    return function() {\n        console.log(i++);\n    }\n}\n\nvar f1 = Foo(),\n    f2 = Foo();\nf1();\nf1();\nf2();\n```\n`结果`：![结果](./someInterestingQuestions01/q2.png)\n\n`原因`：\n\n第一次调用函数f1()：打印 0，创建闭包，此时局部变量i=1；\n\n第二次调用函数f1()：打印 1，创建闭包，此时局部变量i=2；\n\n第一次调用函数f2()：打印 0，因为函数f1、f2指向不同对象。\n\n--- \n## 问题3\n```javascript\nfunction Foo() {\n  // 类变量a\n  Foo.a = function () {\n    console.log(1);\n  }\n  // 实例变量a，每个实例都有一个\n  this.a = function () {\n    console.log(2);\n  }\n}\n// 实例变量a，所有实例共享一个\nFoo.prototype.a = function () {\n  console.log(3);\n}\n// 类变量a\nFoo.a = function () {\n  console.log(4);\n}\n\nFoo.a();\nlet obj = new Foo();\nobj.a();\nFoo.a();\n```\n`结果`：![结果](./someInterestingQuestions01/q3.png)\n\n`原因`：\n\n打印4：一开始Foo方法并未调用，输出的是函数体外的变量a，此时可以把Foo当作对象，Foo.a为其对象属性。\n\n打印2：使用new操作符实例化Foo后，obj.a首先查找obj上的标识符a，如果找不到的话沿着原型链向上查找，也找不到的话返回undefined。\n\n打印1：此时Foo方法已经调用，方法体内的类变量a覆盖原来已经赋值的类变量a。\n","source":"_posts/someInterestingQuestions01.md","raw":"---\ntitle: 【一些有趣的问题】02，作用域与闭包\ndate: 2021-02-25 9:30:54\ntags: [JS]\ncategories: [一些有趣的问题]\n---\n\n## 问题1\n`以下语句会如何输出？`\n```javascript\nfor(var i=0;i<5;i++){\n    console.log('i',i)\n    setTimeout(function(){\n        console.log(i);\n    },1000)\n}\n```\n`结果`：![结果](./someInterestingQuestions01/q1.png)\n\n`原因`：异步代码会在同步代码执行完毕后执行\n\n`分析`：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了5\n\n**解决方案一：**\n```javascript\nfor(var i=0;i<5;i++){\n    (function(i){\n        setTimeout(function(){\n            console.log(i);\n        },1000)\n    })(i)\n}\n```\n` 结果`：1秒后连续打印 0 1 2 3 4 \n\n`原因`：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为5\n\n**解决方案二：**\n```javascript\nfor(let i=0;i<5;i++){\n  setTimeourt(function(){\n    console.log(i);\n  },1000)\n}\n```\n`结果`：1秒后连续打印 0 1 2 3 4\n\n`原因`：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。\n\n---\n\n## 问题2\n```javascript\nfunction Foo() {\n    var i = 0;\n    return function() {\n        console.log(i++);\n    }\n}\n\nvar f1 = Foo(),\n    f2 = Foo();\nf1();\nf1();\nf2();\n```\n`结果`：![结果](./someInterestingQuestions01/q2.png)\n\n`原因`：\n\n第一次调用函数f1()：打印 0，创建闭包，此时局部变量i=1；\n\n第二次调用函数f1()：打印 1，创建闭包，此时局部变量i=2；\n\n第一次调用函数f2()：打印 0，因为函数f1、f2指向不同对象。\n\n--- \n## 问题3\n```javascript\nfunction Foo() {\n  // 类变量a\n  Foo.a = function () {\n    console.log(1);\n  }\n  // 实例变量a，每个实例都有一个\n  this.a = function () {\n    console.log(2);\n  }\n}\n// 实例变量a，所有实例共享一个\nFoo.prototype.a = function () {\n  console.log(3);\n}\n// 类变量a\nFoo.a = function () {\n  console.log(4);\n}\n\nFoo.a();\nlet obj = new Foo();\nobj.a();\nFoo.a();\n```\n`结果`：![结果](./someInterestingQuestions01/q3.png)\n\n`原因`：\n\n打印4：一开始Foo方法并未调用，输出的是函数体外的变量a，此时可以把Foo当作对象，Foo.a为其对象属性。\n\n打印2：使用new操作符实例化Foo后，obj.a首先查找obj上的标识符a，如果找不到的话沿着原型链向上查找，也找不到的话返回undefined。\n\n打印1：此时Foo方法已经调用，方法体内的类变量a覆盖原来已经赋值的类变量a。\n","slug":"someInterestingQuestions01","published":1,"updated":"2023-02-09T18:46:45.816Z","_id":"cldxg9ncg00038oh84z6z7fyt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h2><p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i&#x27;</span>,i)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/25/someInterestingQuestions01/q1.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：异步代码会在同步代码执行完毕后执行</p>\n<p><code>分析</code>：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了5</p>\n<p><strong>解决方案一：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code> 结果</code>：1秒后连续打印 0 1 2 3 4 </p>\n<p><code>原因</code>：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为5</p>\n<p><strong>解决方案二：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"title function_\">setTimeourt</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：1秒后连续打印 0 1 2 3 4</p>\n<p><code>原因</code>：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</p>\n<hr>\n<h2 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h2><div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"title class_\">Foo</span>(),</span><br><span class=\"line\">    f2 = <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"title function_\">f1</span>();</span><br><span class=\"line\"><span class=\"title function_\">f1</span>();</span><br><span class=\"line\"><span class=\"title function_\">f2</span>();</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/25/someInterestingQuestions01/q2.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>第一次调用函数f1()：打印 0，创建闭包，此时局部变量i&#x3D;1；</p>\n<p>第二次调用函数f1()：打印 1，创建闭包，此时局部变量i&#x3D;2；</p>\n<p>第一次调用函数f2()：打印 0，因为函数f1、f2指向不同对象。</p>\n<hr>\n<h2 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h2><div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 类变量a</span></span><br><span class=\"line\">  <span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 实例变量a，每个实例都有一个</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例变量a，所有实例共享一个</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类变量a</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/25/someInterestingQuestions01/q3.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>打印4：一开始Foo方法并未调用，输出的是函数体外的变量a，此时可以把Foo当作对象，Foo.a为其对象属性。</p>\n<p>打印2：使用new操作符实例化Foo后，obj.a首先查找obj上的标识符a，如果找不到的话沿着原型链向上查找，也找不到的话返回undefined。</p>\n<p>打印1：此时Foo方法已经调用，方法体内的类变量a覆盖原来已经赋值的类变量a。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h2><p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i&#x27;</span>,i)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/25/someInterestingQuestions01/q1.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：异步代码会在同步代码执行完毕后执行</p>\n<p><code>分析</code>：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了5</p>\n<p><strong>解决方案一：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code> 结果</code>：1秒后连续打印 0 1 2 3 4 </p>\n<p><code>原因</code>：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为5</p>\n<p><strong>解决方案二：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"title function_\">setTimeourt</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：1秒后连续打印 0 1 2 3 4</p>\n<p><code>原因</code>：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</p>\n<hr>\n<h2 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"title class_\">Foo</span>(),</span><br><span class=\"line\">    f2 = <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"title function_\">f1</span>();</span><br><span class=\"line\"><span class=\"title function_\">f1</span>();</span><br><span class=\"line\"><span class=\"title function_\">f2</span>();</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/25/someInterestingQuestions01/q2.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>第一次调用函数f1()：打印 0，创建闭包，此时局部变量i&#x3D;1；</p>\n<p>第二次调用函数f1()：打印 1，创建闭包，此时局部变量i&#x3D;2；</p>\n<p>第一次调用函数f2()：打印 0，因为函数f1、f2指向不同对象。</p>\n<hr>\n<h2 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 类变量a</span></span><br><span class=\"line\">  <span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 实例变量a，每个实例都有一个</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例变量a，所有实例共享一个</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类变量a</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/25/someInterestingQuestions01/q3.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>打印4：一开始Foo方法并未调用，输出的是函数体外的变量a，此时可以把Foo当作对象，Foo.a为其对象属性。</p>\n<p>打印2：使用new操作符实例化Foo后，obj.a首先查找obj上的标识符a，如果找不到的话沿着原型链向上查找，也找不到的话返回undefined。</p>\n<p>打印1：此时Foo方法已经调用，方法体内的类变量a覆盖原来已经赋值的类变量a。</p>\n"},{"title":"【一些有趣的问题】01，事件循环","date":"2021-02-23T02:15:54.000Z","_content":"\n`以下语句会如何输出？`\n```javascript\nconsole.log('start')\n\nsetTimeout(() => {\n  console.log('setTimeout')\n}, 0)\n\nnew Promise((resolve) => {\n  console.log('promise')\n  resolve()\n})\n  .then(() => {\n    console.log('then1')\n  })\n  .then(() => {\n    console.log('then2')\n  })\n\nconsole.log('end')\n```\n\n结果：打印 start promise end then1 then2 setTimeout\n\n原因：简单来说，JS代码的执行顺序为：同步代码-->异步代码（微任务-->宏任务）\n\n分析：\n\n1. 打印start\n\n2. setTimeout 加入消息队列\n\n3. new Promise 的同步部分执行，打印promise，then 部分加入消息队列\n\n4. 打印end\n\n5. 消息队列中先处理微任务 then 的部分，打印then1，then2\n\n6. 消息队列处理宏任务 setTimeout，打印setTimeout\n\n## `参考资料`\n> [并发模型与事件循环](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n>\n> [深入理解js事件循环机制（浏览器篇）](http://lynnelv.github.io/js-event-loop-browser)\n","source":"_posts/someInterestingQuestions02.md","raw":"---\ntitle: 【一些有趣的问题】01，事件循环\ndate: 2021-02-23 10:15:54\ntags: [JS]\ncategories: [一些有趣的问题]\n---\n\n`以下语句会如何输出？`\n```javascript\nconsole.log('start')\n\nsetTimeout(() => {\n  console.log('setTimeout')\n}, 0)\n\nnew Promise((resolve) => {\n  console.log('promise')\n  resolve()\n})\n  .then(() => {\n    console.log('then1')\n  })\n  .then(() => {\n    console.log('then2')\n  })\n\nconsole.log('end')\n```\n\n结果：打印 start promise end then1 then2 setTimeout\n\n原因：简单来说，JS代码的执行顺序为：同步代码-->异步代码（微任务-->宏任务）\n\n分析：\n\n1. 打印start\n\n2. setTimeout 加入消息队列\n\n3. new Promise 的同步部分执行，打印promise，then 部分加入消息队列\n\n4. 打印end\n\n5. 消息队列中先处理微任务 then 的部分，打印then1，then2\n\n6. 消息队列处理宏任务 setTimeout，打印setTimeout\n\n## `参考资料`\n> [并发模型与事件循环](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n>\n> [深入理解js事件循环机制（浏览器篇）](http://lynnelv.github.io/js-event-loop-browser)\n","slug":"someInterestingQuestions02","published":1,"updated":"2023-02-09T18:46:55.344Z","_id":"cldxg9tbv00068oh84814779x","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then1&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then2&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>结果：打印 start promise end then1 then2 setTimeout</p>\n<p>原因：简单来说，JS代码的执行顺序为：同步代码–&gt;异步代码（微任务–&gt;宏任务）</p>\n<p>分析：</p>\n<ol>\n<li><p>打印start</p>\n</li>\n<li><p>setTimeout 加入消息队列</p>\n</li>\n<li><p>new Promise 的同步部分执行，打印promise，then 部分加入消息队列</p>\n</li>\n<li><p>打印end</p>\n</li>\n<li><p>消息队列中先处理微任务 then 的部分，打印then1，then2</p>\n</li>\n<li><p>消息队列处理宏任务 setTimeout，打印setTimeout</p>\n</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><blockquote>\n<p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" >并发模型与事件循环 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"http://lynnelv.github.io/js-event-loop-browser\" >深入理解js事件循环机制（浏览器篇） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then1&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then2&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>结果：打印 start promise end then1 then2 setTimeout</p>\n<p>原因：简单来说，JS代码的执行顺序为：同步代码–&gt;异步代码（微任务–&gt;宏任务）</p>\n<p>分析：</p>\n<ol>\n<li><p>打印start</p>\n</li>\n<li><p>setTimeout 加入消息队列</p>\n</li>\n<li><p>new Promise 的同步部分执行，打印promise，then 部分加入消息队列</p>\n</li>\n<li><p>打印end</p>\n</li>\n<li><p>消息队列中先处理微任务 then 的部分，打印then1，then2</p>\n</li>\n<li><p>消息队列处理宏任务 setTimeout，打印setTimeout</p>\n</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><blockquote>\n<p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" >并发模型与事件循环 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"http://lynnelv.github.io/js-event-loop-browser\" >深入理解js事件循环机制（浏览器篇） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n"},{"title":"【Vue3 源码学习】02，初始 mount() 方法","date":"2022-06-03T02:56:48.000Z","_content":"\n## 前言\n书接上回，在 runtime-core 包下的文件`/runtime-core/src/apiCreateApp.ts`中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，`mount()`就在其中。\n\n## 首先提几个问题\n1. 初次挂载时 mount() 方法做了些什么？ \n2. 回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？\n![s2-0](./vueSourceCodeStudy02/s0.png)\n\n## 初次挂载时 mount() 方法干了些什么？\n![s2-1](./vueSourceCodeStudy02/s2-1.png)\n\n首先进入 mount() 方法，它接收 3 个参数：`rootContainer`，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：\n```javascript\n// 可以看到我们只传了一个字符串，是一个 CSS 选择器。\ncreateApp({}).mount('#app')\n```\n\n再看方法体：\n![s2-2](./vueSourceCodeStudy02/s2-2.png)\n\n可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。\n\n让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在`/runtime-core/src/renderer.ts`目录下可以找到。\n![s2-3](./vueSourceCodeStudy02/s2-3.png)\n\n![s2-4](./vueSourceCodeStudy02/s2-4.png)\n\n接下来找到 render() 方法的方法体：\n![s2-5](./vueSourceCodeStudy02/s2-5.png)\n\n可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个`patch()`方法\n\n我们来看一下这个 patch() 方法中传了些什么：\n![s2-6](./vueSourceCodeStudy02/s2-6.png)\n\n可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向`div#app`，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：\n![s2-7](./vueSourceCodeStudy02/s2-7.png)\n\n之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：\n![s2-8](./vueSourceCodeStudy02/s2-8.png)\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据`type`和`shapeFlag`的值进行不同的操作：\n![s2-10](./vueSourceCodeStudy02/s2-10.png)\n\n此时 shapeFlag 的值为 4，进行位与运算值为 true。以下`位移枚举`可以学一下，它的好处是清晰、好计算并且可以进行多值判断。\n![s2-11](./vueSourceCodeStudy02/s2-11.png)\n\n初次挂载时执行`processComponent()`方法，进入方法体 processComponent()：\n![s2-12](./vueSourceCodeStudy02/s2-12.png)\n\n可以看到走进 else 代码块，触发方法`mountComponent()`，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个`setupRenderEffect()`方法，\n![s2-13](./vueSourceCodeStudy02/s2-13.png)\n\n这个方法创建了一个执行器 `effect`，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。\n\n## 总结\n\n总结一下，初次挂载时 mount() 方法执行流程大概这样：\n\nmount()-->createVNode()-->render()-->patch()-->processComponent()-->mountComponent()-->createComponentInstance-->setupRenderEffect()-->ReactiveEffect()-->update()-->effect.run()\n\n简洁一点就是：\n\nmount()-->render()-->patch()\n\n可以通过调用堆栈查看：\n![s2-14](./vueSourceCodeStudy02/s2-14.png)\n\n回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：\n![s2-15](./vueSourceCodeStudy02/s2-15.png)\n\n本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析render() 和 patch() 函数。\n\n若有错误请大佬指出，感激不尽。\n","source":"_posts/vueSourceCodeStudy02.md","raw":"---\ntitle: 【Vue3 源码学习】02，初始 mount() 方法\ndate: 2022-06-03 10:56:48\ntags: [vue]\ncategories: [源码]\n---\n\n## 前言\n书接上回，在 runtime-core 包下的文件`/runtime-core/src/apiCreateApp.ts`中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，`mount()`就在其中。\n\n## 首先提几个问题\n1. 初次挂载时 mount() 方法做了些什么？ \n2. 回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？\n![s2-0](./vueSourceCodeStudy02/s0.png)\n\n## 初次挂载时 mount() 方法干了些什么？\n![s2-1](./vueSourceCodeStudy02/s2-1.png)\n\n首先进入 mount() 方法，它接收 3 个参数：`rootContainer`，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：\n```javascript\n// 可以看到我们只传了一个字符串，是一个 CSS 选择器。\ncreateApp({}).mount('#app')\n```\n\n再看方法体：\n![s2-2](./vueSourceCodeStudy02/s2-2.png)\n\n可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。\n\n让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在`/runtime-core/src/renderer.ts`目录下可以找到。\n![s2-3](./vueSourceCodeStudy02/s2-3.png)\n\n![s2-4](./vueSourceCodeStudy02/s2-4.png)\n\n接下来找到 render() 方法的方法体：\n![s2-5](./vueSourceCodeStudy02/s2-5.png)\n\n可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个`patch()`方法\n\n我们来看一下这个 patch() 方法中传了些什么：\n![s2-6](./vueSourceCodeStudy02/s2-6.png)\n\n可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向`div#app`，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：\n![s2-7](./vueSourceCodeStudy02/s2-7.png)\n\n之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：\n![s2-8](./vueSourceCodeStudy02/s2-8.png)\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据`type`和`shapeFlag`的值进行不同的操作：\n![s2-10](./vueSourceCodeStudy02/s2-10.png)\n\n此时 shapeFlag 的值为 4，进行位与运算值为 true。以下`位移枚举`可以学一下，它的好处是清晰、好计算并且可以进行多值判断。\n![s2-11](./vueSourceCodeStudy02/s2-11.png)\n\n初次挂载时执行`processComponent()`方法，进入方法体 processComponent()：\n![s2-12](./vueSourceCodeStudy02/s2-12.png)\n\n可以看到走进 else 代码块，触发方法`mountComponent()`，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个`setupRenderEffect()`方法，\n![s2-13](./vueSourceCodeStudy02/s2-13.png)\n\n这个方法创建了一个执行器 `effect`，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。\n\n## 总结\n\n总结一下，初次挂载时 mount() 方法执行流程大概这样：\n\nmount()-->createVNode()-->render()-->patch()-->processComponent()-->mountComponent()-->createComponentInstance-->setupRenderEffect()-->ReactiveEffect()-->update()-->effect.run()\n\n简洁一点就是：\n\nmount()-->render()-->patch()\n\n可以通过调用堆栈查看：\n![s2-14](./vueSourceCodeStudy02/s2-14.png)\n\n回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：\n![s2-15](./vueSourceCodeStudy02/s2-15.png)\n\n本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析render() 和 patch() 函数。\n\n若有错误请大佬指出，感激不尽。\n","slug":"vueSourceCodeStudy02","published":1,"updated":"2023-02-13T18:54:19.464Z","_id":"cle2qqmn20000voh847j4fwuq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>书接上回，在 runtime-core 包下的文件<code>/runtime-core/src/apiCreateApp.ts</code>中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，<code>mount()</code>就在其中。</p>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ol>\n<li>初次挂载时 mount() 方法做了些什么？ </li>\n<li>回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s0.png\"\n                      class=\"\" title=\"s2-0\"\n                ></li>\n</ol>\n<h2 id=\"初次挂载时-mount-方法干了些什么？\"><a href=\"#初次挂载时-mount-方法干了些什么？\" class=\"headerlink\" title=\"初次挂载时 mount() 方法干了些什么？\"></a>初次挂载时 mount() 方法干了些什么？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-1.png\"\n                      class=\"\" title=\"s2-1\"\n                >\n\n<p>首先进入 mount() 方法，它接收 3 个参数：<code>rootContainer</code>，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以看到我们只传了一个字符串，是一个 CSS 选择器。</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;&#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>再看方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-2.png\"\n                      class=\"\" title=\"s2-2\"\n                >\n\n<p>可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。</p>\n<p>让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在<code>/runtime-core/src/renderer.ts</code>目录下可以找到。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-3.png\"\n                      class=\"\" title=\"s2-3\"\n                >\n\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-4.png\"\n                      class=\"\" title=\"s2-4\"\n                >\n\n<p>接下来找到 render() 方法的方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-5.png\"\n                      class=\"\" title=\"s2-5\"\n                >\n\n<p>可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个<code>patch()</code>方法</p>\n<p>我们来看一下这个 patch() 方法中传了些什么：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-6.png\"\n                      class=\"\" title=\"s2-6\"\n                >\n\n<p>可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向<code>div#app</code>，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-7.png\"\n                      class=\"\" title=\"s2-7\"\n                >\n\n<p>之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-8.png\"\n                      class=\"\" title=\"s2-8\"\n                >\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n<p>沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据<code>type</code>和<code>shapeFlag</code>的值进行不同的操作：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-10.png\"\n                      class=\"\" title=\"s2-10\"\n                >\n\n<p>此时 shapeFlag 的值为 4，进行位与运算值为 true。以下<code>位移枚举</code>可以学一下，它的好处是清晰、好计算并且可以进行多值判断。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-11.png\"\n                      class=\"\" title=\"s2-11\"\n                >\n\n<p>初次挂载时执行<code>processComponent()</code>方法，进入方法体 processComponent()：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-12.png\"\n                      class=\"\" title=\"s2-12\"\n                >\n\n<p>可以看到走进 else 代码块，触发方法<code>mountComponent()</code>，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个<code>setupRenderEffect()</code>方法，</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-13.png\"\n                      class=\"\" title=\"s2-13\"\n                >\n\n<p>这个方法创建了一个执行器 <code>effect</code>，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下，初次挂载时 mount() 方法执行流程大概这样：</p>\n<p>mount()–&gt;createVNode()–&gt;render()–&gt;patch()–&gt;processComponent()–&gt;mountComponent()–&gt;createComponentInstance–&gt;setupRenderEffect()–&gt;ReactiveEffect()–&gt;update()–&gt;effect.run()</p>\n<p>简洁一点就是：</p>\n<p>mount()–&gt;render()–&gt;patch()</p>\n<p>可以通过调用堆栈查看：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-14.png\"\n                      class=\"\" title=\"s2-14\"\n                >\n\n<p>回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-15.png\"\n                      class=\"\" title=\"s2-15\"\n                >\n\n<p>本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析render() 和 patch() 函数。</p>\n<p>若有错误请大佬指出，感激不尽。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>书接上回，在 runtime-core 包下的文件<code>/runtime-core/src/apiCreateApp.ts</code>中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，<code>mount()</code>就在其中。</p>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ol>\n<li>初次挂载时 mount() 方法做了些什么？ </li>\n<li>回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s0.png\"\n                      class=\"\" title=\"s2-0\"\n                ></li>\n</ol>\n<h2 id=\"初次挂载时-mount-方法干了些什么？\"><a href=\"#初次挂载时-mount-方法干了些什么？\" class=\"headerlink\" title=\"初次挂载时 mount() 方法干了些什么？\"></a>初次挂载时 mount() 方法干了些什么？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-1.png\"\n                      class=\"\" title=\"s2-1\"\n                >\n\n<p>首先进入 mount() 方法，它接收 3 个参数：<code>rootContainer</code>，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以看到我们只传了一个字符串，是一个 CSS 选择器。</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;&#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>再看方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-2.png\"\n                      class=\"\" title=\"s2-2\"\n                >\n\n<p>可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。</p>\n<p>让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在<code>/runtime-core/src/renderer.ts</code>目录下可以找到。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-3.png\"\n                      class=\"\" title=\"s2-3\"\n                >\n\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-4.png\"\n                      class=\"\" title=\"s2-4\"\n                >\n\n<p>接下来找到 render() 方法的方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-5.png\"\n                      class=\"\" title=\"s2-5\"\n                >\n\n<p>可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个<code>patch()</code>方法</p>\n<p>我们来看一下这个 patch() 方法中传了些什么：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-6.png\"\n                      class=\"\" title=\"s2-6\"\n                >\n\n<p>可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向<code>div#app</code>，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-7.png\"\n                      class=\"\" title=\"s2-7\"\n                >\n\n<p>之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-8.png\"\n                      class=\"\" title=\"s2-8\"\n                >\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n<p>沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据<code>type</code>和<code>shapeFlag</code>的值进行不同的操作：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-10.png\"\n                      class=\"\" title=\"s2-10\"\n                >\n\n<p>此时 shapeFlag 的值为 4，进行位与运算值为 true。以下<code>位移枚举</code>可以学一下，它的好处是清晰、好计算并且可以进行多值判断。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-11.png\"\n                      class=\"\" title=\"s2-11\"\n                >\n\n<p>初次挂载时执行<code>processComponent()</code>方法，进入方法体 processComponent()：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-12.png\"\n                      class=\"\" title=\"s2-12\"\n                >\n\n<p>可以看到走进 else 代码块，触发方法<code>mountComponent()</code>，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个<code>setupRenderEffect()</code>方法，</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-13.png\"\n                      class=\"\" title=\"s2-13\"\n                >\n\n<p>这个方法创建了一个执行器 <code>effect</code>，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下，初次挂载时 mount() 方法执行流程大概这样：</p>\n<p>mount()–&gt;createVNode()–&gt;render()–&gt;patch()–&gt;processComponent()–&gt;mountComponent()–&gt;createComponentInstance–&gt;setupRenderEffect()–&gt;ReactiveEffect()–&gt;update()–&gt;effect.run()</p>\n<p>简洁一点就是：</p>\n<p>mount()–&gt;render()–&gt;patch()</p>\n<p>可以通过调用堆栈查看：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-14.png\"\n                      class=\"\" title=\"s2-14\"\n                >\n\n<p>回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-15.png\"\n                      class=\"\" title=\"s2-15\"\n                >\n\n<p>本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析render() 和 patch() 函数。</p>\n<p>若有错误请大佬指出，感激不尽。</p>\n"}],"PostAsset":[{"_id":"source/_posts/vueSourceCodeStudy01/s0.jpg","slug":"s0.jpg","post":"cldxg73wv00008oh80xebf9sr","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-1.png","slug":"s1-1.png","post":"cldxg73wv00008oh80xebf9sr","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-2.png","slug":"s1-2.png","post":"cldxg73wv00008oh80xebf9sr","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-3.png","slug":"s1-3.png","post":"cldxg73wv00008oh80xebf9sr","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-4.png","slug":"s1-4.png","post":"cldxg73wv00008oh80xebf9sr","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-5.png","slug":"s1-5.png","post":"cldxg73wv00008oh80xebf9sr","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-6.png","slug":"s1-6.png","post":"cldxg73wv00008oh80xebf9sr","modified":0,"renderable":0},{"_id":"source/_posts/someInterestingQuestions01/q1.png","slug":"q1.png","post":"cldxg9ncg00038oh84z6z7fyt","modified":0,"renderable":0},{"_id":"source/_posts/someInterestingQuestions01/q2.png","slug":"q2.png","post":"cldxg9ncg00038oh84z6z7fyt","modified":0,"renderable":0},{"_id":"source/_posts/someInterestingQuestions01/q3.png","slug":"q3.png","post":"cldxg9ncg00038oh84z6z7fyt","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s0.png","slug":"s0.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-1.png","slug":"s2-1.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-10.png","slug":"s2-10.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-11.png","slug":"s2-11.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-12.png","slug":"s2-12.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-2.png","slug":"s2-2.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-3.png","slug":"s2-3.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-4.png","slug":"s2-4.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-5.png","slug":"s2-5.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-6.png","slug":"s2-6.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-7.png","slug":"s2-7.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-8.png","slug":"s2-8.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-9.png","slug":"s2-9.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-13.png","slug":"s2-13.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-14.png","slug":"s2-14.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-15.png","slug":"s2-15.png","post":"cle2qqmn20000voh847j4fwuq","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cldkn7zhu000078h82d4kbohk","category_id":"cldkkxqsy00038ch805rxbmc6","_id":"cldkn7zhw000178h8aqd42x3b"},{"post_id":"cldkn980y000278h8ge0p2u0y","category_id":"cldkn9elo000578h8glcnccri","_id":"cldkn9elo000678h891kad8ao"},{"post_id":"cldw0ovoo0001f8h8huat3rxa","category_id":"cldkkxqsy00038ch805rxbmc6","_id":"cldw0ovoq0003f8h8edst245e"},{"post_id":"cldxg73wv00008oh80xebf9sr","category_id":"cldxet1r60001agh8f9bf3gob","_id":"cldxg73wx00028oh84u4ehxun"},{"post_id":"cldxg9ncg00038oh84z6z7fyt","category_id":"cldkms5rp000420h88fixc09g","_id":"cldxg9nci00058oh86pq79ofp"},{"post_id":"cldxg9tbv00068oh84814779x","category_id":"cldkms5rp000420h88fixc09g","_id":"cldxg9tbw00088oh81b3d6ou0"},{"post_id":"cle2qqmn20000voh847j4fwuq","category_id":"cldxet1r60001agh8f9bf3gob","_id":"cle2qqmn40002voh8b18fbg4b"}],"PostTag":[{"post_id":"cldkn980y000278h8ge0p2u0y","tag_id":"cldkhlig00002lch819p3b8uj","_id":"cldkn980z000378h82jd259zc"},{"post_id":"cldkn7zhu000078h82d4kbohk","tag_id":"cldkhlig00002lch819p3b8uj","_id":"cldkn9pde000778h8fgnz4idd"},{"post_id":"cldw0ovoo0001f8h8huat3rxa","tag_id":"cldkhlig00002lch819p3b8uj","_id":"cldw0ovop0002f8h8cxvt5dkf"},{"post_id":"cldxg73wv00008oh80xebf9sr","tag_id":"cldxet1r80002agh87678cplc","_id":"cldxg73wx00018oh89hxl0wf2"},{"post_id":"cldxg9ncg00038oh84z6z7fyt","tag_id":"cldkhlig00002lch819p3b8uj","_id":"cldxg9nci00048oh8euuj0ri2"},{"post_id":"cldxg9tbv00068oh84814779x","tag_id":"cldkhlig00002lch819p3b8uj","_id":"cldxg9tbw00078oh87qu14ggg"},{"post_id":"cle2qqmn20000voh847j4fwuq","tag_id":"cldxet1r80002agh87678cplc","_id":"cle2qqmn40001voh8847d6h15"}],"Tag":[{"name":"javascript js","_id":"cldkhi8x5000164h8d7r4blqa"},{"name":"JS","_id":"cldkhlig00002lch819p3b8uj"},{"name":"一些有趣的问题","_id":"cldkms5rp000320h8apj0aphv"},{"name":"vue","_id":"cldxet1r80002agh87678cplc"}]}}