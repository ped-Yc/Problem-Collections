<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代码重构的一点心得</title>
    <url>/2023/02/01/%E3%80%90%E6%96%B9%E6%B3%95%E8%AE%BA%E3%80%91%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84%E7%9A%84%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h1 id="重构（Refactoring）"><a href="#重构（Refactoring）" class="headerlink" title="重构（Refactoring）"></a>重构（Refactoring）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直在做前端重构的工作，多少有些感想，特此记录。</p>
<p>首先，项目的历史太悠久了，AngularJS的项目，</p>
<h2 id="一、什么是重构？为什么要重构？重构要达成什么目标？"><a href="#一、什么是重构？为什么要重构？重构要达成什么目标？" class="headerlink" title="一、什么是重构？为什么要重构？重构要达成什么目标？"></a>一、什么是重构？为什么要重构？重构要达成什么目标？</h2><p><strong>什么是重构</strong></p>
<p>在<code>不改变代码外在行为</code>的前提下，对代码进行修改，以<code>改进程序的内部结构</code>。</p>
<p><strong>为什么要重构</strong></p>
<p>在软件工程中，开发迭代的过程实际上是一个熵增的过程，软件系统会随着生命周期的进行变得越来越臃肿、混乱、冗余，从而增加维护与进一步迭代的成本。而重构可以<code>偿还技术债务、改进软件结构、减小维护和迭代的成本、增加产品可信</code>。</p>
<p><strong>重构要达成什么目标？</strong></p>
<ol>
<li>系统结构重新梳理：旧系统在设计上可能有许多疏漏，由于经验的欠缺或者考虑不周到，这是难以避免的。新系统应该见贤思齐、查漏补缺，例如重新设计基类、文件结构和继承关系，争取让系统更加完善。</li>
<li>公共资源重新梳理：</li>
<li>业务需求重新梳理：</li>
</ol>
<h2 id="二、重构有哪些分类？什么时候重构？重构有哪些原则？"><a href="#二、重构有哪些分类？什么时候重构？重构有哪些原则？" class="headerlink" title="二、重构有哪些分类？什么时候重构？重构有哪些原则？"></a>二、重构有哪些分类？什么时候重构？重构有哪些原则？</h2><p><strong>重构有哪些分类？</strong></p>
<ul>
<li>小粒度重构（函数级、小模块）</li>
<li>大粒度重构（架构级、大模块）</li>
</ul>
<p><strong>什么时候重构？</strong></p>
<ul>
<li>新增需求时（小粒度）</li>
<li>修改BUG时（小粒度）</li>
<li>复审代码时（大粒度）</li>
<li>代码逻辑混乱、依赖混杂（大粒度）</li>
</ul>
<p><strong>重构有哪些原则？</strong></p>
<ul>
<li>先评审，再重构，不要反复推翻重来</li>
<li>确保模块的功能完整，否则不重构该模块</li>
<li>新增需求时，不要改动既有代码（小粒度）</li>
<li>重构既有代码时，不要新增功能（小粒度）</li>
</ul>
<h2 id="三、重构工作流程"><a href="#三、重构工作流程" class="headerlink" title="三、重构工作流程"></a>三、重构工作流程</h2><ol>
<li>前期准备，搭架子<ul>
<li>构建对应技术栈的文件结构、代码关系</li>
<li>整理公共资源、公共能力</li>
<li>整理业务需求，确保没有遗漏的需求</li>
</ul>
</li>
<li>前期准备，分需求、培训（主要涉及文件结构和公共资源）</li>
<li>开始重构 </li>
</ol>
]]></content>
      <categories>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS运行机制】JS执行流程</title>
    <url>/2023/02/01/%E3%80%90JS%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E3%80%91JS%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><code>前言</code></h2><p>&amp;emsp;&amp;emsp;<br>本文主要解释JS引擎在遇见script代码块时，从编译到执行具体经历了什么？为什么会产生变量提升？闭包的产生原理是什么?多个script代码块间是以什么顺序来执行的？为什么定义在不同代码块间的方法可以共通？通过本文都可以得到解答。</p>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><code>基础概念</code></h2><ul>
<li><p>JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。<br><code>解释型</code>：JS引擎在运行JS代码时，是利用解释器一边编译一边执行的。</p>
<p>如此便避免不了一种情况：某些代码多次重复的运行，例如 for循环，在编译型语言中，for循环块中的代码将以机器码执行多次；而在解释型语言中，for循环块中的代码将被解释多次并执行，如此便有了很大的耗损。</p>
<p><code>即时编译型</code>：于是JS引擎就加入了<code>JIT</code>（Just-in-time）进行编译优化，例如对重复语句和类型判断进行优化。</p>
</li>
<li><p>引擎、编译器与作用域<br>  引擎：从头到尾负责整个javascript程序的编译及执行过程。浏览器不同，其引擎也不同，比如Chrome采用的是v8，Safari采用的是SquirrelFish Extreme。</p>
<p>  编译器：编译过程主要分为”词法分析”、“语法分析”及“代码生成“。</p>
<blockquote>
</blockquote>
<p>  作用域（Scope）：根据名称查找变量的一套规则，用于管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。</p>
</li>
<li><p>执行上下文（Excution Context EC）&amp;&amp; 执行上下文栈（Excution Context Stack ECS）<br>  存在三种 EC：全局执行上下文  GlobalEC ，函数执行上下文  Function EC，Eval。</p>
<p>  ECS：引擎记录EC的容器，栈底是 GlobalEC ，只有在关闭页面时出栈；栈顶是当前正在执行的 EC ，函数执行完毕后出栈，并将执行权交给下一个 EC 。</p>
</li>
<li><p>变量对象（Variable Object）&amp;&amp; 活动对象（Activation Object）<br>  VO：EC中用来存储变量声明（必须是 var 关键字声明而不是 let 与 const）与函数声明（必须是显式声明而不是表达式）的容器。由引擎实现，不能访问到。</p>
<p>  AO：可以理解为VO的实例化，函数调用时在EC中被激活，成员属性能被访问。</p>
</li>
<li><p>LHS（Left Hand Side） &amp;&amp; RHS（Right Hand Side）<br>  LHS：赋值操作的目标。例如：a&#x3D;2; 是对 a 进行 LHS查询。</p>
<p>  RHS：赋值操作的源头。例如：console.log(a); 是对 a 进行 RHS查询。</p>
<blockquote>
</blockquote>
<p>  非严格模式下，LHS查询不到变量会在顶层作用域创建具有该名称的变量，RHS查询不到变量会报ReferenceError的异常；严格模式下禁止自动创建全局变量，两种查询方式失败均报ReferenceError的异常。</p>
</li>
</ul>
<h2 id="JS代码执行流程"><a href="#JS代码执行流程" class="headerlink" title="JS代码执行流程"></a><code>JS代码执行流程</code></h2><p>&amp;emsp;&amp;emsp;</p>
<ol>
<li>–&gt;进入script标签，【预编译】JS引擎创建全局EC，全局EC入栈</li>
<li>–&gt;【编译】JS解释器开始对代码逐行进行分词、语法分析、代码生成</li>
<li>–&gt;有错则抛出，终止执行；无错继续向下逐行执行</li>
<li>–&gt;【预编译】调用函数前，创建函数EC，EC入栈</li>
<li>–&gt;【编译】</li>
<li>–&gt;有错则抛出，终止执行；无错继续向下执行</li>
<li>–&gt;函数执行完毕，EC出栈</li>
<li>–&gt;继续以上步骤</li>
<li>–&gt;页面销毁，全局EC出栈，结束</li>
</ol>
<p><code>创建当前环境EC流程如下：</code></p>
<p>1、初始化作用域[[Scope]]，（拷贝传入的父执行上下文的Scope），数据结构应该是数组或者链表。</p>
<p>例如：[[Scope]] : AO1（当前）–&gt;VO（全局）</p>
<p>2、创建活动对象，创建完成之后，将活动对象推入作用域链的最前端：</p>
<p>例如：[[Scope]] : AO2（当前）–&gt;AO1（父级）–&gt;VO（全局）</p>
<p>2.1、创建arguments对象，检查上下文，初始化参数名称和值并创建引用的复制。（函数中存在）</p>
<p>2.2、创建形参，通过实参赋值。（函数中存在）</p>
<p>2.3、扫描上下文的函数声明（而非函数表达式）：</p>
<p>为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。函数声明比变量优先级要高，并且定义过程不会被变量覆盖，除非是赋值</p>
<p>2.4、扫描上下文的变量声明：</p>
<p>为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为undefined，如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。</p>
<p>3、求出上下文内部this的值。</p>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a><code>代码分析</code></h2><p>1、EC创建流程与变量提升</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;outer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`------------`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">22</span>);<span class="comment">// 对形参i的LHS查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">ƒ <span class="title function_">c</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">------------</span><br><span class="line">hello</span><br><span class="line">ƒ() &#123;&#125;</span><br><span class="line">ƒ <span class="title function_">c</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析</span></span><br><span class="line"><span class="comment">// 代码载入前，创建全局EC的伪代码</span></span><br><span class="line"><span class="title class_">GlobalEC</span> : &#123;</span><br><span class="line">    [[<span class="title class_">Scope</span>]] : [&#123;<span class="variable constant_">VO</span>&#125;],</span><br><span class="line">    <span class="variable constant_">VO</span> : &#123;</span><br><span class="line">        foo : fnFoo,<span class="comment">// 函数声明优先，指向函数Foo的引用</span></span><br><span class="line">        a :  <span class="literal">undefined</span><span class="comment">// 变量声明</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数foo(22)时，创建当前EC的伪代码</span></span><br><span class="line"><span class="title class_">CurrentEC</span> : &#123;</span><br><span class="line">    [[<span class="title class_">Scope</span>]] : [&#123;<span class="variable constant_">AO</span>&#125;, &#123;<span class="variable constant_">VO</span>&#125;],</span><br><span class="line">    <span class="variable constant_">AO</span> : &#123;</span><br><span class="line">        <span class="comment">// 顺序：arguments对象 形参 函数声明 变量声明</span></span><br><span class="line">        <span class="variable language_">arguments</span> : &#123;</span><br><span class="line">            <span class="number">0</span> : <span class="number">22</span>,</span><br><span class="line">            length : <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        i : <span class="number">22</span>,<span class="comment">// 形参，接受实参赋值</span></span><br><span class="line">        c : fnC,<span class="comment">//指向函数c的引用</span></span><br><span class="line">        a : <span class="literal">undefined</span>,</span><br><span class="line">        b : <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2、多个script块间的执行过程</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script1 start&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>,a);</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> b=<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script1 end&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script2 start&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> a=<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>,b);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script2 end&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     script1 start</span></span><br><span class="line"><span class="comment">     Uncaught ReferenceError: a is not defined</span></span><br><span class="line"><span class="comment">     script2 start</span></span><br><span class="line"><span class="comment">     b undefined</span></span><br><span class="line"><span class="comment">     script2 end</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 1、从代码运行结果可以看出，JS执行流在进入第一个 script 块时，首先会创建全局 EC ，将 b 的声明加入 AO 并推入作用域中（所以第二个 script 块中的代码才能访问到 b），全局EC压入 ECS。</span></span><br><span class="line"><span class="comment"> 2、逐行的进行分词、语法检查、代码生成，然后执行。</span></span><br><span class="line"><span class="comment">     2.1、在 console.log(&#x27;script1 start&#x27;); 这行代码中，不存在语法错误，执行，输出 start。</span></span><br><span class="line"><span class="comment">     2.2、在 console.log(&#x27;a&#x27;,a); 这行代码中，对变量 a 进行 RHS 查询，在作用域链中找不到 a ，报 ReferenceError，script 块中断执行。</span></span><br><span class="line"><span class="comment"> 3、JS执行流进入第二个 script 块，仍然在全局 EC（JS引擎只会存在一个全局EC），将 a 的声明加入 AO（与第一个代码块相同，每个EC绑定唯一的 VO|AO） 并推入作用域。</span></span><br><span class="line"><span class="comment"> 4、逐行的进行分词、语法检查、代码生成，然后执行。</span></span><br><span class="line"><span class="comment">     4.1、在 console.log(&#x27;b&#x27;,b); 这行代码中，对变量 b 进行 RHS 查询，在作用域的 AO 中找到对应的值 undefined，输出 b undefined。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 结束</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>3、闭包的产生</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 首先明确什么是闭包？可以使用如下定义：</span></span><br><span class="line"><span class="comment">// 函数在定义的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;JavaScript&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> func;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">func</span>(); <span class="comment">// JavaScript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func函数执行的位置和定义的位置是不相同的，func是在函数fn中定义的，但执行却是在全局环境中，虽然是在全局函数中执行的，但函数仍然可以访问当定义时的词法作用域。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当函数执行结束后其活动变量就会被销毁，但是在上面的例子中却不是这个样子。但函数fn执行结束之后，fn对象的活动变量并没有被销毁，这是因为fn返回的函数func的作用域链还保持着fn的活动变量，因此JavaScript的垃圾回收机制不会回收fn活动变量。虽然返回的函数func是在全局环境下执行的，但是其作用域链的存储的活动(变量)对象的顺序分别是:func的活动对象、fn的活动对象、全局变量对象。因此在func函数执行时，会顺着作用域链查找标识符，也就能访问到fn所定义的词法作用域(即fn函数的活动变量)也就不足为奇了。</span></span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><code>总结</code></h2><p>多个script块间的执行顺序</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">多个script代码块从上到下按序载入，语法分析阶段报错的话，结束本代码块的执行，执行流进入下一个代码块。多个代码块共享全局执行上下文，可以访问到其他代码块定义的变量和方法。</span><br></pre></td></tr></table></figure></div>

<p>为什么会产生变量提升与函数提升？<br> <div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">答：在代码执行之前的预编译阶段，创建当前<span class="variable constant_">EC</span>时，会在活动对象上创建一个与函数声明与变量声明对应的属性，然后将活动对象推入作用域链。在查询变量时，是通过作用域链进行<span class="variable constant_">RHS</span>查询。所以会查询到作用域链上已经定义的函数与变量。</span><br></pre></td></tr></table></figure></div></p>
<p>闭包的产生</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">简单来说，闭包中的函数所对应的作用域链上仍然保留了父级活动对象，所以可以对父级活动对象的属性进行查询。</span><br></pre></td></tr></table></figure></div>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><code>参考资料</code></h2><ul>
<li>《你不知道的Javascript》（上卷），第一部分，作用域和闭包</li>
<li><a class="link"   href="https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/" >JS引擎的执行过程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://segmentfault.com/a/1190000013915935" >彻底明白作用域、执行上下文 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/yangxinxiang84/article/details/113051811?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.10297.16155372256670345&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control" >深入理解JavaScript的执行流程，执行上下文EC、变量对象VO、活动对象AO、作用域Scope <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/Ancecis/article/details/104382441" >浅谈JS的 VO|AO <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/chen_zw/article/details/18502937?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control" >JS运行机制之执行顺序 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/MrErHu/blog/issues/16" >我所认识的作用域链与原型链 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>JS运行机制</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端发展历程梳理</title>
    <url>/2022/03/09/%E3%80%90%E6%96%B9%E6%B3%95%E8%AE%BA%E3%80%91%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B%E6%A2%B3%E7%90%86%EF%BC%88%E6%9C%AA%E5%AE%8C%E6%88%90%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解前端的发展历史有助于从一个全局的视角来重新认知前端技术，脱离单独某一种视角的窠臼。</p>
<ul>
<li><code>Node.js</code>的出现意味着什么？</li>
<li>为什么要从<code>jquery</code>转入三大框架？</li>
<li>既然已经有了<code>javascript</code>为什么还要使用<code>babel</code>来转化？</li>
<li><code>CommonJS</code>、<code>AMD</code>、<code>CMD</code>、<code>ESModule</code>又是什么？</li>
</ul>
<p>类似的问题不胜枚举，而这篇文章有助于解决此类问题。</p>
<h2 id="1-需求驱动和问题驱动"><a href="#1-需求驱动和问题驱动" class="headerlink" title="1.需求驱动和问题驱动"></a>1.需求驱动和问题驱动</h2><p>一种技术能够出现并且不断的发展，一定具有某种内在的驱动力，我认为这种驱动力存在两种：</p>
<ol>
<li>需求驱动</li>
<li>问题驱动</li>
</ol>
<p>需求驱动顾名思义就是当前的技术工具支持不了新的需求，所以推动了新技术的产生。而问题驱动则是实现某种需求的过程中产生了困难，老旧的技术工具解决不了或者解决起来很麻烦困难，所以推动了新技术的产生。</p>
<h2 id="2-前端大事件的时间节点"><a href="#2-前端大事件的时间节点" class="headerlink" title="2.前端大事件的时间节点"></a>2.前端大事件的时间节点</h2><table>
<thead>
<tr>
<th align="left">时间</th>
<th align="left">事件</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>web1.0 1991~2004</code></td>
<td align="left">只读网络，网站提供内容，用户阅读内容</td>
</tr>
<tr>
<td align="left">1989年</td>
<td align="left"><code>HTML</code>由Web的发明者Tim Berners-Lee创立，这也是前端的起始</td>
</tr>
<tr>
<td align="left">1994年</td>
<td align="left">世界上的第一款浏览器<code>NCSAMosaic</code>由Netscape（网景）公司开发,同年<code>W3C</code>（世界万维网联盟）成立</td>
</tr>
<tr>
<td align="left">1995年</td>
<td align="left"><code>JavaScript</code>由网景公司的Brendan Eich设计</td>
</tr>
<tr>
<td align="left">1996年</td>
<td align="left">W3C发布了<code>CSS1</code>标准，从此前端有了样式规范</td>
</tr>
<tr>
<td align="left">1997年</td>
<td align="left"><code>ECMAScript1</code>由ECMA国际正式发布，从此Javascript有了自己的标准，同年W3C发布了<code>HTML4.0</code>标准，这是使用时间最长的一个版本</td>
</tr>
<tr>
<td align="left">1998年</td>
<td align="left">W3C发布了<code>XML(可扩展标记语言)</code>标准，同年<code>Ajax</code>（异步Javascript和XML）技术开始得到应用</td>
</tr>
<tr>
<td align="left">2001年</td>
<td align="left">Douglas Crockford开始推广使用<code>JSON</code>数据格式，它比XML更加简洁清晰</td>
</tr>
<tr>
<td align="left"><code>web2.0 2004~至今</code></td>
<td align="left">交互网络，用户产生内容，通过网站与他人交互</td>
</tr>
<tr>
<td align="left">2006年</td>
<td align="left">John Resig发布了<code>JQuery</code>的第一个版本，这是迄今为止最成功的JS库，同年W3C正式发布<code>XMLHttpRequest</code>标准，为以后的Ajax爆发提供技术基础。</td>
</tr>
<tr>
<td align="left">2008年</td>
<td align="left">Google开源了高性能的Javascript引擎<code>V8</code></td>
</tr>
<tr>
<td align="left">2009年</td>
<td align="left">Ryan Dahl开发了基于V8引擎的<code>NodeJS</code>运行时环境，从此javascript可以运行在服务端；同年<code>ECMAScript5</code>发布，这是使用时间最长，各个浏览器兼容性最好，如今大部分程序也依然在使用的一代标准；同年Miško Hevery创造了<code>AngularJS</code>框架，基于MVC模式，并且实现了SPA（单页面应用）</td>
</tr>
<tr>
<td align="left">2010年</td>
<td align="left"><code>NPM</code>（NodeJS包管理工具）发布了第一个版本，从此前端有了自己的包管理器</td>
</tr>
<tr>
<td align="left">2011年</td>
<td align="left">Twitter开源了其前端框架<code>Bootstrap</code></td>
</tr>
<tr>
<td align="left">2012年</td>
<td align="left">微软发布了<code>Typescript</code>的第一个版本，让Javascript拥有了自己的类型</td>
</tr>
<tr>
<td align="left">2013年</td>
<td align="left">Facebook开源了其前端框架<code>React</code>，同年尤雨溪受到Angular启发开发了轻量级前端框架<code>Seed</code>，后更名为<code>Vue</code></td>
</tr>
<tr>
<td align="left">2014年</td>
<td align="left">W3C发布了<code>HTML5</code>标准</td>
</tr>
<tr>
<td align="left">2015年</td>
<td align="left"><code>ECMAScript6</code>正式发布，后更名为<code>ECMAScript2015</code>，之截至目前2022年，每年都发布了对应的新版本</td>
</tr>
<tr>
<td align="left">2016年</td>
<td align="left"><code>ECMAScript2016</code>正式发布</td>
</tr>
<tr>
<td align="left">2017年</td>
<td align="left"><code>ECMAScript2017</code>正式发布</td>
</tr>
</tbody></table>
<h2 id="一些技术发展过程的梳理"><a href="#一些技术发展过程的梳理" class="headerlink" title="一些技术发展过程的梳理"></a>一些技术发展过程的梳理</h2><p>可以把前端发展的历程分为</p>
<h2 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>百度百科</li>
<li><a class="link"   href="http://www.javashuo.com/article/p-hvrlfhxo-gc.html" >前端的历史发展节点 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://zhuanlan.zhihu.com/p/196637639" >Web开发的历史发展技术演变 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/qq_44273429/article/details/127462439" >Web 1.0、Web 2.0 和 Web 3.0 之间的比较 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vue3 源码学习】01，从 createApp() 方法开始</title>
    <url>/2022/06/03/vueSourceCodeStudy01/</url>
    <content><![CDATA[<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy01/s0.jpg"
                      class="" title="s0"
                >
<p>PS: 这是一张很有用的图</p>
<h2 id="前言：怎样学习源码？"><a href="#前言：怎样学习源码？" class="headerlink" title="前言：怎样学习源码？"></a>前言：怎样学习源码？</h2><ol>
<li>有主线，两种方式<ol>
<li>从入口入手，package.json–&gt;</li>
<li>从逻辑入手，createApp()</li>
</ol>
</li>
<li>提出一个问题，在源码中找答案</li>
<li>学习一步整理一步，然后复盘复习（画图）</li>
<li>有所掌握后造轮子实践</li>
<li>写博客或者做视频，在知识分享中巩固知识</li>
</ol>
<h2 id="首先提几个问题"><a href="#首先提几个问题" class="headerlink" title="首先提几个问题"></a>首先提几个问题</h2><ul>
<li>第一个问题：app 实例如何创建？</li>
<li>第二个问题：app 实例中有些什么？</li>
</ul>
<h2 id="第一个问题：app-实例如何创建？"><a href="#第一个问题：app-实例如何创建？" class="headerlink" title="第一个问题：app 实例如何创建？"></a>第一个问题：app 实例如何创建？</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy01/s1-1.png"
                      class="" title="s1-1"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy01/s1-2.png"
                      class="" title="s1-2"
                >
<p>createApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy01/s1-3.png"
                      class="" title="s1-3"
                > 
<p>查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy01/s1-4.png"
                      class="" title="s1-4"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy01/s1-5.png"
                      class="" title="s1-5"
                >

<h2 id="第二个问题：app-实例中有些什么？"><a href="#第二个问题：app-实例中有些什么？" class="headerlink" title="第二个问题：app 实例中有些什么？"></a>第二个问题：app 实例中有些什么？</h2><p>在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy01/s1-6.png"
                      class="" title="s1-6"
                >

<h2 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h2><p>可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> myComponent <span class="keyword">from</span> <span class="string">&#x27;./vueSourceCodeStudy01/myComponent&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> myPlugin <span class="keyword">from</span> <span class="string">&#x27;./myPlugin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue2</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;myComponent&#x27;</span>,myComponent);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(myPlugin);</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3</span></span><br><span class="line"><span class="title function_">createApp</span>(&#123;...&#125;).<span class="title function_">coponent</span>(myComponent).<span class="title function_">use</span>(myPlugin).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p>这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。</p>
]]></content>
      <categories>
        <category>源码</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>【一些有趣的问题】02，作用域与闭包</title>
    <url>/2021/02/25/someInterestingQuestions01/</url>
    <content><![CDATA[<h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p><code>以下语句会如何输出？</code></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i&#x27;</span>,i)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>结果</code>：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2021/02/25/someInterestingQuestions01/q1.png"
                      class="" title="结果"
                ></p>
<p><code>原因</code>：异步代码会在同步代码执行完毕后执行</p>
<p><code>分析</code>：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了5</p>
<p><strong>解决方案一：</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code> 结果</code>：1秒后连续打印 0 1 2 3 4 </p>
<p><code>原因</code>：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为5</p>
<p><strong>解决方案二：</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">  <span class="title function_">setTimeourt</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>结果</code>：1秒后连续打印 0 1 2 3 4</p>
<p><code>原因</code>：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</p>
<hr>
<h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="title class_">Foo</span>(),</span><br><span class="line">    f2 = <span class="title class_">Foo</span>();</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="title function_">f2</span>();</span><br></pre></td></tr></table></figure></div>
<p><code>结果</code>：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2021/02/25/someInterestingQuestions01/q2.png"
                      class="" title="结果"
                ></p>
<p><code>原因</code>：</p>
<p>第一次调用函数f1()：打印 0，创建闭包，此时局部变量i&#x3D;1；</p>
<p>第二次调用函数f1()：打印 1，创建闭包，此时局部变量i&#x3D;2；</p>
<p>第一次调用函数f2()：打印 0，因为函数f1、f2指向不同对象。</p>
<hr>
<h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 类变量a</span></span><br><span class="line">  <span class="title class_">Foo</span>.<span class="property">a</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例变量a，每个实例都有一个</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例变量a，所有实例共享一个</span></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类变量a</span></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">a</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">obj.<span class="title function_">a</span>();</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">a</span>();</span><br></pre></td></tr></table></figure></div>
<p><code>结果</code>：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2021/02/25/someInterestingQuestions01/q3.png"
                      class="" title="结果"
                ></p>
<p><code>原因</code>：</p>
<p>打印4：一开始Foo方法并未调用，输出的是函数体外的变量a，此时可以把Foo当作对象，Foo.a为其对象属性。</p>
<p>打印2：使用new操作符实例化Foo后，obj.a首先查找obj上的标识符a，如果找不到的话沿着原型链向上查找，也找不到的话返回undefined。</p>
<p>打印1：此时Foo方法已经调用，方法体内的类变量a覆盖原来已经赋值的类变量a。</p>
]]></content>
      <categories>
        <category>一些有趣的问题</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>【一些有趣的问题】01，事件循环</title>
    <url>/2021/02/23/someInterestingQuestions02/</url>
    <content><![CDATA[<p><code>以下语句会如何输出？</code></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise&#x27;</span>)</span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>结果：打印 start promise end then1 then2 setTimeout</p>
<p>原因：简单来说，JS代码的执行顺序为：同步代码–&gt;异步代码（微任务–&gt;宏任务）</p>
<p>分析：</p>
<ol>
<li><p>打印start</p>
</li>
<li><p>setTimeout 加入消息队列</p>
</li>
<li><p>new Promise 的同步部分执行，打印promise，then 部分加入消息队列</p>
</li>
<li><p>打印end</p>
</li>
<li><p>消息队列中先处理微任务 then 的部分，打印then1，then2</p>
</li>
<li><p>消息队列处理宏任务 setTimeout，打印setTimeout</p>
</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><code>参考资料</code></h2><blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" >并发模型与事件循环 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="http://lynnelv.github.io/js-event-loop-browser" >深入理解js事件循环机制（浏览器篇） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>一些有趣的问题</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vue3 源码学习】02，初始 mount() 方法</title>
    <url>/2022/06/03/vueSourceCodeStudy02/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>书接上回，在 runtime-core 包下的文件<code>/runtime-core/src/apiCreateApp.ts</code>中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，<code>mount()</code>就在其中。</p>
<h2 id="首先提几个问题"><a href="#首先提几个问题" class="headerlink" title="首先提几个问题"></a>首先提几个问题</h2><ol>
<li>初次挂载时 mount() 方法做了些什么？ </li>
<li>回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s0.png"
                      class="" title="s2-0"
                ></li>
</ol>
<h2 id="初次挂载时-mount-方法干了些什么？"><a href="#初次挂载时-mount-方法干了些什么？" class="headerlink" title="初次挂载时 mount() 方法干了些什么？"></a>初次挂载时 mount() 方法干了些什么？</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-1.png"
                      class="" title="s2-1"
                >

<p>首先进入 mount() 方法，它接收 3 个参数：<code>rootContainer</code>，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以看到我们只传了一个字符串，是一个 CSS 选择器。</span></span><br><span class="line"><span class="title function_">createApp</span>(&#123;&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>再看方法体：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-2.png"
                      class="" title="s2-2"
                >

<p>可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。</p>
<p>让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在<code>/runtime-core/src/renderer.ts</code>目录下可以找到。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-3.png"
                      class="" title="s2-3"
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-4.png"
                      class="" title="s2-4"
                >

<p>接下来找到 render() 方法的方法体：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-5.png"
                      class="" title="s2-5"
                >

<p>可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个<code>patch()</code>方法</p>
<p>我们来看一下这个 patch() 方法中传了些什么：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-6.png"
                      class="" title="s2-6"
                >

<p>可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向<code>div#app</code>，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-7.png"
                      class="" title="s2-7"
                >

<p>之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-8.png"
                      class="" title="s2-8"
                >

<!-- 
  YCNOTE：为什么 switch 语句要传入一个对象
 -->
<p>沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据<code>type</code>和<code>shapeFlag</code>的值进行不同的操作：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-10.png"
                      class="" title="s2-10"
                >

<p>此时 shapeFlag 的值为 4，进行位与运算值为 true。以下<code>位移枚举</code>可以学一下，它的好处是清晰、好计算并且可以进行多值判断。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-11.png"
                      class="" title="s2-11"
                >

<p>初次挂载时执行<code>processComponent()</code>方法，进入方法体 processComponent()：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-12.png"
                      class="" title="s2-12"
                >

<p>可以看到走进 else 代码块，触发方法<code>mountComponent()</code>，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个<code>setupRenderEffect()</code>方法，</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-13.png"
                      class="" title="s2-13"
                >

<p>这个方法创建了一个执行器 <code>effect</code>，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下，初次挂载时 mount() 方法执行流程大概这样：</p>
<p>mount()–&gt;createVNode()–&gt;render()–&gt;patch()–&gt;processComponent()–&gt;mountComponent()–&gt;createComponentInstance–&gt;setupRenderEffect()–&gt;ReactiveEffect()–&gt;update()–&gt;effect.run()</p>
<p>简洁一点就是：</p>
<p>mount()–&gt;render()–&gt;patch()</p>
<p>可以通过调用堆栈查看：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-14.png"
                      class="" title="s2-14"
                >

<p>回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/06/03/vueSourceCodeStudy02/s2-15.png"
                      class="" title="s2-15"
                >

<p>本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析render() 和 patch() 函数。</p>
<p>若有错误请大佬指出，感激不尽。</p>
]]></content>
      <categories>
        <category>源码</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
