<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>categories</title>
      <link href="/2021/09/16/categories/"/>
      <url>/2021/09/16/categories/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重构方法论</title>
      <link href="/2021/09/01/%E9%87%8D%E6%9E%84%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
      <url>/2021/09/01/%E9%87%8D%E6%9E%84%E6%96%B9%E6%B3%95%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="重构（Refactoring）"><a href="#重构（Refactoring）" class="headerlink" title="重构（Refactoring）"></a>重构（Refactoring）</h1><p>一、什么是重构？</p><p>在<code>不改变代码外在行为</code>的前提下，对代码进行修改，以<code>改进程序的内部结构</code></p><p>二、为什么要重构？</p><p>在软件工程中，开发迭代的过程实际上是一个熵增的过程，软件系统会随着生命周期的进行变得越来越臃肿、混乱、冗余，从而增加维护与进一步迭代的成本。而重构可以<code>偿还技术债务、改进软件结构、减小维护和迭代的成本、增加产品可信</code>。</p><p>三、重构有哪些分类？</p><ul><li>小粒度重构（函数级、小模块）</li><li>大粒度重构（架构级、大模块）</li></ul><p>四、什么时候重构？</p><ul><li>新增需求时（小粒度）</li><li>修改BUG时（小粒度）</li><li>复审代码时（大粒度）</li><li>代码逻辑混乱、依赖混杂（大粒度）</li></ul><p>五、重构有哪些原则？</p><ul><li>先评审，再重构，不要反复推翻重来</li><li>新增需求时，不要改动既有代码</li><li>重构既有代码时，不要新增功能</li></ul><p>六、重构工作流程</p><ol><li>识别代码坏味道，定位需要重构的模块</li><li>小步前进，小粒度重构代码</li><li>测试保护，随时回退</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2021/09/01/%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/09/01/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS执行流程</title>
      <link href="/2021/09/01/JS%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/09/01/JS%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JS执行流程"><a href="#JS执行流程" class="headerlink" title="JS执行流程"></a><strong>JS执行流程</strong></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><code>前言</code></h2><p>&emsp;&emsp;<br>本文主要解释JS引擎在遇见script代码块时，从编译到执行具体经历了什么？为什么会产生变量提升？闭包的产生原理是什么?多个script代码块间是以什么顺序来执行的？为什么定义在不同代码块间的方法可以共通？通过本文都可以得到解答。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><code>基础概念</code></h2><ul><li><p>JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。</p><blockquote><p><code>解释型</code>：JS引擎在运行JS代码时，是利用解释器一边编译一边执行的。</p><p>如此便避免不了一种情况：某些代码多次重复的运行，例如 for循环，在编译型语言中，for循环块中的代码将以机器码执行多次；而在解释型语言中，for循环块中的代码将被解释多次并执行，如此便有了很大的耗损。</p><p><code>即时编译型</code>：于是JS引擎就加入了<code>JIT</code>（Just-in-time）进行编译优化，例如对重复语句和类型判断进行优化。</p></blockquote></li><li><p>引擎、编译器与作用域</p><blockquote><p>引擎：从头到尾负责整个javascript程序的编译及执行过程。浏览器不同，其引擎也不同，比如Chrome采用的是v8，Safari采用的是SquirrelFish Extreme。</p><p>编译器：编译过程主要分为”词法分析”、“语法分析”及“代码生成“。</p><p>作用域（Scope）：根据名称查找变量的一套规则，用于管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。</p></blockquote></li><li><p>执行上下文（Excution Context EC）&amp;&amp; 执行上下文栈（Excution Context Stack ECS）</p><blockquote><p>存在三种 EC：全局执行上下文  GlobalEC ，函数执行上下文  Function EC，Eval。</p><p>ECS：引擎记录EC的容器，栈底是 GlobalEC ，只有在关闭页面时出栈；栈顶是当前正在执行的 EC ，函数执行完毕后出栈，并将执行权交给下一个 EC 。</p></blockquote></li><li><p>变量对象（Variable Object）&amp;&amp; 活动对象（Activation Object）</p><blockquote><p>VO：EC中用来存储变量声明（必须是 var 关键字声明而不是 let 与 const）与函数声明（必须是显式声明而不是表达式）的容器。由引擎实现，不能访问到。</p><p>AO：可以理解为VO的实例化，函数调用时在EC中被激活，成员属性能被访问。</p></blockquote></li><li><p>LHS（Left Hand Side） &amp;&amp; RHS（Right Hand Side）</p><blockquote><p>LHS：赋值操作的目标。例如：a=2; 是对 a 进行 LHS查询。</p><p>RHS：赋值操作的源头。例如：console.log(a); 是对 a 进行 RHS查询。</p><p>非严格模式下，LHS查询不到变量会在顶层作用域创建具有该名称的变量，RHS查询不到变量会报ReferenceError的异常；严格模式下禁止自动创建全局变量，两种查询方式失败均报ReferenceError的异常。</p></blockquote></li></ul><h2 id="JS代码执行流程"><a href="#JS代码执行流程" class="headerlink" title="JS代码执行流程"></a><code>JS代码执行流程</code></h2><p>&emsp;&emsp;<br>进入script标签，【预编译】JS引擎创建全局EC，全局EC入栈–&gt;【编译】JS解释器开始对代码逐行进行分词、语法分析、代码生成–&gt;有错则抛出，终止执行；无错继续向下逐行执行–&gt;【预编译】调用函数前，创建函数EC，EC入栈–&gt;【编译】–&gt;有错则抛出，终止执行；无错继续向下执行–&gt;函数执行完毕，EC出栈–&gt;继续以上步骤–&gt;页面销毁，全局EC出栈，结束</p><p>&emsp;&emsp;<br>创建当前环境EC流程如下：</p><p>1、初始化作用域[[Scope]]，（拷贝传入的父执行上下文的Scope），数据结构应该是数组或者链表。</p><blockquote><p>例如：[[Scope]] : AO1（当前）–&gt;VO（全局）</p></blockquote><p>2、创建活动对象，创建完成之后，将活动对象推入作用域链的最前端：</p><blockquote><p>例如：[[Scope]] : AO2（当前）–&gt;AO1（父级）–&gt;VO（全局）</p></blockquote><p>2.1、创建arguments对象，检查上下文，初始化参数名称和值并创建引用的复制。（函数中存在）</p><p>2.2、创建形参，通过实参赋值。（函数中存在）</p><p>2.3、扫描上下文的函数声明（而非函数表达式）：</p><blockquote><p>为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。函数声明比变量优先级要高，并且定义过程不会被变量覆盖，除非是赋值</p></blockquote><p>2.4、扫描上下文的变量声明：</p><blockquote><p>为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为undefined，如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。</p></blockquote><p>3、求出上下文内部this的值。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a><code>代码分析</code></h2><p>1、EC创建流程与变量提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;outer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`------------`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">22</span>);<span class="comment">// 对形参i的LHS查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">ƒ <span class="function"><span class="title">c</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">------------</span><br><span class="line">hello</span><br><span class="line">ƒ() &#123;&#125;</span><br><span class="line">ƒ <span class="function"><span class="title">c</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析</span></span><br><span class="line"><span class="comment">// 代码载入前，创建全局EC的伪代码</span></span><br><span class="line"><span class="attr">GlobalEC</span> : &#123;</span><br><span class="line">    [[Scope]] : [&#123;VO&#125;],</span><br><span class="line">    <span class="attr">VO</span> : &#123;</span><br><span class="line">        <span class="attr">foo</span> : fnFoo,<span class="comment">// 函数声明优先，指向函数Foo的引用</span></span><br><span class="line">        <span class="attr">a</span> :  <span class="literal">undefined</span><span class="comment">// 变量声明</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数foo(22)时，创建当前EC的伪代码</span></span><br><span class="line"><span class="attr">CurrentEC</span> : &#123;</span><br><span class="line">    [[Scope]] : [&#123;AO&#125;, &#123;VO&#125;],</span><br><span class="line">    <span class="attr">AO</span> : &#123;</span><br><span class="line">        <span class="comment">// 顺序：arguments对象 &gt; 形参 &gt; 函数声明 &gt; 变量声明</span></span><br><span class="line">        <span class="attr">arguments</span> : &#123;</span><br><span class="line">            <span class="number">0</span> : <span class="number">22</span>,</span><br><span class="line">            <span class="attr">length</span> : <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">i</span> : <span class="number">22</span>,<span class="comment">// 形参，接受实参赋值</span></span><br><span class="line">        <span class="attr">c</span> : fnC,<span class="comment">//指向函数c的引用</span></span><br><span class="line">        <span class="attr">a</span> : <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">b</span> : <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、多个script块间的执行过程</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;script1 start&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>,a);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b=<span class="number">2</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;script1 end&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;script2 start&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>,b);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;script2 end&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    script1 start</span></span><br><span class="line"><span class="comment">    Uncaught ReferenceError: a is not defined</span></span><br><span class="line"><span class="comment">    script2 start</span></span><br><span class="line"><span class="comment">    b undefined</span></span><br><span class="line"><span class="comment">    script2 end</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line">1、从代码运行结果可以看出，JS执行流在进入第一个 script 块时，首先会创建全局 EC ，将 b 的声明加入 AO 并推入作用域中（所以第二个 script 块中的代码才能访问到 b），全局EC压入 ECS。</span><br><span class="line">2、逐行的进行分词、语法检查、代码生成，然后执行。</span><br><span class="line">    2.1、在 console.log(&#x27;script1 start&#x27;); 这行代码中，不存在语法错误，执行，输出 start。</span><br><span class="line">    2.2、在 console.log(&#x27;a&#x27;,a); 这行代码中，对变量 a 进行 RHS 查询，在作用域链中找不到 a ，报 ReferenceError，script 块中断执行。</span><br><span class="line">3、JS执行流进入第二个 script 块，仍然在全局 EC（JS引擎只会存在一个全局EC），将 a 的声明加入 AO（与第一个代码块相同，每个EC绑定唯一的 VO|AO） 并推入作用域。</span><br><span class="line">4、逐行的进行分词、语法检查、代码生成，然后执行。</span><br><span class="line">    4.1、在 console.log(&#x27;b&#x27;,b); 这行代码中，对变量 b 进行 RHS 查询，在作用域的 AO 中找到对应的值 undefined，输出 b undefined。</span><br><span class="line"></span><br><span class="line">结束</span><br></pre></td></tr></table></figure><p>3、闭包的产生</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">首先明确什么是闭包？可以使用如下定义：</span><br><span class="line"><span class="comment">// 函数在定义的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词法作用域。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;JavaScript&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> func;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = fn();</span><br><span class="line">func(); <span class="comment">// JavaScript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func函数执行的位置和定义的位置是不相同的，func是在函数fn中定义的，但执行却是在全局环境中，虽然是在全局函数中执行的，但函数仍然可以访问当定义时的词法作用域。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当函数执行结束后其活动变量就会被销毁，但是在上面的例子中却不是这个样子。但函数fn执行结束之后，fn对象的活动变量并没有被销毁，这是因为fn返回的函数func的作用域链还保持着fn的活动变量，因此JavaScript的垃圾回收机制不会回收fn活动变量。虽然返回的函数func是在全局环境下执行的，但是其作用域链的存储的活动(变量)对象的顺序分别是:func的活动对象、fn的活动对象、全局变量对象。因此在func函数执行时，会顺着作用域链查找标识符，也就能访问到fn所定义的词法作用域(即fn函数的活动变量)也就不足为奇了。</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><code>总结</code></h2><blockquote><p>多个script块间的执行顺序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">多个script代码块从上到下按序载入，语法分析阶段报错的话，结束本代码块的执行，执行流进入下一个代码块。多个代码块共享全局执行上下文，可以访问到其他代码块定义的变量和方法。</span><br></pre></td></tr></table></figure><blockquote><p>为什么会产生变量提升与函数提升？<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">答：在代码执行之前的预编译阶段，创建当前EC时，会在活动对象上创建一个与函数声明与变量声明对应的属性，然后将活动对象推入作用域链。在查询变量时，是通过作用域链进行RHS查询。所以会查询到作用域链上已经定义的函数与变量。</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>闭包的产生</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">简单来说，闭包中的函数所对应的作用域链上仍然保留了父级活动对象，所以可以对父级活动对象的属性进行查询。</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><code>参考资料</code></h2><ul><li>《你不知道的Javascript》（上卷），第一部分，作用域和闭包</li><li><a href="https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/">JS引擎的执行过程</a></li><li><a href="https://segmentfault.com/a/1190000013915935">彻底明白作用域、执行上下文</a></li><li><a href="https://blog.csdn.net/yangxinxiang84/article/details/113051811?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.10297.16155372256670345&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">深入理解JavaScript的执行流程，执行上下文EC、变量对象VO、活动对象AO、作用域Scope</a></li><li><a href="https://blog.csdn.net/Ancecis/article/details/104382441">浅谈JS的 VO|AO</a></li><li><a href="https://blog.csdn.net/chen_zw/article/details/18502937?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.control">JS运行机制之执行顺序</a></li><li><a href="https://github.com/MrErHu/blog/issues/16">我所认识的作用域链与原型链</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/09/01/hello-world/"/>
      <url>/2021/09/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
